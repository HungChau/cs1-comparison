Week,Topic,Subtopic,,ContentType,Content,concepts
1,Variables,,1,code_sample,"public class HelloWorld {  public static void main(String[] args) {   int x = 2;   double d = 10.0;   String name = ""Luke Skywalker"";   System.out.print(""The total is "");   System.out.println(""Hello World"");  } }",
1,Variables,,1,code_sample,"package edu.pitt.is17.lec02;public class Variables1 { public static void main(String[] args) {  // Here there are a couple of examples of variables in java  int number;  number = 10;  int anotherNumber = 10;  // this is a numeric variable that can have decimals   double thirdNumber = 0.5;    // name conventions on variables  int thisIsAnotherVariableOfMine;   }}",
1,Variables,,1,code_sample,"package edu.pitt.is17.lec02;public class Variables01 { public static void main(String[] args) {  int myNumber; // declaration  myNumber = 3; // initialization    int n = 1; // declaration and initialization at once    double realNumber = 0.5; // real number variable    realNumber = n; // int can be stored in double (but not vice versa)    System.out.println(realNumber); }}",
1,Variables,,1,code_sample,"package edu.pitt.is17.lec02;public class Variables2 { public static void main(String[] args) {  //   int n = 1;  double d = n*1.5;    System.out.println(b); }}",
1,Variables,,1,code_sample,"package edu.pitt.is17.lec02;public class Variables3 { public static void main(String[] args) {    // Arithmetic operations follow common order of operations, but  // we can use ( ) too.  double a = (4.0 + 3.0) * (1.0 / 2.0);    System.out.println(a);  // mod operator is the remainder of the integer division  int b = 10 % 4;  System.out.println(b);    // increment and decrement unary operators   b++; // b = b + 1;   System.out.println(b);    int d = b--;     }}",
2,2-primitive-data-types,,2,code_sample,"package edu.pitt.is17.lec02;public class Consversions1 { /**  * This program shows hot to convert from number to   * string and from string to number  *   */ public static void main(String[] args) {    double a = 3.5;  String aAsString = a+""""; // simplest conversion, concatenate to an empty string, makes it a string    String numberStr = ""3.5"";  String numberStr2 = ""3"";    // these are used to convert from string to number (double or int)  double number = Double.parseDouble(numberStr);   int n = Integer.parseInt(numberStr2);  System.out.println(number/2); }}",
2,2-primitive-data-types,,2,code_sample,"package edu.pitt.is17.lec02;public class NameConventions { public static void main(String[] args) {  // Name conventions for variables  int number;  int thisIsMyFirstVariable; }}",
2,2-primitive-data-types,,2,code_sample,"package edu.pitt.is17.lec02;public class NumberStringConversion { public static void main(String[] args) {  String numberStr = ""10"";    int n = Integer.parseInt(numberStr);    double d = Double.parseDouble(""0.5325""); }}",
2,2-primitive-data-types,,2,code_sample,"public class PrimitiveDataTypes{ public static void main(String[] args) {  byte byteNumber = 7;  short shortNumber = 1234;  int integerNumber = 1;  long longNumber = 123456789L;  float floatNumber = 1.2F;  double doubleNumber = 1.496;  boolean b = true;  boolean c = false;  char myChar = 'X'; }}",
3,3-constants,,3,code_sample,"package edu.pitt.is17.lec02;public class Constants1 { // These 2 lines of code show constants created ""at the level of the class"" // the modifier ""final"" makes it a constant, the modifier ""static"" makes it visible for the program // Name conventions for constants is all uppercase, words separated by underscore (_) static final double PI = 3.141593; static final double MY_CONSTANT = 0.05;  public static void main(String[] args) {        int dollars = 10;        int quarters = 3;        int dimes = 4;                final double QUARTER_VALUE = 0.25;        final double DIME_VALUE = 0.1;                double payment = dollars + quarters * QUARTER_VALUE + dimes * DIME_VALUE; }}",
3,3-constants,,3,code_sample,"package edu.pitt.is17.lec02;public class Constants { public static void main(String[] args) {  final double PI_MATH = 3.14159235232; // final makes it a constant. Note the name following name conventions for constants (all upper case, word separation using underscore '_')  double area1 = 1 * 1 * PI_MATH;  double area2 = 2 * 2 * PI_MATH;  double area3 = 3 * 3 * PI_MATH;  double area4 = 4 * 4 * PI_MATH;  double area5 = 5 * 5 * PI_MATH; }}",
3,3-constants,,3,code_sample,"package edu.pitt.is17.lec02;public class Constants1 { // These 2 lines of code show constants created ""at the level of the class"" // the modifier ""final"" makes it a constant, the modifier ""static"" makes it visible for the program // Name conventions for constants is all uppercase, words separated by underscore (_) static final double PI = 3.141593; static final double MY_CONSTANT = 0.05;  public static void main(String[] args) {  double radius = 2.4;    double area1 = PI * radius * radius;  double area2 = PI * 1 * 1;  double area3 = PI * 2 * 2;  double area4 = PI * 3 * 3;  double area5 = PI * 4 * 4;   }}",
4,4-Arithmetic-operations,,4,code_sample,"package edu.pitt.is17.lec02;public class ArithmeticOperations1 { public static void main(String[] args) {  int n = 3 + 5 / 2 - 2;   System.out.println(n);  double d = 3 + 5 / 2 - 2;  System.out.println(d); }}",
4,4-Arithmetic-operations,,4,code_sample,"package edu.pitt.is17.lec02;public class ArithmeticOperations2 { public static void main(String[] args) {  int n = 10 % 3;    // post increment  n++; // n = n + 1;  // post decrement  n--;  // pre increment  ++n;  // pre decrement  --n;  // ------------  n = 1;    // post increment or decrement are performed after the value of the variable is used  // pre inc or decr are performed before the value is used  // In this case, the following line of code will do: 1) int a = n - 2; 2) n = n + 1;  int a = n++ - 2;    System.out.println(a);  System.out.println(n); }}",
4,4-Arithmetic-operations,,4,code_sample,"package edu.pitt.is17.lec02;public class ArithmeticOperations1 { public static void main(String[] args) {  int x = 5;  double y = 2.5;  double result = x * y;  double average = (1 + 1)/3;    int counter = 0;  counter++;  int counter = 0;  counter = counter + 1;  int counter = 5;  counter--;  int counter = 5;  counter = counter - 1;  int x = 27    x++;  x = x + 2;  int x = 33;  x--;  x-=2;  double x = Math.pow(2, 8);  double y = Math.sqrt(4);  long r = Math.round(x/y); }}",
4,4-Arithmetic-operations,,4,code_sample,"public class TypeCasting{ public static void main(String[] args) {  double saleTotal = 175.05;  double balance = salesTotal * 0.07;  int dollars = balance;        double saleTotal = 175.05;  final double PA_SALES_TAX = 0.07;  double balance = salesTotal * PA_SALES_TAX;  int dollars = (int) balance; }}",
5,5-strings,,5,code_sample,"package edu.pitt.is17.lec02;import javax.swing.JOptionPane;public class FortuneTeller { public static void main(String[] args){  double magicFactor = 2.5;  int magicNumber = 7;  String message = ""Welcome to The Fortune Teller"";  message = message + ""\nPlease tell me your name:"";  String name = JOptionPane.showInputDialog(message);  String ageStr = JOptionPane.showInputDialog(""and your age"");  int age = Integer.parseInt(ageStr);  int x = age / magicNumber + (age % 7);  int y = (int) Math.round(name.length() / magicFactor);  int days = (x*y);  System.out.println(""Thank you ""+name);  System.out.println(""The shadows from above said that you will be given an important ""    + ""oportunity in the future, in exaclty ""+days+"" days from now.\nDo not miss it!""); }}",
5,5-strings,,5,code_sample,"package edu.pitt.is17.lec02;import javax.swing.JOptionPane;public class InputOutput { final static double PI = 3.14159;  /*  * Basic input output using JOptionPane  */ public static void main(String[] args) {  // showInputDialog allows the user to input a string   String input = JOptionPane.showInputDialog(""Please, enter the value of a radius:"");    double r = Double.parseDouble(input);    double area = r*r*PI;    // output can be either to a console (using System.out.println)  // or using a message dialog using JOptionPane.showMessageDialog  System.out.println(""The area of a circle of radius ""+r+"" is ""+area);  JOptionPane.showMessageDialog(null,""The area of a circle of radius ""+r+"" is ""+area);   }}",
5,5-strings,,5,code_sample,"package edu.pitt.is17.lec02;import javax.swing.JOptionPane;public class InputOutput { public static void main(String[] args) {  // showInputDialog display a small input dialog window  // whatever is input by the user it is caught as a String  String input = JOptionPane.showInputDialog(""Enter a temperature:"");  double t = Double.parseDouble(input);    double c = (t - 32) * 5.0/9;    JOptionPane.showMessageDialog(null, t+"" ÁF = "" + c + "" ÁC"");  }}",
5,5-strings,,5,code_sample,"package edu.pitt.is17.lec02;public class Strings2 { public static void main(String[] args) {        String firstName = ""Harry"";        int n = firstName.length();        String firstName = """";        String firstName = ""Walter"";        String lastName = ""White"";        String fullName = firstName + "" "" + lastName;        int x = 5;        x = x + 3;                String name = ""Peter"";        String lastName = ""Pan"";                name = name + lastName;        String jobTitle = ""Secret Agent"";        int employeeId = 7;        String fullTitle = jobTitle + "" "" + employeeId;                System.out.print(""The total is "");        System.out.println(total);        System.out.println(""The total is "" + total);        String name = ""Harry"";        char start = name.charAt(0); // ïHÍ        char last = name.charAt(4);   // ïyÍ        String b = ""Java is great."".substring(5,7);        String n = """" + 7;        String n = String.valueOf(0.25);        int x = Integer.parseInt(""5""); }}",
5,5-strings,,5,code_sample,"package edu.pitt.is17.lec02;public class Strings1 { public static void main(String[] args) {  String myName = ""voldemort"";    String firstLetter = myName.charAt(0) + """";   String lastLetter = myName.charAt(myName.length()-1) + """";       firstLetter = firstLetter.toUpperCase();  lastLetter = lastLetter.toUpperCase();    String middleOfName = myName.substring(1, myName.length()-1);    System.out.println(firstLetter + middleOfName + lastLetter);  }}",
5,5-strings,,5,code_sample,"package edu.pitt.is17.lec02;public class Strings2 { public static void main(String[] args) {  int age = 3;  String name = ""Snoopy"";  // concatenating Strings and numbers to give a better output  // by using the concatenation operator +  System.out.println(name+"" has ""+age+"" years old"");       }}",
5,5-strings,,5,code_sample,"package edu.pitt.is17.lec02;public class Strings1 { public static void main(String[] args) {  String aName = ""Snoopy"";  System.out.println(aName.length());  System.out.println(aName.charAt(aName.length()-1));   }}",
6,6-boolean-expressions,,6,code_sample,"package edu.pitt.is17.lecture3;public class Condition4 { public static void main(String[] args) {  int x = 0;  int y = 0;  // How do you test whether both of them are zero?  if(x == 0 && y == 0){     }    // How do you test whether at least one of them is zero?  if(x == 0 || y == 0){     }    if(x+y==y || x+y==x){     }    if((x == 0 && y != 0) || (x != 0 && y == 0)){     }              // How do you test whether exactly one of them is zero? }}",
6,6-boolean-expressions,,6,code_sample,"package edu.pitt.is17.lec02;public class Strings2 {        public static void main(String[] args) {        if(accountBalance = 0){            System.out.println(""No money in your account!"");        }        boolean a;        boolean b = true;        boolean c = (5 > 2);        if (temp > 0 && temp < 100) {            System.out.println(""Liquid"");        }        if (temp <= 0 || temp >= 100) {            System.out.println(""Not liquid"");        }        if (!frozen) {            System.out.println(""Not frozen"");        }        if (currency.equals(""dollars"") || currency.equals(""euro"")){            // accept payment        }        if (isLoggedIn == true && canViewPage == true){            // can login and view page        }        boolean isValidUser = false;                if (isValidUser != true){        }        if (!isValidUser){        }                String firstName = JOptionPane.showInputDialog(""First name:"");        String middleInitial = JOptionPane.showInputDialog(""Middle name initial (cancel to skip):"");        String lastName = JOptionPane.showInputDialog(""Last name:"");                if (middleInitial == null) {            System.out.println(firstName + "" "" + lastName);        }            }    }",
7,7-if-else,,7,code_sample,"package edu.pitt.is17.lecture3;import javax.swing.JOptionPane;public class Condition1 { public static void main(String[] args) {  /*   * Assume a variable x is containing a double value.    * Write an if-else statement that multiply it by itself    * if the value is greater than 1. Otherwise it should    * divide it by 2.   */  String userInput = JOptionPane.showInputDialog(""Enter a number:"");  // System.out.println(userInput);  if(userInput != null){   double numInput = Double.parseDouble(userInput);   if(numInput > 1){    numInput = numInput * numInput;   } // end of if block   else{    numInput = numInput / 2;   } // end of else block   System.out.println(numInput);  } // end of null check  else{   System.out.println(""Null value"");  } }}",
7,7-if-else,,7,code_sample,"package edu.pitt.is17.lecture3;import javax.swing.JOptionPane;public class Condition2 { public static void main(String[] args) {  /*   * Using an if statement and the modulus (%) operator    * write a program that asks users to enter a number    * and determines whether the number entered is even or odd.   */  String userInput = JOptionPane.showInputDialog(""Enter a number:"");  // System.out.println(userInput);  int numInput = Integer.parseInt(userInput);  if(numInput % 2 == 0){   System.out.println(""Number is even"");  } // end of if block  else{   System.out.println(""Number is odd"");  } // end of else block }}",
7,7-if-else,,7,code_sample,"package edu.pitt.is17.lecture3;import javax.swing.JOptionPane;public class Condition3 { public static void main(String[] args) {  String strName1 = JOptionPane.showInputDialog(""Enter Name 1"");  String strName2 = JOptionPane.showInputDialog(""Enter Name 2"");    if (strName1.equalsIgnoreCase(strName2)){   System.out.print(""The two strings are equal"");  }  else{   System.out.print(""The two strings are NOT equal"");  } }}",
7,7-if-else,,7,code_sample,"package edu.pitt.is17.lec02;public class Strings2 {        public static void main(String[] args) {        if (richter >= 8.0)        {            description = ""Most structures fall"";        }        else if (richter >= 7.0)        {            description = ""Many buildings destroyed"";        }        else if (richter >= 6.0)        {            description = ""Many buildings considerably damaged, some collapse"";        }        else if (richter >= 4.5)        {            description = ""Damage to poorly constructed buildings"";        }        else        {            description = ""No destruction of buildings"";        }            }    }",
8,9-loops-while,,8,code_sample,"package edu.pitt.is17.lecture4;public class Loop1 { public static void main(String[] args) {  String myName = ""Dmitriy"";  int i = 1;  int maxLimit = 1000;  while(i<= maxLimit){   System.out.println(i + ""\t"" + myName);   i++;  } }}",
9,10-loops-do-while,,9,code_sample,"package edu.pitt.is17.lec02;public class Strings2 {        public static void main(String[] args) {        int number = 0;        int theSum = 0;        do{            theSum += number;            number = Integer.parseInt(JOptionPane.showInputDialog(""the next number (-1 to exit)""));        }while(number != -1);        JOptionPane.showMessageDialog(null, ""The sum is "" + theSum);    }}",
10,11-loops-for,,10,code_sample,"package edu.pitt.is17.lecture4;public class Loop2 { public static void main(String[] args) {  // int numOfYears = calculateBalance(10000, 2);    // System.out.println(numOfYears);    // int sumOfNumbers = calculateSum(10);  // System.out.println(sumOfNumbers);  boolean checkPalindrome = isPalindrome(""Eva, can I see bees in a cave?"");  if(checkPalindrome){   System.out.println(""Sentence is a palindrome"");  }  else{   System.out.println(""Sentence is NOT a palindrome"");  } }  public static String stripBadChars(String text){  String badChars = "", @!#$%^&*()_+=?<>,.;'"";    for(int i = 0; i<badChars.length(); i++){   // Grab one bad character at a time   String currentBadChar = String.valueOf(badChars.charAt(i));   text = text.replace(currentBadChar, """");  }    return text; }  public static boolean isPalindrome(String text){  // Starting counter  int start = text.length() - 1;  // Ending counter  int end = 0;  // Reversed string  String reversedText = """";    for(int i = start; i>= end; i--){   // Find a character in position of i   char currentCharacter = text.charAt(i);      // Append character to reversed string   reversedText = reversedText + currentCharacter;     }      // Remove spaces  reversedText = stripBadChars(reversedText);  text = stripBadChars(text);    // Compare with initial input    if(reversedText.equalsIgnoreCase(text)){   return true;  }  else{   return false;  }   }  // Write a for loop that computes the sum of the integers from 1 to n. public static int calculateSum(int upperLimit){  int sum = 0;  for(int i = 0; i<=upperLimit; i++){   sum = sum + i;  }  return sum; }  // initAmount: Stores initial account balance // factor: By how much do you need to multiply the initial balance //   to obtain the final balance public static int calculateBalance(double initAmount, int factor){  double finalBalance = initAmount * factor;  double tempBalance = initAmount;  final double APR = 0.05;  int year = 1;  // Run this loop until the current balance matches the final balance  while(tempBalance <= finalBalance){   // Calculated interest   double accruedInterest = tempBalance * APR;   // Adds calculated interest back into current balance   tempBalance = tempBalance + accruedInterest;   year ++;  }  return year; }}",
11,12-nested-loops,,11,code_sample,"package edu.pitt.is17.lec02;public class Strings2 {        public static void main(String[] args) {        for(int i=1;i<4;i++){            for(int j=1;j<4;j++){                System.out.println(i+"" x ""+j+"" = ""+(i*j));            }        }    }    }",
12,13-objects,,12,code_sample,"package edu.pitt.is17.lec02;public class Strings2 {        public static void main(String[] args) {        Car myCar = new Car();                myCar.mileage = 0.0;        myCar.brand  = ""Mercedenz Benz"";        myCar.color  = ""black"";        myCar.licencePlate = ""JDG 60"";                Car anotherCar = new Car();                anotherCar.mileage = 17398.4;        anotherCar.brand  = ""Audi"";        anotherCar.color  = ""blue"";        anotherCar.licencePlate = ""IS 0017"";    }    }",
13,14-classes,,13,code_sample,"package edu.pitt.is17.classes;public class Car { public String brand; public String color; private String licensePlate = """"; public double mileage;  public void registerCar(String newPlateNumber){  licensePlate = newPlateNumber; }}",
13,14-classes,,13,code_sample,"package edu.pitt.is17.classes;public class Guitar { String brand; int numOfStrings; double weight; String color; String bodyType; InstrumentString string1 = new InstrumentString(); InstrumentString string2 = new InstrumentString(); InstrumentString string3 = new InstrumentString(); InstrumentString string4 = new InstrumentString(); // This method returns sound void playChord(String chordName){   }  // This method returns sound void playSingleNote(String noteName){   }}",
13,14-classes,,13,code_sample,"package edu.pitt.is17.classes;public class HomeworkHint { public static void main(String[] args) {  String text = ""My name is Dmitriy"";  for(int i = 0; i<text.length(); i++){   char tempChar = text.charAt(i);   int tempCharVal = (int) tempChar;   int newCharVal = tempCharVal + 4;   char newChar = (char) newCharVal;      System.out.print(tempChar + "" = "" + tempCharVal);   System.out.print("" : "" + newCharVal + "" = "" + newChar);   System.out.println();  } }}",
13,14-classes,,13,code_sample,"package edu.pitt.is17.classes;public class InstrumentString { double thickness; String note; String material; }",
13,14-classes,,13,code_sample,"public class Dice {    private int sides;        public Dice(){        sides = 6;    }        public int roll(int times){        int score =        (int)Math.round(sides*Math.random() + 1);        return score;    }}",
13,14-classes,,13,code_sample,"package edu.pitt.is17.restaurant;public class Restaurant { private String name; private DiningTable table1; private DiningTable table2; private DiningTable table3; private double totalSales;  public static final double UNIQUE_DISH_PRICE = 13.5;  public void prepareTables(){  totalSales = 0.0;  table1 = new DiningTable();  table1.setNumber(1);  table1.setSeats(4);  table2 = new DiningTable();  table2.setNumber(2);  table2.setSeats(2);  table3 = new DiningTable();  table3.setNumber(3);  table3.setSeats(6); }  public void assignTable(int groupSize){  if(table1.isAvailable() && table1.getSeats() >= groupSize){   table1.assign(groupSize);  }else if(table2.isAvailable() && table2.getSeats() >= groupSize){   table2.assign(groupSize);  }else if(table3.isAvailable() && table3.getSeats() >= groupSize){   table3.assign(groupSize);  }else {   System.out.println(""Sorry, we don't have any table available!"");  } } public void billAndReleaseTable(int tableNumber){  double bill = 0;  if(tableNumber == 1) bill = table1.billAndRelease();  if(tableNumber == 2) bill = table2.billAndRelease();  if(tableNumber == 3) bill = table3.billAndRelease();  totalSales += bill;  System.out.println(""Table ""+tableNumber+"" billed ""+bill); } public String getName() {  return name; } public void setName(String name) {  this.name = name; } public double getTotalSales() {  return totalSales; }  }",
13,14-classes,,13,code_sample,"package edu.pitt.is17.classes;public class TallyCounter { private int counter = 0;  public void increment(int incrementBy){  counter = counter + incrementBy; }  public int getCounter(){  return counter; }}",
13,14-classes,,13,code_sample,"package edu.pitt.is17.classes;public class Tester { public static void main(String[] args) {  TallyCounter tc = new TallyCounter();  System.out.println(tc.getCounter());  for(int i = 1; i<=10; i++){   tc.increment(5);  }  System.out.println(tc.getCounter());    /*  Car myCar1 = new Car();  myCar1.brand = ""Ford"";  myCar1.color = ""red"";  myCar1.registerCar(""XYZ123"");  myCar1.mileage = 203324;    Car myCar2 = new Car();  myCar2.brand = ""Toyota"";  myCar2.color = ""green"";  myCar2.registerCar(""ABC123"");  myCar2.mileage = 20;    System.out.println(myCar1.brand);  System.out.println(myCar2.brand);  */   }}",
14,15-arrays,,14,code_sample,"package edu.pitt.is17.arrays;import java.util.ArrayList;public class ArrayProcessor { public double findMin(ArrayList<Double> values){  double min = values.get(0);  for(double val : values){   if(val < min){    min = val;   }  }  return min; }  public double findMax(ArrayList<Double> values){  double max = values.get(0);  for(double val : values){   if(val > max){    max = val;   }  }  return max; }  public double[] findExtremes(ArrayList<Double> values){  double min = findMin(values);  double max = findMax(values);  double[] extremes = new double[2];  extremes[0] = min;  extremes[1] = max;  return extremes; }  public void printArray(ArrayList<Double> values){  for(double val : values){   System.out.println(val);  } }}",
14,15-arrays,,14,code_sample,"package edu.pitt.is17.arrays;public class BasicArrays { public static void main(String[] args){  /*   *  10 chars   5 integers   10 boolean   25 float   */    /*  char[] arr1 = new char[10];  System.out.println(arr1[0]);   int[] arr2 = new int[5];  System.out.println(arr2[0]);  boolean[] arr3 = new boolean[10];  System.out.println(arr3[0]);  float[] arr4 = new float[25];  System.out.println(arr4[0]);    double[] values = { 32, 54, 67.5, 29, 44.5, 100, 65 };     double [] vals = new double[7];  vals[0] = 32;  vals[1] = 54;    char[] gender = {'m', 'f'};  int[] months = {1,2,3,4,5,6,7,8,9,10,11,12};  System.out.println(months[13]);    */  /*  char[] letters = {'a','e','i','o','x'};      String text = ""Something"";  int l1 = text.length();    int l2 = letters.length;  */    int[] scores = { 10, 9, 7, 10, 5, 20, 74, 12,32, 453, 342};  int sum = addScores(scores);  double avg = sum/scores.length;  System.out.println(""SUM: "" + sum);  System.out.println(""AVG: "" + avg); }  public static int addScores(int[] values){  int totalScore = 0;  for (int i = 0; i < values.length; i++){      totalScore = totalScore + values[i];  }    int[] ra = reverseArray(values);  return totalScore; }  public static int[] reverseArray(int[] values){  int[] ra = new int[values.length];  for(int i = values.length-1; i>=0;i--){   ra[i - (values.length - 1)] = values[i];   // System.out.print((i - values.length - 1) + "": "" + ra[values.length - i] + "", "");  }  return ra; }}",
14,15-arrays,,14,code_sample,"package edu.pitt.is17.arrays;import java.util.ArrayList;public class EnhancedForLoop { public static void main(String[] args) {  double[] list = {3,34,543,646,75,234,6};  ArrayList<Double> list1 = new ArrayList<Double>();  list1.add(Double.valueOf(20));  list1.add(Double.valueOf(24));  list1.add(Double.valueOf(253));  list1.add(Double.valueOf(223));    ArrayProcessor ap = new ArrayProcessor();  double min = ap.findMin(list1);  System.out.println(min);    /*  for(int i = 0; i<list.length; i++){   double elem = list[i];   // System.out.println(elem);  }    String[] cars = {""Ford"", ""Toyota"", ""Chevy"", ""Honda""};  for(String car : cars){   System.out.println(car);  }  */     }}",
14,15-arrays,,14,code_sample,"package edu.pitt.is17.lec02;public class Strings2 {        public static void main(String[] args) {        double[] values = new double[10];                int[] numbers = new int[15];                String[] names = new String[5];        int[] numbers = {0,  1,  1,  2,  3,  5,  8,  13,  21};        int firstElement = numbers[0];        int fifthElement = numbers[4];        int[] scores = { 10, 9, 7, 10, 5, 20, 74 };        for(int i = 0; i < scores.length; i++){            System.out.println(scores[i]);        }        double[] values = { 23, 43, 67, 6.3, 56 };        double total = 0;        for (double element : values) {            total = total + element;        }    }    }",
15,16-two-dimensional-arrays,,15,code_sample,"package f16_recitation7;public class ProblemX { public static void main(String[] args) {  String[] suit = { ""Clubs"", ""Diamonds"", ""Hearts"", ""Spades"" };   String[] rank = { ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""Jack"", ""Queen"", ""King"", ""Ace""};    // the idea here is to do a two-dimensional array with all the cards  // by doing all combinations of suits and ranks.   String[][] cards = fillDeck(suit,rank);  // print out the two-dim array using nested loops  for(String[] s : cards){   for(String c : s){    System.out.print(c+""\t"");   }   System.out.println();  } }  public static String[][] fillDeck(String[] suit, String[] rank){  String[][] cards = new String[suit.length][rank.length];    for(int i = 0; i<rank.length; i++){   for(int j = 0; j<suit.length; j++){    cards[j][i] = rank[i] + "" of "" + suit[j];   }  }    return cards; }}",
15,16-two-dimensional-arrays,,15,code_sample,"package f16_recitation7;public class TwoDimensionalArray { public static void main(String[] args) {    int[][] matrix = new int[3][3];  int[][] matrix = {{1,2,4},{1,1,4},{7,5,7}}; }}",
16,17-arraylist,,16,code_sample,"package edu.pitt.is17.arrays;import java.util.ArrayList;public class ArrayProcessor { public double findMin(ArrayList<Double> values){  double min = values.get(0);  for(double val : values){   if(val < min){    min = val;   }  }  return min; }  public double findMax(ArrayList<Double> values){  double max = values.get(0);  for(double val : values){   if(val > max){    max = val;   }  }  return max; }  public double[] findExtremes(ArrayList<Double> values){  double min = findMin(values);  double max = findMax(values);  double[] extremes = new double[2];  extremes[0] = min;  extremes[1] = max;  return extremes; }  public void printArray(ArrayList<Double> values){  for(double val : values){   System.out.println(val);  } }}",
16,17-arraylist,,16,code_sample,"package edu.pitt.is17.arrays;import java.util.ArrayList;public class EnhancedForLoop { public static void main(String[] args) {  double[] list = {3,34,543,646,75,234,6};  ArrayList<Double> list1 = new ArrayList<Double>();  list1.add(Double.valueOf(20));  list1.add(Double.valueOf(24));  list1.add(Double.valueOf(253));  list1.add(Double.valueOf(223));    ArrayProcessor ap = new ArrayProcessor();  double min = ap.findMin(list1);  System.out.println(min);    /*  for(int i = 0; i<list.length; i++){   double elem = list[i];   // System.out.println(elem);  }    String[] cars = {""Ford"", ""Toyota"", ""Chevy"", ""Honda""};  for(String car : cars){   System.out.println(car);  }  */     }}",
17,18-inheritance,,17,code_sample,"package f16_lecture_9;class Car {    public void m1() {        System.out.println(""car 1"");    }    public void m2() {        System.out.println(""car 2"");    }    public String toString() {        return ""vroom"";    }}class Truck extends Car {    public void m1() {        System.out.println(""truck 1"");    }}public class Inheritance1{      public static void main(String[] args)     {        Truck mycar = new Truck();        System.out.println(mycar);            mycar.m1();                           mycar.m2();    }}",
17,18-inheritance,,17,code_sample,"package f16_lecture_9;class Car {        public void m1() {        System.out.println(""car 1"");    }        public void m2() {        System.out.println(""car 2"");    }        public String toString() {        return ""vroom"";    }}class Truck extends Car {        public void m1() {        System.out.println(""truck 1"");    }        public void m2() {        super.m1();    }        public String toString() {        return super.toString()        + super.toString();    }}public class Inheritance2 {    public static void main(String[] args) {        Truck mycar = new Truck();        System.out.println(mycar);        mycar.m1();        mycar.m2();    }}",
17,18-inheritance,,17,code_sample,"package f16_lecture_9;public abstract class Person{    private String name;        public Person(String name){        this.name = name;    }        public void setName(String name){        this.name = name;    }    public String getName(){        return this.name;    }        public void introduceMyself(){        System.out.println(""Hello, my name is ""+getName());    }        public String toString(){        return getName();    }}public class Employee extends Person {    private double salary;        public Employee(String name){        super(name);        salary = 1000.0;    }        public double getSalary() {        return salary;    }        public void setSalary(double salary) {        this.salary = salary;    }        public void introduceMyself(){        super.introduceMyself();        System.out.println("" and I am employee"");    }    }public class Student extends Person {    private double grade;        public Student(String name){        super(name);        grade = 0;    }        public void setGrade(double grade){        this.grade = grade;    }    public double getGrade(){        return this.grade;    }        public void introduceMyself(){        super.introduceMyself(); // still the original method may be called using super        System.out.println("" and I am a student"");    }        public String toString(){        return ""Student:""+super.toString();    }}public class InheritanceTest { public static void main(String[] args) {  Person[] people = new Person[3];  people[0] = new Student(""John"");  people[1] = new Student(""Ana"");  people[2] = new Employee(""Rose"");  introduceAllPeople(people);   }  public static void introduceAllPeople(Person[] ps){  for(Person p : ps){   p.introduceMyself();  } }}",
17,18-inheritance,,17,code_sample,"package f16_lecture_9;public class Person{    private String name;        public void setName(String name){        this.name = name;    }    public String getName(){        return this.name;    }}public class Student extends Person{    private double grade;        public void setGrade(double grade){        this.grade = grade;    }    public double getGrade(){        return this.grade;    }}public class StudentTest{    public static void main(String args[]){        Student me = new Student();        me.setName(""Julio"");        me.setGrade(0.0);    }}public class Person{    private String name;        public Person(String name){        this name = name;    }        public void setName(String name){        this.name = name;    }    public String getName(){        return this.name;    }}public class Student extends Person{    private double grade;        public Student(){        super(""Joe"");        grade = 0.0;    }    public Student(String name){        super(name);        grade = 0.0;    }    public void setGrade(double grade){        this.grade = grade;    }    public double getGrade(){        return this.grade;    }}public class StudentTest{    public static void main(String args[]){        Student me = new Student();        Student me = new Student(""Eric"");        me.setName(""Julio"");        me.setGrade(0.0);    }}abstract class Account{    public Account(long acctNumber, double initBalance)    {            this.accountNumber = acctNumber;        this.balance = initBalance;    }}final class Account{    public Account(long acctNumber, double initBalance)    {        this.accountNumber = acctNumber;        this.balance = initBalance;    }}public class CheckingAccount extends Account {    public CheckingAccount(long acctNumber, double initBalance, double overdraftPenalty){        super(acctNumber, initBalance);        this.overdraftPenalty = overdraftPenalty;    }}public class Rectangle {    private double width;    private double height;        public Rectangle(double width, double height){        this.width = width;        this.height = height;    }        public double area(){        return width*height;    }        public double perimeter(){        return 2*width + 2*height;    }}public class Person{    private String name;    protected String name;    public Person(String name){        this name = name;    }        public void setName(String name){        this.name = name;    }    public String getName(){        return this.name;    }}public class Student extends Person{    private double grade;        public Student(String name){        super(name);        grade = 0.0;    }        public void rename(){        XXX name = ""the wonderful "" + name;    }        public void setGrade(double grade){        this.grade = grade;    }    public double getGrade(){        return this.grade;    }}public class Student extends Person{    private double grade;        public Student(String name){        super(name);        grade = 0.0;    }        public void rename(){        setName(""the wonderful "" + getName());    }        public void setGrade(double grade){        this.grade = grade;    }    public double getGrade(){        return this.grade;    }    public String toString(){        return name;    }}public abstract class Person{    private String name;        public Person(String name){        this name = name;    }        public void setName(String name){        this.name = name;    }    public String getName(){        return this.name;    }        public abstract void introduceMyself();}",
17,18-inheritance,,17,code_sample,"package f16_lecture_9;public class Rectangle {    private double width;    private double height;        public Rectangle(double width, double height){        this.width = width;        this.height = height;    }        public double area(){        return width*height;    }            public double perimeter(){        return 2*width + 2*height;    }}public class Square extends Rectangle{ /*  * Since the superclass (Rectangle) has a constructor rceiving 2 double values,  * the subclass Square MUST call the constructor of the super class passing 2 doubles.   * Constructor of the superclass is accessed with the reference super.  */ public Square(double side){  super(side,side); }}",
17,18-inheritance,,17,code_sample,"package f16_lecture_9;public abstract class Person{    private String name;        public Person(String name){        this.name = name;    }        public void setName(String name){        this.name = name;    }    public String getName(){        return this.name;    }        public void introduceMyself(){        System.out.println(""Hello, my name is ""+getName());    }        public String toString(){        return getName();    }}public class Student extends Person {    private double grade;        public Student(String name){        super(name);        grade = 0;    }        public void setGrade(double grade){        this.grade = grade;    }    public double getGrade(){        return this.grade;    }        public void introduceMyself(){        super.introduceMyself(); // still the original method may be called using super        System.out.println("" and I am a student"");    }        public String toString(){        return ""Student:""+super.toString();    }}public class StudentTest { public static void main(String[] args) {  Student s = new Student(""Julio"");  s.setGrade(100);  s.introduceMyself();   }}",
17,18-inheritance,,17,code_sample,"package f16_lecture_9;public abstract class Person{    private String name;        public Person(String name){        this.name = name;    }        public void setName(String name){        this.name = name;    }    public String getName(){        return this.name;    }        public void introduceMyself(){        System.out.println(""Hello, my name is ""+getName());    }        public String toString(){        return getName();    }}public class Student extends Person {    private double grade;        public Student(String name){        super(name);        grade = 0;    }        public void setGrade(double grade){        this.grade = grade;    }    public double getGrade(){        return this.grade;    }        public void introduceMyself(){        super.introduceMyself(); // still the original method may be called using super        System.out.println("" and I am a student"");    }        public String toString(){        return ""Student:""+super.toString();    }}public class ToStringExample { public static void main(String[] args) {  Person s = new Student(""Julio"");  // Printing an object automatically calls the method toString on it   // and we have overridden the method in Student class, making it to   // print Student:name  System.out.println(s); }}",
18,19-interfaces,,18,code_sample,"package edu.pitt.is17.polymorphism;public class BankTester { public static void main(String[] args) {        IAccount account;        account = new CheckingAccount(1000);  account.withdraw(20);  account.deposit(50);    account = new SavingsAccount(2000);  account.withdraw(500);  account.deposit(30); }}",
18,19-interfaces,,18,code_sample,"package edu.pitt.is17.polymorphism;public class BankTester { public static void main(String[] args) {        IAccount account;        account = new CheckingAccount(1000);  account.withdraw(20);  account.deposit(50);    account = new SavingsAccount(2000);  account.withdraw(500);  account.deposit(30); }}",