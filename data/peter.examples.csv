1,"# Calculation Exampleprint(""Let's calculate!"")print(""1234 + 4321 = "", 1234 + 4321)print(""2 * 3.1415 = "", 2 * 3.1415)print(""5 / 2 = "", 5 / 2) print(""5 // 2 = "", 5 // 2)    print(""5 % 2 = "", 5 % 2)",calculate.py,1
1,"# Temperature Converterprint(""100 Fahrenheit ="", (5.0 / 9.0 ) * (100 - 32), ""Celsius"") ",converter.py,1
1,"# Example: Printing primitive data with printprint(""Hello, World!"")print(""Here are integers:"", 10, 99)print(""Here are floats: "", 3.1415, 0.001)print(""Here are strings: "", ""IS12"", ""hello!"")",printing.py,1
1,"def main(): # get data  dollars_for_euro = 1.2 commission = 3 euro = 100# calculate USD dollars = euro * dollars_for_euro - commission # print result  print(""For"", euro, ""you will get"", dollars, ""dollars"")",exchangekiosk.py,1
1,"# This is our first program!def main(): print(""Hello World!"")",mainhello.py,1
1,"def main(count): half_count = count // 2 print(count, half_count)",mainvariables.py,1
1,"count = 44; half_count = count // 2print(count, half_count) count = 99print(count, half_count) half_count = count / 2print(count, half_count) count = count + 100print(count, half_count)count = ""100""half_count = ""count""print(count, half_count)",variables.py,1
1,"# This program prints absolute difference (distance) of its parametersdef main(x,y): if x - y > 0:  print(""The distance is"", x - y) else:  print(""The distance is"", y - x)",abs-if-else.py,2
1,"# This program prints the max of its parametersdef main(x,y): if x > y:  print(x, ""is the maximum"") else:  print(y, ""is the maximum"")",max-if-else.py,2
1,"#prints max of two floating point numbersdef main(): # get data  a = float(input(""First number?"")) b = float(input(""Second number?""))# let's assume that a is larger max = a# but if it is not, we need to reset max to b if b > max:  max = b # print result  print(max, ""is the maximum"")",max-if-input.py,2
1,"# This program prints the max of its parametersdef main(x,y,z): if x > y:  if x > z:   print(x, ""is the maximum"")  else:   print(z, ""is the maximum"") else:  if y > z:   print(y, ""is the maximum"")  else:   print(z, ""is the maximum"")",max3-nested.py,2
1,"# makes decision about your BSIS admissiondef main(general_req, is_req):# read data  gen_qpa = float(input(""Your general QPA?: "")) is_qpi = float(input(""Your IS QPA?: "")) # make decision if gen_qpa < general_req or is_qpi < is_req:  print(""Your QPA is too low for BSIS!"") else: # here gen_qpa >= general_req and is_qpi >= is_req   print(""Congratulations! You are admitted to BSIS program!"")",qpa-and.py,2
1,"# makes decision about your BSIS admissiondef main(general_req, is_req):# read data  gen_qpa = float(input(""Your general QPA?: "")) is_qpi = float(input(""Your IS QPA?: "")) # make decision if gen_qpa < general_req :  print(""Your general QPA is too low for BSIS!"") elif is_qpi < is_req :   print(""Your Information Science QPA is too low for BSIS!"") else: # here gen_qpa >= general_req and is_qpi < is_req   print(""Congratulations! You are admitted to BSIS program!"")",qpa.py,2
1,"# calculates interest and new capital for variable rate with two thresholdsdef main(rate1, threshold1, rate2, threshold2, rate3):# get data  capital = float(input(""Enter your capital: ""))# calculate and print the rate for the capital# checking in which interval the rate is top-down if capital >= threshold2:  interest_rate = rate3 elif capital >= threshold1:  interest_rate = rate2   else:  interest_rate = rate1   print(""Rate for"", capital, ""is"", interest_rate, ""%"")# calculate and print the interest and new capital annual_interest = capital * interest_rate / 100; print(""Interest is $"", annual_interest) print(""New capital is $"", capital + annual_interest)",variable-rate-elif-down.py,2
1,"# calculates interest and new capital for variable rate with two thresholdsdef main(rate1, threshold1, rate2, threshold2, rate3):# get data  capital = float(input(""Enter your capital: ""))# calculate and print the rate for the capital# checking in which interval the rate is bottom-up if capital < threshold1:  interest_rate = rate1 elif capital < threshold2:  interest_rate = rate2   else:  interest_rate = rate3   print(""Rate for"", capital, ""is"", interest_rate, ""%"")# calculate and print the interest and new capital annual_interest = capital * interest_rate / 100; print(""Interest is $"", annual_interest) print(""New capital is $"", capital + annual_interest)",variable-rate-elif-up.py,2
1,"def main(rate1, threshold, rate2):# get data  capital = float(input(""Enter your capital: ""))# calculate and print the rate for the capital if capital < threshold:  interest_rate = rate1 else:  interest_rate = rate2   print(""Rate for"", capital, ""is"", interest_rate, ""%"")# calculate and print the interest and new capital annual_interest = capital * interest_rate / 100; print(""Interest is $"", annual_interest) print(""New capital is $"", capital + annual_interest)",variable-rate.py,2
1,"# Example: sum and average of the entered sequence# Counter-controlled loopdef main(): count = int(input(""How many numbers: "")) round = 1 sum = 0 while round <= count:  number = float(input("">""))  sum += number  round += 1 if count > 0:  print(""Sum ="", sum, ""Average ="", sum / count) else:  print(""Can't calculate average of"", count, ""numbers"")",average_fixed.py,2
1,"# Example: sum and average of temperature observations# Sentinel-controlled loop, sentinel < 300def main():# initializing print(""Enter temperature observations, -300 to stop"") count = 0 sum = 0.0#  pre-reading first number temp = float(input(""First temperature: "")) while temp > -300.0:  sum += temp  count += 1  temp = float(input(""Next temperature: "")) if count > 0:  print(""Average temperature ="", sum / count) else:  print(""No valid data entered"")",average_sentinel.py,2
1,"# Example: Accumulation of interest over yearsdef main():# get data  capital = float(input(""Startup capital ($$$.cc): "")) interest_rate = float(input(""Interest rate in percents (xx.xx): "")) years = int(input(""How many years? "")) year = 2# calculate and print the interest for each year  while year <= years:  interest = capital * interest_rate / 100;  print(""Earned $"", interest, ""in year"", year)  capital += interest  year += 2 print(""Capital afrer"", years, ""years in bank is $"", capital)",even_interest.py,2
1,"# Example: Table of squares with for#   Course IS0012 #   Author: Peter Brusilovskydef main():# Initialization numbers_to_print = 10# Printing squares in a loop for i in range(1, numbers_to_print + 1):  square = i * i  print(i, ""squared ="", square) print(""Done!"")main()",for_squares.py,2
1,"print(""This int, {0:5} occupies 5 positions"".format(7))print(""This float, {0:0} occupies 10 positions"".format(3.1415926))print(""This float, {0:10.5} has width 10 and precision 5"".format(3.1415926))print(""This float, {0:10.5f} has width 10 and fixed at 5 decimal places"".format(3.1415926))print(""This float, {0:0.5} has minimum width and precision 5"".format(3.1415926))print(""Compare {0} and {0:0.20}"".format(3.1415926))print(""Left justification, five positions =={0:<5}=="".format(""Hi!""))print(""Right justification, five positions =={0:>5}=="".format(""Hi!""))print(""Centered, five positions =={0:^5}=="".format(""Hi!""))",format.py,2
1,"# Example: Accumulation of interest over yearsdef main():# get data  capital = float(input(""Startup capital ($$$.cc): "")) interest_rate = float(input(""Interest rate in percents (xx.xx): "")) years = int(input(""How many years? "")) year = 1# calculate and print the interest for each year  while year <= years:  interest = capital * interest_rate / 100;  print(""Earned $"", interest, ""in year"", year)  capital += interest  year += 1 print(""Capital afrer"", years, ""years in bank is $"", capital)",interest_years.py,2
1,"# A nested loop example. Prints hours and minutes in a daydef main(): for hour in range(24):  for minute in range(60):   print(""{0:2}:{1:2}"".format(hour, minute))main()",nested_loop.py,2
1,"# Printing Pretty Fahrenheit to Celsius conversion tabledef main (): lower = 0 upper = 300 step = 20# Print header print(""+------------+"") print (""| {0:^3} {1:^6} |"".format(""F"", ""C"")) print(""+------------+"")# Print table for fahr in range(lower, upper, step):   celsius = (5.0 / 9.0) * (fahr - 32.0);  print (""| {0:3.0f} {1:6.2f} |"".format(fahr, celsius)) print(""+------------+"") main()",nice_temp_table_for.py,2
1,"# Printing Fahrenheit to Celsius conversion tabledef main (): lower = 0 upper = 300 step = 20  fahr = lower  while fahr < upper:   celsius = (5.0 / 9.0) * (fahr - 32.0);  print (fahr, ""F ="", celsius, ""C"")  fahr += step  main()",temp_table.py,2
1,"# Example: counting to zero#   Course IS0012 #   Author: Peter Brusilovskydef main():# Initialization counter = 10 print(""Start counting..."")# Counting loop  while counter > 0:  print(counter)  counter = counter - 1;# Actions to do when loop is over print(""Fire!"")main()",while_countdown.py,2
1,"# Example: Table of squares#   Course IS0012 #   Author: Peter Brusilovskydef main():# Initialization numbers_to_print = 100 i = 1# Printing squares in a loop while i <= numbers_to_print:  square = i * i  print(i, ""squared ="", square)  i += 1 print(""Done!"")main()",while_squares.py,2
1,"# Function to calculate quotient and remainderdef div_mod(dividend, divisor): rounds = 0   while dividend >= divisor:  dividend -= divisor  rounds += 1 return rounds, dividend# Dividing apples among kidsdef main():# get data  kids = int(input(""How many kids? "")) apples = int(input(""How many apples? "")) apples_for_each, left = div_mod(apples, kids) print(""Each kid got {0} apples."".format(apples_for_each)) print(""{0} apples left."".format(left)) ",div_mod_apples.py,3
1,"#  Exchange kiosk using functiondef convert(euro, dollars_for_euro, commission): return (euro * dollars_for_euro - commission)def main(): euros = 300 dollars = convert(euros, 1.2, 3) print(""For {0} Euro you will get {1} dollars!"".format(euros, dollars)) euros = 10.0 dollars = convert(euros, 1.33, 1.5) print(""For {0} Euro you will get {1} dollars!"".format(euros, dollars))main()",exchange_function.py,3
1,"#  Exchange kiosk with foolproof inputdef pos_input(prompt): number = float(input(prompt)) while number <= 0:  print(""You need to enter a positive number!"")  number = float(input(prompt)) return number def convert(euro, dollars_for_euro, commission): return (euro * dollars_for_euro - commission)def main(): euros = pos_input(""How many Euros to exchange? "") rate = pos_input(""How many dollars per Euro? "") comm = pos_input(""Comission? "") dollars = convert(euros, rate, comm) print(""For {0} Euro you will get {1} dollars!"".format(euros, dollars))main()",foolproofinput.py,3
1,"def happy(): print(""Happy Birthday to you!"") def main(): happy() happy() print(""Happy Birthday, dear John!"") happy() main()",happy_bday_john.py,3
1,"def happy(): print(""Happy Birthday to you!"") def bday(name): happy() happy() print(""Happy Birthday, dear {0}!"".format(name)) happy() def main(): bday(""Mary"") print() bday(""Josh"") print() bday(""Professor Flynn"") main()",happy_bday.py,3
1,"# Dividing apples among kidsdef main():# get data  kids = int(input(""How many kids? "")) apples = int(input(""How many apples? ""))  rounds = 0   while apples >= kids:  apples -= kids  rounds += 1  print(apples, ""apples left after round"", rounds) print(""Each kid got {0} apples."".format(rounds)) print(""{0} apples left."".format(apples))",kids_apples.py,3
1,"# power: raise base to n-th power n >= 0 def power(base, n): p = 1; for i in range(n):  p = p * base return pdef hl(): print(""+----+-------+-------+"")# prints table of powersdef main(): hl() print(""| {0:>2} | {1:>5} | {2:>5} |"".format(""n"", ""2**n"", ""-3**n"")) hl() for i in range(8):  x = power(2, i)  y = power (-3, i)  print(""| {0:2} | {1:5} | {2:5} |"".format(i, x, y)) hl()",power.py,3
1,"# Example: list processing with functionsdef readlist(lis, len): for i in range(len):  lis.append(float(input(""Next item: "")))  def avesumlist(lis): sum = 0 for val in lis:  sum += val return sum / len(lis), sumdef maxminlist(lis): max = min = lis[0] for i in range(1, len(lis)):  if lis[i] > max :   max = lis[i]  if lis[i] < min :   min = lis[i] return max, mindef main(): lis = [] readlist(lis, 10) ave, sum = avesumlist(lis) max, min = maxminlist(lis) print(""average = {0}; sum = {1}"".format(ave, sum)) print(""max = {0}; min = {1}"".format(max, min))",listfunctions.py,4
1,"# Example: collect temperature observations into a list and print it# Sentinel-controlled loop, sentinel < 300def main():# initializing print(""Enter temperature observations, -300 to stop"") templist = []#  pre-reading first number temp = float(input(""First temperature: "")) # filling the list  while temp > -300.0:  templist.append(temp)   temp = float(input(""Next temperature: "")) print(""These are your observation"", templist)",listinput.py,4
1,"# Example: list processing: sum and averagedef main(listlen):# filling the list templist = [] for i in range(listlen):  temp = float(input(""Next temperature: ""))  templist.append(temp) # funding max max = templist[0] for i in range(1, len(templist)):  if templist[i] > max :   max = templist[i] # funding min min = templist[0] for temp in templist:  if temp < min :   min = temp# printing results print(""max ="", max) print(""min ="", min)main(10)",listmaxmin.py,4
1,"# This testfunction just prints and changes its parametersdef testfunction(lis, sca): print(""Start: Scalar = {0}, List = {1}"".format(sca, lis)) sca = 99 for i in range(len(lis)):  lis[i] = 99 print(""End: Scalar = {0}, List = {1}"".format(sca, lis))def main(): tlist = [1, 2, 3, 4, 5, 6, 7] tscal = 1# printing the starting values of actual parameters  print(""Before: Scalar = {0}, List = {1}"".format(tscal, tlist))# calling testfunction  testfunction(tlist, tscal);# printing the values  of actual parameters  after call */ print(""After : Scalar = {0}, List = {1}"".format(tscal, tlist))",listparameter.py,4
1,"# Example: filling and printing a listdef main(): templist = [] listlen = 10# filling the list for i in range(listlen):  temp = float(input(""Next temperature: ""))  templist.append(temp) # printing the list in regular order print(""This is what you entered"") for temp in templist:  print(temp) # printing the list backwards print(""This is your list backwards"") for i in range(len(templist)):  print (templist[len(templist) - 1 - i])main()",listprocess.py,4
1,"# Example: filling lists with 10 squaresdef main(): squarelist = []# filling the list for i in range(10):  squarelist.append(i*i) # printing the list print(""These are your squares"", squarelist) main()",listsquares.py,4
1,"# Example: list processing: sum and averagedef main(listlen):# filling the list templist = [] for i in range(listlen):  temp = float(input(""Next temperature: ""))  templist.append(temp) # summing up sum = 0 for temp in templist:  sum += temp # printing results print(""Sum ="", sum) if len(templist) > 0:  print(""Average temperature ="", sum / len(templist)) else:  print(""list is empty"")main(10)",listsum.py,4
1,"# returns True if s is a palindrome, False otherwisedef is_palindrome(s): bottom = 0; top = len(s) - 1 while bottom < top and s[bottom] == s[top]:  bottom += 1  top -= 1  if(bottom >= top):#  i.e., all comps were OK   return True else:#       i.e., one comp failed    return False# Is the string a palindrome? #  ABBA is a palindrome, BEATLES is not a palindromedef main (): test_string = input (""Enter a string to check! "")  if is_palindrome(test_string):  print (test_string, ""is a palindrome"") else:  print (test_string, ""is not a palindrome"")",palindrome.py,4
1,"# Example: count the number of groups of each size coming to a party# Sentinel-controlled loop, sentinel = 0def main(): print(""Enter number of people in each group, 0 to stop"") print(""Enter 10 if a party has 10 or more people"") nparties = [0] * 10#  pre-reading first number npeople = int(input(""First group: "")) # filling the list  while npeople > 0:  if(npeople < 10):   nparties[npeople - 1] += 1  else:   nparties[9] += 1  npeople = int(input(""Next group: ""))#reporting for i in range(9):  print(""Number of {0:0}s is {1:0}"".format(i + 1, nparties[i])) print(""Number of large groups is {0:0}"".format(nparties[9]))",party_counter.py,4
1,"# Returns a list of positions of the value in the list?   def which_teams (tlist, value): resultlist = [] for i in range (len (tlist)):  if tlist [i] == value:   resultlist.append(i) return resultlist# This function will create a list of teams# Each value indicates number of members in a teamdef make_list (): team_number = int (input (""How many teams in a hackathlon?"")) teamlist = [0] * team_number   for i in range(team_number):  print(""How many members in team"", i)  teamlist[i] = int (input (""? "")) return teamlist# Finding a value in a list - is there a team with specific number of members?def main (): teams = make_list () number = int (input (""Which size of team to search for?"")) res_list = which_teams (teams, number) if len(res_list) > 0:  print (""The following teams have"", number, ""members"", res_list) else:  print (""None of the teams has {0:0} members"".format(number))",team_search_list.py,4
1,"# This function will create a list of teams# Each value indicates number of members in a teamdef make_list (): team_number = int (input (""How many teams in a hackathlon?"")) teamlist = [0] * team_number   for i in range(team_number):  print(""How many members in team"", i)  teamlist[i] = int (input (""? "")) return teamlist# Finding a value in a list - is there a team with specific number of members?def main (): teams = make_list () number = int (input (""Which size of team to search for?"")) if number in teams:  tnum = teams.index(number)  print (""Team number {0:0} has {1:0} members"".format(tnum, number)) else:  print (""None of the teams has {0:0} members"".format(number))",team_search_simple.py,4
1,"# This function will create a list of teams# Each value indicates number of members in a teamdef make_list (): team_number = int (input (""How many teams in a hackathlon?"")) teamlist = [0] * team_number   for i in range(team_number):  print(""How many members in team"", i)  teamlist[i] = int (input (""? "")) return teamlist# Is there value in the list?   def is_team (tlist, value): for i in range (len (tlist)):  if tlist [i] == value:   return True return False# In which position the value is in the list?   def which_team (tlist, value): for i in range (len (tlist)):  if tlist [i] == value:   return i return -1# Finding a value in a list - is there a team with specific number members?def main (): teams = make_list () number = int (input (""Which size of team to search for?"")) if is_team (teams, number):  tnum = which_team(teams, number)  print (""Team number {0:0} has {1:0} members"".format(tnum, number)) else:  print (""None of the teams has {0:0} members"".format(number))",team_search.py,4
1,"# This program simulates a phonebookdef make_phonebook(): print (""Enter names and numbers for phone book."") print (""Enter one name+telephone pair per line,"") print (""separate by the colon."") print (""To stop, enter a blank line."") phonebook = {} pair = input() while len(pair) > 0:  pairlist = pair.split("":"")  name = pairlist[0]  number = pairlist[1]  phonebook[name] = number  pair = input() return phonebookdef check_number(book): name = input(""Name to check? "") if name in book:  print(name, ""'s number is"", book[name]) else:  print(""No phone number for"", name)def main(): phonebook = make_phonebook() for i in range(5):  check_number(phonebook)  main()",phonebook.py,5
1,"# Standard String search not protected from not findingdef main (): mystring = input (""Enter string to search?"") mysym = input (""Enter symbold to search for?"") print(mysym in mystring)   print(mystring.index(mysym))",string_search_bad.py,5
1,"# Standard String search protected from not findingdef main (): mystring = input (""Enter string to search?"") mysym = input (""Enter symbold to search for?"") if mysym in mystring:  print(mystring.index(mysym)) else:  print(mysym + "" not in "" + mystring)",string_search_protected.py,5
1,"# demonstration of string search# Is there symbol in the string?   def in_string (test_string, symbol_string): for s in test_string:  if s == symbol_string:   return True return False# In which position the symbol is in the string?   def index_string (test_string, symbol_string): for i in range (len (test_string)):  if test_string [i] == symbol_string:   return i return -1# Finding a symbol in a list def main (): mystring = input (""Enter string to search?"") mysym = input (""Enter symbold to search for?"") print(in_string(mystring, mysym), index_string(mystring, mysym))",string_search.py,5
1,"# Example: count the number of each symbol occurrences in a string# use a dictionary as a set of countersdef main(): counters = {} mystr = input(""Enter a string "")#   Count symbols for s in mystr:  if s in counters:   counters[s] += 1   else:   counters[s] = 1   #   Print Dictionary print(""Here are sybmold counts for"", mystr) for el in counters:  print(el, counters[el])",SymbolCounterDict.py,5
1,"def main(): fname = input(""Enter File Name: "") try:  symbols = lines = 0  myfile = open(fname, ""r"")  for line in myfile:   lines += 1   line = line.rstrip()   symbols += len(line)  print(""{0} lines, {1} symbols in file {2}"".format(lines, symbols, fname))   myfile.close() except FileNotFoundError:  print(fname, ""File not found"") except IOError:  print(""Problem with the file"", fname)",file_count.py,6
1,"# Printing a filedef main(): try:  myfile = open(""/Users/peterb/calculate.py"", ""r"")  line = myfile.readline()  while line != """":#   print(line)# try this! print(repr(line))    print(line.rstrip())    line = myfile.readline()  myfile.close() except FileNotFoundError:  print(""File not found"") except IOError:  print(""Problem with the file!"")  main()",file_print.py,6
1,"def main(): fname = input(""Enter File Name: "") str = input(""Enter String to Find: "") found = False try:  myfile = open(fname, ""r"")  for line in myfile:   if str in line:    found = True  if found:   print(""Found string"", str, ""in file"", fname)  else:   print(""No string"", str, ""in file"", fname)   myfile.close() except FileNotFoundError:  print(fname, ""File not found"") except IOError:  print(""Problem with the file"", fname)",file_search.py,6
1,"def main(): fname = input(""Enter File Name: "") str = input(""Enter String to Find: "") try:  myfile = open(fname, ""r"")  for line in myfile:   if str in line:    print(line.rstrip())  myfile.close() except FileNotFoundError:  print(fname, ""File not found"") except IOError:  print(""Problem with the file"", fname)",grep.py,6
1,"def main(): fname = input(""Enter File Name: "") max = 0 try:  myfile = open(fname, ""r"")  for line in myfile:   if len(line) > max:    max = len(line)    maxline = repr(line)  print(""Longest line:\n"", maxline)  myfile.close() except FileNotFoundError:  print(fname, ""File not found"") except IOError:  print(""Problem with the file"", fname)",longest_line.py,6
1,"# Converting Pounds to KG with exception handlingdef main (): KGINPOUND = 0.4536 print (""Converting pounds to kilograms."") processed = False while not processed:  try:   entered = input(""Enter the mass in pounds:"")   pounds = int(entered)   kilos = KGINPOUND * pounds   print (""The weight is {:.3f} kg"".format(kilos))   processed = True  except ValueError:   print (""Error: Program processes pounds as integer!"")   print(""Try again!"")main ()",pound2kilos_loop.py,6
1,"# Converting Pounds to KG with exception handlingdef main (): KGINPOUND = 0.4536 print (""Converting pounds to kilograms."") try:  entered = input(""Enter the mass in pounds:"")  pounds = int(entered)  kilos = KGINPOUND * pounds  print (""The weight is {:.3f} kg"".format(kilos)) except ValueError:  print (""Error: Enter pounds as integer!"")main ()",pound2kilos.py,6
1,"def main(): fname = input(""Enter File Name: "") sum, count = 0.0, 0 try:  myfile = open(fname, ""r"")  for line in myfile:   number = float(line.rstrip())   count += 1   sum +=number  myfile.close()  print(""Average:"", sum/count) except FileNotFoundError:  print(fname, ""file not found"") except IOError:  print(""Problem with file:"", fname) except ValueError:  print(""Line is not a number:"", line) except ZeroDivisionError:  print(""No numbers read from"", fname)",summing_file.py,6
1,"try: handle = open(""some"") except OSError: print (""ioerror"")",try.py,6
1,"def main(): print(""This program record your guest list to a file"") fname = input(""Enter File Name: "") print(""Enter guest names, empty line to end"") try:  myfile = open(fname, ""w"")#  pre-reading first name  name = input()   while name != """":   myfile.write(name + ""\n"")   name = input()   myfile.close()  print (""The names are saved to the file"", fname) except FileNotFoundError:  print(fname, ""file not found"") except IOError:  print(""Problem with file:"", fname)",write_file.py,6
1,"class Point: def __init__(self, x, y):  self.x = x  self.y = y   def above(self, pt):  if self.y > pt.y:   return True  else:   return False  def readpoint(): x = float(input(""Enter x:"")) y = float(input(""Enter y:"")) p = Point(x, y) return p   def main(): print(""Enter base point"") base = readpoint() for i in range(5):  print(""Enter point"")  p = readpoint()  if p.above(base):   print(""This point is above base point"")  else:   print(""This point is not above base point"")   ",above_methods.py,7
1,"class Point: def __init__(self, x, y):  self.x = x  self.y = y  def readpoint(): x = float(input(""Enter x:"")) y = float(input(""Enter y:"")) p = Point(x, y) return p def above(pt1, pt2): if pt1.y > pt2.y:  return True else:  return False  def main(): print(""Enter base point"") base = readpoint() for i in range(5):  print(""Enter point"")  p = readpoint()  if above(p, base):   print(""This point is above base point"")  else:   print(""This point is not above base point"")   ",above_or_under.py,7
1,"import mathclass Point: def __init__(self, x, y):  self.x = x  self.y = y   def above(self, pt):  if self.y > pt.y:   return True  else:   return False  def distance(self, p):  return math.sqrt((self.x - p.x)**2 + (self.y - p.y)**2)   def midpoint(self, p):  return Point((self.x + p.x) / 2, (self.y + p.y) / 2)  def readpoint(): x = float(input(""Enter x:"")) y = float(input(""Enter y:"")) p = Point(x, y) return p   def main(): print(""Enter point A"") a = readpoint() print(""Enter point B"") b = readpoint() c = a.midpoint(b)  print(""Distance between A and B"", a.distance(b)) print(""Distance between A and midpoint"", a.distance(c)) print(""Distance between B and midpoint"", b.distance(c))",distance.py,7
1,"# gpa.py#    Program to find student with highest GPAclass Student:    def __init__(self, name, hours, qpoints):        self.name = name        self.hours = float(hours)        self.qpoints = float(qpoints)    def getName(self):        return self.name    def getHours(self):        return self.hours    def getQPoints(self):        return self.qpoints    def gpa(self):        return self.qpoints/self.hoursdef makeStudent(infoStr):    # infoStr is a tab-separated line: name hours qpoints    # returns a corresponding Student object    name, hours, qpoints = infoStr.split(""\t"")    return Student(name, hours, qpoints)def main():    # open the input file for reading    filename = input(""Enter name the grade file: "")    infile = open(filename, 'r')    # set best to the record for the first student in the file    best = makeStudent(infile.readline())    # process subsequent lines of the file    for line in infile:        # turn the line into a student record        s = makeStudent(line)        # if this student is best so far, remember it.        if s.gpa() > best.gpa():            best = s    infile.close()    # print information about the best student    print(""The best student is:"", best.getName())    print(""hours:"", best.getHours())    print(""GPA:"", best.gpa())",gpa.py,7
1,"class Student:    def __init__(self, name, hours, qpoints):        self.name = name        self.hours = hours        self.qpoints = qpoints        def addCourse(self, c_name, c_hours, grade):     self.hours += c_hours     self.qpoints += grade * c_hours     def getName(self):        return self.name    def getHours(self):        return self.hours    def getQPoints(self):        return self.qpoints    def gpa(self):        if self.hours > 0:            return self.qpoints/self.hours        else:            return 0class TA(Student):#   Subclass student adds a dictionary with grades for past courses#   It is important, since a TA should took the class before with A#   __init__ method should be overridden to initialize .grades and .courseTA     def __init__(self, name, hours, qpoints):        self.name = name        self.hours = hours        self.qpoints = qpoints        self.grades = {}        self.courseTA = """"    #   This method should also be overridden to add new course to the dict    def addCourse(self, c_name, c_hours, grade):     self.hours += c_hours     self.qpoints += grade * c_hours     self.grades[c_name] = grade#   This new method checks whether a student can be a TA in general    def canTA(self):        if self.gpa() > 3.5:            return True        else:            return False#   This method appoints a student as a TA if the course has been taken#   before with grade A or better. Returns True if success, False otherwise    def appointTA(self, course):        if course in self.grades and self.grades[course] >= 4 :            self.courseTA = course            return True        else:            return False#   This function ask the user about taken courses and add it to the recorddef addcourses (student): course_number = int (input (""How many courses you took in the past?""))  for i in range(course_number):  number = input (""Next course number: "")  grade = float(input (""Grade for this course: ""))  hours = float(input (""Hours for this course: ""))  student.addCourse(number, hours, grade)#   Main function similates a TA interviewdef main():    print(""This is a TA interview!"")    name = input (""What is your name? "")    candidate = TA(name, 0, 0)    addcourses(candidate)    print(""Thank you, your GPA is"", candidate.gpa())    if candidate.gpa() > 3:        print(""With this GPA, you can be a TA!"")        course = input (""For which course you want to be a TA? "")        if candidate.appointTA(course):             print(""You are appointed a TA for"", course)        else:            print(""You can't be a TA for"", course)    else:        print(""With this GPA, you can't be a TA!"")",assistant.py,7
1,"# Class BankAccountclass BankAccount:        # __init__ Method creates a new bank account. Account number and the     # owner name (strings) are given as parameters.        def __init__(self, number, owner):        self.account_number = number        self.name = owner        self.balance = 0.0            # This method returns a bank account number.           def get_number(self):        return self.account_number               # This method returns the name of the owner account.        def get_owner(self):        return self.name           # The method returns the account balance (decimal).        def get_balance(self):        return self.balance           # This method adds amount given as a parameter (decimal) to the account balance    # if the parameter is positive.        def deposit(self, amount):        if amount > 0.0:            self.balance += amount            # Method withdraws the amount given as parameter from the account balance, if    # amount is positive and not larger than the account balance.    # The method returns the amount withdrawn from the account (0.0 if no withdrawal).                def withdraw(self, amount):        if amount > 0.0 and amount <= self.balance:            self.balance -= amount            return amount        else:            return 0.0            # Method transfers the amount of money given as parameter from the current account    # to to the account (object) provided by the last parameter. If the amount    # is positive and transferable (i.e. not larger than the account balance)    # the transfer is performed and the method returns True.     # If the transfer was not successful, balances do not change and it returns False.        def transfer(self, amount, account):        if self.withdraw(amount) > 0.0:            account.deposit(amount)            return True        else:            return False                # The method returns a string that contains the account number, the owner's    # Name and account balance. This string is returned when you evaluate the object    # for example, it will be printed if you will print an object of this class        def __str__ (self):        str = ""Account {:s}, Owner {:s}, Balance ${:.2f}"".format (                self.account_number, self.name, self.balance)        return str",bankaccount.py,7
1,"# gpa.py#    Program to find student with highest GPAclass Student:    def __init__(self, name, hours, qpoints):        self.name = name        self.hours = hours        self.qpoints = qpoints        def addCourse(self, crn, c_hours, grade):     self.hours += c_hours     self.qpoints += grade * c_hours    def getName(self):        return self.name    def getHours(self):        return self.hours    def getQPoints(self):        return self.qpoints    def gpa(self):        if self.hours > 0:         return self.qpoints/self.hours        else:         return 0def makeStudent(infoStr):    # infoStr is a tab-separated line: name hours qpoints    # returns a corresponding Student object    name, hours, qpoints = infoStr.split(""\t"")    s = Student(name, float(hours), float(qpoints))    return sdef main():    # open the input file for reading    filename = input(""Enter name the grade file: "")    infile = open(filename, 'r')    # set best to the record for the first student in the file    best = makeStudent(infile.readline())    # process subsequent lines of the file    for line in infile:        # turn the line into a student record        s = makeStudent(line)        # if this student is best so far, remember it.        if s.gpa() > best.gpa():            best = s    infile.close()    # print information about the best student    print(""The best student is:"", best.getName())    print(""hours:"", best.getHours())    print(""GPA:"", best.gpa())",gpa_get.py,7
1,"# gpa.py#    Program to find student with highest GPAclass Student:    def __init__(self, name, hours, qpoints):        self.name = name        self.hours = hours        self.qpoints = qpoints        def gpa(self):        if self.hours > 0:         return self.qpoints/self.hours        else:         return 0def makeStudent(infoStr):    # infoStr is a tab-separated line: name hours qpoints    # returns a corresponding Student object    name, hours, qpoints = infoStr.split(""\t"")    s = Student(name, float(hours), float(qpoints))    return sdef main():    # open the input file for reading    filename = input(""Enter name the grade file: "")    infile = open(filename, 'r')    # set best to the record for the first student in the file    best = makeStudent(infile.readline())    # process subsequent lines of the file    for line in infile:        # turn the line into a student record        s = makeStudent(line)        # if this student is best so far, remember it.        if s.gpa() > best.gpa():            best = s    infile.close()    # print information about the best student    print(""The best student is:"", best.name)    print(""hours:"", best.hours)    print(""GPA:"", best.gpa())",gpa.py,7
1,"class Mytest():        def __init__(self):        self.__priv = ""I am private""        self._prot = ""I am protected""        self.pub = ""I am public""            def getPriv(self):     return self.__priv    def getProt(self):     return self._prot         def getPub(self):     return self.pub        def main(): a = Mytest() print(a.getPub()) print(a.getProt()) print(a.getPriv()) print(a.pub) print(a._prot) print(a.__priv)main() ",privatetest.py,7