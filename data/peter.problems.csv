"Writing and executing a simple programPrinting on the screenReading user inputUsing VariablesSimple Arithmetic Calculations","# This program is for temperature transform from Fahrenheit to Celsius.def temperature():    fahrenheit=input(""Give temperature in Fahrenheit: "")    celsius=(float(fahrenheit)-32)/1.8    print(""The temperature you input in Celsius is: "",celsius)# Below is the program for the transforming from Celsius to Fahrenheit.# celsius = input(""Give temperature in Celsius:"")# fahrenheit = 1.8 * float(celsius) + 32# print(fahrenheit)",hw1.1,1
"Writing and executing a simple programPrinting on the screenReading user inputUsing VariablesSimple Arithmetic Calculations","# Program of marathon and cooper test.# The official distance of the marathon is 42195 meters.def marathon():    ma_distance=42195    # define the distance of marathon        ma_hr=input(""Please input the hours of your marathon result: "")    # Ask for entering the hours    # print(ma_hr)    ma_min=input(""Please input the minutes of your marathon result: "" )    # Ask for enterting the minutes    # int(ma_hr) testing    # int(ma_min) testing    # print(ma_min) testing    total_min=int(ma_min)+int(ma_hr)*60    # calculate the total minutes    int(total_min)    # give the variables integer type for coming calculation    # print(total_min)    # print(type(total_min))        ct_times=total_min/12    # calculate the correspondence times of Cooper Test    ct_distance=ma_distance/ct_times    # calculate the correspondence distance of Cooper Test    print(""Your performance of marathon corresponds to running Cooper Test "", ct_times, ""times in a row covering "",ct_distance, ""meters in each."")    ",hw1.2,1
"If statementLoops","def course_grade():    p=int(input(""How many projects the course has? ""))    s=0    for i in range(1,p+1):        score=int(input(""Please enter the project score: ""))        i=i+1        s=s+score    print(""Total points: "",s)    if s<1500:        print(""Grade awarded: F"")    elif s>=1500 and s<3000:        print(""Grade awarded: C"")    elif s>=3000 and s<5000:        print(""Grade awarded: B"")    else:        print(""Grade awarded: A"")course_grade()",hw2.1,2
"If statementWhile loop Sequence processing patternSumming patternPrint formatting","def business_income():    print(""Enter the volume of subscription sold on diffrent days."")    print(""Enter negative value to stop."")    # Instruction in the beginning.    first_sales=int(input(""Enter the first day sale: ""))    # Ask for the value of first days sales which is the judging variable in the first place,    # if this is negative, the program halt directly.    salary=0    # Temp variable for base salary data.    s=0    # Final variable of the total of base salary for all days.    b=0    # Final variable of total bonus.    if first_sales>=0:        salary=40        next_sales=0        # If the first day sales is not negative, then the base salary for the 1st day granted.        while next_sales>=0:            next_sales=int(input(""Enter the next day sale: ""))            if next_sales>20:                bonus=10*(next_sales-20)+5*10            elif next_sales >10 and next_sales<=20:                bonus=5*(next_sales-10)            else:                bonus=0            s=s+salary            b=b+bonus                print(""Your salary is: "",s+b)    else:        print(""Your salary is: "",s+b)business_income()",hw2.2,2
"If statementLoopsRemainder","def s_counting():        start=int(input(""What is the start number? ""))    while start<=0:        print(""Enter a positive start number!"")        start=int(input(""What is the start number? ""))    stop=int(input(""What is the stop number? ""))    while stop<=start:        print(""The final chapter must be greater than the initial figure!"")        stop=int(input(""What is the stop number? ""))    print(""Counting from "",start,"" to "" ,stop)    for i in range(start, stop+1):        if i%3==0 and i%5!=0:            print(""krooh"")        elif i%3!=0 and i%5==0:            print(""bla"")        elif i%3==0 and i%5==0:            print(""krooh-bla"")        else:            print(i)        i=i+1s_counting()",hw3.1,2
"If statementLoopsPrint formattinig","import randomdef main():    line = input (""Enter any integer number as the random seed to start the random generator: "")    seed = int (line)    while seed<=0:        print(""Please enter a positive integer!"")        seed=int(input (""Enter any integer number as the random seed to start the random generator: ""))    random.seed (seed)    guess = random.randint (1, 1000)#    print(guess)    print(""Try to guess my number between 1 and 1000!"")    count=1    ansr=int(input(""Enter your guess: ""))            while ansr!=guess:        while ansr<1 or ansr>1000:            print(""the number should be in the interval 1-1000!"")            ansr=int(input(""Enter your guess: ""))            count=count+1        if ansr<guess:            print(""Grandfather, my number is larger!"")            ansr=int(input(""Enter your guess: ""))        elif ansr>guess:            print(""Grandfather, my number is smaller!"")            ansr=int(input(""Enter your guess: ""))        count=count+1    print(""Congratulations, my number is really "", ansr)    print(""You made "", count, "" guesses."")main()",hw3.2,2
Defining and Calling a Function,"def convert():# Function convert define.    print(""Program to convert money in different currecies to Euro."")    crcy_name=input(""Which currency you want to convert (enter 3-letter code)? "")# The name of the currency which will be converted to EUR.    crcy_value=float(input(""What is the value of one Euro in this currency? ""))# The exchange rate    crcy_amount=float(input(""Enter the amount of USD to be converted: ""))# The amount of the currency    eur_value=crcy_amount/crcy_value    print(crcy_amount,crcy_name,"" is equal to "",float('%.4f'%eur_value),"" EUR."")# control the output format of the result number.def main():    i=1    while i!=0:        convert()        i=int(input(""Do you want to continue (1 = yes / 0 = no)? ""))# Program execution controlling.    print(""Program execution ends. "")main()",hw4.1,3
"Definition and calling of the function.Parameters passing and value returnUsing truth value as return value","def is_prime(number):    flag=0# Define a variable to record the amount of the number that can be divisible by the ""number""    for i in range(1, number+1):        if number%i==0:            flag=flag+1# Record the flag    if flag>2 or number==0 or number==1:        prime=""false""# 0 and 1 cannot be counted as prime numbers, so as those has more than 2 divisible numbers in# range of 1 to themselves.    else:        prime=""true""    #print(prime)    return primedef print_prime(start, end):    for i in range(start, end+1):        if is_prime(i)==""true"":            print(i)def main():    print(""The program prints primes in the desired range."")    a=int(input(""What is the lower limit of the range? ""))    while a<0:        print(""Lower limit may not be negative!"")        a=int(input(""What is the lower limit of the range? ""))    b=int(input(""What is the upper limit? ""))    while b<a:        print(""The upper limit may not be smaller than the lower limit!"")        b=int(input(""What is the upper limit? ""))# All above are to have the range with the error handling.    print(""Prime numbers in range "",a,""-"",b,"":"")    print_prime(a, b)main()",hw4.2,3
"Using listsDefining and Calling a Function","def discount (purchase_price):    #Calculate the amount of discount    if purchase_price<30:        discount_price=purchase_price*0.1    elif purchase_price>=30 and purchase_price<50:        discount_price=purchase_price*0.2    else:        discount_price=purchase_price*0.4    return discount_pricedef main():    print(""Enter the original prices of purchases. Use negative number to stop."")    lis_price=[]    lis_discount=[]    lis_paid=[]    dis_ttl=0    i=float(input(""Enter the price of the first purchase.\n""))    #Assign the value into the list of purchase price and discount amount    while i>=0:        while i==0:            #Exception treatment for the value input of 0            print(""Please enter the price greater than 0."")            i=float(input(""Re-enter the price of the purchase.\n""))        lis_price.append(i)        lis_discount.append(discount(i))        i=float(input(""Enter the price of the next purchase.\n""))            for a in range(len(lis_discount)):        dis_ttl=dis_ttl+lis_discount[a]            print(""   Price Discount    Paid"")        for j in range(len(lis_price)):        #Output the table        print(""{0:>8.2f}"".format(lis_price[j]), ""{0:>8.2f}"".format(lis_discount[j]), ""{0:>8.2f}"".format(lis_price[j]-lis_discount[j]))                                                                      print(""----------------------------------------"")    print(""Total Discount "",dis_ttl)main()                                                                    ",hw5.1,4
"Using listsDefining and Calling a FunctionUsing functions that returns a number of values","import random# The function randomly selects and returns a list with the numbers 1 to 10 randomly# ordered. The function receives random number generator seed as a parameterdef random_list (start):    lis = []    # Create the list with numbers 1-10 in increasing order    for i in range (1, 11):        lis.append (i)        # Mix the numbers in the list DOWNSTREAM# For each element in the list swap it with some element# before it. Elements can be swapped several times.    random.seed (start)    for swap in range(9, 0, -1):        place = random.randint(0, swap)        temp = lis[place]        lis[place] = lis[swap]        lis [swap] = temp    return lisdef get_input():    lis_input=[]    #Create the list which contains the name, number of row and seed for the ramdon order list    name=input(""What is your name? "")    row=int(input(""Which row of multiplication table to drill (1-10)? ""))    #Error treatment for the wrong input of the row number    while row >10 or row<1:        print(""number must be between 1 to 10!"")        row=int(input(""Which row of multiplication table to drill (1-10)? ""))    seed=int(input(""Enter integer number to seed the random generator: ""))    lis_input.append(name)    lis_input.append(row)    lis_input.append(seed)    return lis_inputdef drill_pair (num1, num2):    print(""How much is "", num2, "" * "", num1, ""? "")    result=int(input())    if result==num1*num2:        response=True    else:        response=False    return responsedef drill_row (name, row, num_list):    err=0    #The process of the whole calculation and judgement    for i in range(len(num_list)):        a=drill_pair(row, num_list[i])        if a==True:            print(""Correct! Bravo, "",name,""!"")        else:            while a==False:                print(""Wrong! Try again!"")                err=err+1                a=drill_pair(row, num_list[i])    return err            def main():    print(""Multiplication table drill!"")    init_input=[]    init_input=get_input()    num_list=random_list(init_input[2])    errors=drill_row(init_input[0],init_input[1],num_list)    if errors!=0:        print(""The drill is finished."",'\n',""You gave "",errors,"" wrong answers"")    else:        print(""The drill is finished."",'\n',init_input[0], "", you are a champion! All answers were correct!"")main()",hw5.2,4
"String processing, in particular the use of split methodWorking with lists ","def qpa_calculation():#    course_grade={}  The dictionary for the grade of every course I defined at the first place.#    course_credit={}  The dictionary I difined to store the credit hours of every course.#   All above will be useful when need to do some calculation on the grade and the credits per courses.    course=[]# List to store the grade and credit orderly    info_input=input()     while len(info_input)>0:#  Input the course data one by one. Empty input to stop.        info_list=info_input.split("";"")        name=info_list[0]        grade=float(info_list[1])        credit=int(info_list[2])        grade_credit=[grade,credit]        course.append(grade_credit)#        course_grade[name]=grade#        course_credit[name]=credit#  As mentioned above, valuation for the dictionaries.        info_input=input()    if course!=[]:        a=course[0][0]*course[0][1]        b=course[0][1]        i=1        while i<len(course):        #  The calculation start. The index should begin with 1.            a=a+course[i][0]*course[i][1]            b=b+course[i][1]            i=i+1        result=a/b        print(""Your QPA is %.2f.""%result)    else:        print(""No data entered."")    def main():    print(""The program calculates the QPA of your courses.\nEnter your course data, one course per line in the following format:\ncourse number; grade; credit hours.\nExample: INFSCI0012;4.0;3 \nEnter empty line after all course data entered."")    qpa_calculation()main()                ",hw6.1,5
"Reading from a fileException handling","def brokerage(price):    ##Define a function to calculate the commision    try:        comm=price*0.002        if price>0:            if comm<8:                comm=8        elif price<0:            if comm<-8:                comm=-comm            else:                comm=8        else:            comm=0        return comm    except TypeError:        print("""")def ifnumber(string):    ##Define a function to judge the data read from the file    try:        float(string)        return True    except:        return Falsedef main():    fname=input(""What is the name of the transaction file?\n"")    try:        price=[] #List to save the purchase price        brk=[] #List to save the brokerage        ttl_brk=0 #Total amount of the brokerage        myfile=open(fname, ""r"")        price=myfile.readlines()        for i in range(len(price)):            if ifnumber(price[i]):                temp1=price[i]                temp2=temp1.rstrip()                price[i]=float(temp2)        myfile.close()        #print(price)        print(""purchase price brokerage fee ($$)"")        for j in range(len(price)):            brk.append(brokerage(price[j]))            print(""{0:>11.2f}"".format(price[j]),""{0:>11.2f}"".format(brk[j]))            ttl_brk=ttl_brk+brk[j]        print(""Total brokerage fees "",""${0:0.2f}"".format(ttl_brk))    except FileNotFoundError:        print(""File "", fname, ""can't be opened. The program ends. "")    except ValueError:        print(""The file contains an incorrect number. The program ends. "")    except IOError:        print(""File "", fname, ""can't be opened. The program ends. "")main()",hw7.1,6
"Reading information from a fileProcessing exceptionsProcessing strings","def main():    fname=input(""Enter the name of the file with your account statement: \n"")    pname=input(""Enter the payee to check:\n"")    name=[] #List to store the names of payees    amount=[] #List to store the amount of the relevant payment    sum_amnt=0 #Sum of the payment on the specific payee.    try:        myfile=open(fname, ""r"")        data=myfile.readlines() #Read the lines of the file and save them into a list.        for i in range(len(data)):            data[i]=data[i].split(""\t"") # Split the elements of the list above and then save them back to the original one, except the elements are all lists.        del data[0] #Delete the title        del data[0] #Delete the item names        for j in range(len(data)): # Assign the data to the lists of name and amount.            name.append(data[j][4])            amount.append(data[j][3])        for a in range(len(name)): # Find and do the sum up based on the input name.            if pname==name[a] and float(amount[a])<0: # Filter the deposit data.                sum_amnt=sum_amnt+float(amount[a])        myfile.close()        if sum_amnt<0: # Make the number positive when output.            sum_amnt=0-sum_amnt        print(""Total payments to"",pname,""in this statement: %.2f""%sum_amnt,"" eur."")    except FileNotFoundError:        print(""Error reading file"", fname, ""."")main()",hw8.1,6
"Object CreationMethods Calls","# Class BankAccountclass BankAccount:        # __init__ Method creates a new bank account. Account number and the     # owner name (strings) are given as parameters.        def __init__(self, number, owner):        self.account_number = number        self.name = owner        self.balance = 0.0            # This method returns a bank account number.           def get_number(self):        return self.account_number               # This method returns the name of the owner account.        def get_owner(self):        return self.name            # The method returns the account balance (decimal).        def get_balance(self):        return self.balance            # This method adds amount given as a parameter (decimal) to the account balance    # if the parameter is positive.        def deposit(self, amount):        if amount > 0.0:            self.balance += amount            # Method withdraws the amount given as parameter from the account balance, if    # amount is positive and not larger than the account balance.    # The method returns the amount withdrawn from the account (0.0 if no withdrawal).                def withdraw(self, amount):        if amount > 0.0 and amount <= self.balance:            self.balance -= amount            return amount        else:            return 0.0            # Method transfers the amount of money given as parameter from the current account    # to to the account (object) provided by the last parameter. If the amount    # is positive and transferable (i.e. not larger than the account balance)    # the transfer is performed and the method returns True.     # If the transfer was not successful, balances do not change and it returns False.        def transfer(self, amount, account):        if self.withdraw(amount) > 0.0:            account.deposit(amount)            return True        else:            return False                # The method returns a string that contains the account number, the owner's    # Name and account balance. This string is returned when you evaluate the object    # for example, it will be printed if you will print an object of this class        def __str__ (self):        str = ""Account {:s}, Owner {:s}, Balance ${:.2f}"".format (                self.account_number, self.name, self.balance)        return str        def main():    acc_1=BankAccount(""5577"",""Jonh Doe"")    acc_1.deposit(429.4)    acc_1_bal=""$""+str(acc_1.get_balance())    acc_1_witd=""$""+str(acc_1.withdraw(180.0))    print(""Account 1 balance is"",acc_1_bal)    print(acc_1_witd,""withdrawn from account 1"")    num2=input(""Enter account number:\n"")    name2=input(""Enter account owner's name: \n"")    acc_2=BankAccount(num2,name2)    amnt_2=float(input(""How many dollars to deposit to the account 2?\n""))    acc_2.deposit(amnt_2)    bal_2=acc_2.get_balance()    print(""Account 2 balance is $%.2f""%bal_2)    print(""Account details:\n"",acc_1,""\n"",acc_2)    trans_amnt=float(input(""How many dollars to  transferred from account 2 to account 1? \n""))    if acc_2.transfer(trans_amnt, acc_1):        print(""Transfer successfully!"")    else:        print(""Transfer failed."")    print(""Account details after transfer:\n"",acc_1,""\n"",acc_2)main()",hw8.2,7