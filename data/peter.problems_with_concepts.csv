"Writing and executing a simple program
Printing on the screen
Reading user input
Using Variables
Simple Arithmetic Calculations","def main():
    # following requests temperature in Farenheit
    farenheit = float(input(""Temperature in degrees Fahrenheit: ""))


    # following converts to celsius
    celsius = ((farenheit - 32) / 9) * 5

    # following prints the entered Farenheit and the equivalent Celsius
    print(farenheit, ""Fahrenheit is the same as"", celsius, ""Celsius"")

    # following was included to help in test the python script during writing
main()
    ",hw1.1,1,"Mult:1,Call:3,Int:1,Div:1,Assign:2,Str:2,FunctionDef:1,Sub:1"
"Writing and executing a simple program
Printing on the screen
Reading user input
Using Variables
Simple Arithmetic Calculations","
def main():
    marathon_distance = 42194.988
    minutes_per_hour = 60
    cooper_test_minutes = 12
    #following requests number of hours it took the user to run the marathon 
    hours = float(input(""Enter hours of your marathon result: ""))
    #following requests number of minutes it took the user to run the marathon 
    minutes = float(input(""Enter minutes of your marathon result: ""))

    number_of_cooper_tests = ((hours * minutes_per_hour) / cooper_test_minutes) + (minutes / cooper_test_minutes)
    distance_each_cooper_test = marathon_distance / number_of_cooper_tests

    print(""Your marathon time corresponds to running Cooper test"", number_of_cooper_tests, ""times in a row covering"", distance_each_cooper_test, ""meters in each Cooper test"" )

#following was included to help in test the python script during writing    
main()",hw1.2,1,"Mult:1,Int:2,Float:1,Div:2,Assign:7,Str:3,FunctionDef:1,Call:4,Add:1"
"If statement
Loops","__author__ = 'Vincent Lee'
# This program that calculates course grade based on project scores.
# It asks the user to enter the number of projects
# The program then requests and reads the score for each project.
# Finally, the program prints the total score and grade.

# The program assume the information entered by the user is appropriate, and does not check whether the information is valid

def main():
    #asks user to enter number of projects assigned in the course, and also initializes total points scored
    project_count = int(input(""How many projects were assigned in the course? ""))
    total_score = 0

    #peforms a for loop a number of times entered by the user
    # each iterations asks the user to enter the score of the project, and tabulates the scores
    for i in range(0, project_count):
        score = int(input(""Enter the next project score: ""))
        total_score += score

    # if-else statement to check the grade awarded based on total score earned
    if total_score < 1500:
        grade = 'F'
    elif total_score >= 5000:
        grade = 'A'
    elif total_score >= 3000:
        grade = 'B'
    else:
        grade = 'C'

    # prints out the total score and awarded grade
    print(""Total points: "",total_score)
    print(""Grade awarded: "", grade)

main()
",hw2.1,2,"Lt:1,Int:5,If:3,AugAssign:1,Assign:8,Str:9,FunctionDef:1,GtE:2,For:1,Call:6,Add:1"
"If statement
While loop 
Sequence processing pattern
Summing pattern
Print formatting","__author__ = 'Vincent Lee'
#
# This program calculates the slary based on graded sales figures scale
# The program asks to enter the volume of subscriptions sold day by day for a number of consecutive days and then calculate the total salary for these days.
# The program should allows the user to stop entering data and calculate salary anytime by advising the user to enter negative number to stop and calculate the salary
# The program assume that the user provides their sales volumes in different days as integers and that the numbers provided by the user are reasonable.

# $5 bonus for each subscription over 10 and up to 20
# $7 bonus for each subscription over 20

#please note: the first example on course web with sales of 10, 15, 8, and 22 is giving the wrong salary ($255), it seems to be giving $10 bonus for subscriptions above 20

def main():
# Initialization
    print(""Enter the volume of subscriptions sold on different days:"")
    print(""Enter negative value to stop."")
    number_sales = int(input(""Enter the first day sales:""))
    salary = 0
    base_salary = 40

#while number of slaes are not negative
    while(number_sales >= 0):

        # calculates the conditional sales and salary
        if number_sales <= 10:
            salary = salary + base_salary
        elif number_sales > 20:
            salary = salary + base_salary + (10*5) + ((number_sales - 20)*7)
        else:
            salary = salary + base_salary + ((number_sales - 10)*5)

        number_sales = int(input(""Enter the next day sales:"")) #asks for another day sales input

    print(""Your salary is ${:<}."".format(salary)) #format so the salary value is next to the dollar sign without spaces

main()
",hw2.2,2,"Call:6,Add:3,Gt:1,Assign:8,Str:6,FunctionDef:1,While:1,Mult:2,LtE:1,Int:7,Attribute:1,GtE:1,If:2,Sub:2"
"If statement
Loops
Remainder","__author__ = 'Vincent Lee'

#The following is a number retriever, it can be used to retrieve both start number and stop number.
#If check_number, entered by the parent function that calls ask_number is '0' it assumes its asking for
#a start number.  Else it assumes the start number would be a positive integer since the start number would be retrieved
#by the previous ""ask_number"" function
def ask_number(check_num):
    if check_num == 0:
        input_num = int(input(""What is the start number? ""))
        while input_num <= 0:
            input_num = int(input(""Enter a positive integer for start number! ""))
        return input_num

    else:
        input_num = int(input(""What is the stop number?""))
        while input_num <=0 or input_num <= check_num:
            input_num = int (input(""Stop number must be a positive integer greater than both 0 and start number! ""))
        return input_num

#the following function takes a start and stop number and iterate through the numbers, inclusively
#and for each number divisible by 3 and/or 5, prints out an appropriate text
def sleep_counter(start_num,stop_num):

    print (""Counting from"",start_num,""to"",stop_num)
    while start_num <= stop_num:
        if(start_num%3==0 and start_num%5 ==0):
            print(""krooh-bla"")
        elif(start_num%3==0):
            print(""krooh"")
        elif(start_num%5==0):
            print(""bla"")
        else:
            print(start_num)
        start_num += 1


def main():

    start_num = ask_number(0)
    stop_num = ask_number(start_num)

    sleep_counter(start_num, stop_num)

main()


",hw3.1,2,"FunctionDef:3,Call:13,AugAssign:1,Mod:3,Assign:7,Str:9,Or:1,And:1,While:3,arg:2,LtE:3,Int:8,Eq:4,Return:2,If:4,Add:1"
"If statement
Loops
Print formattinig","__author__ = 'Vincent Lee'

#this function requests an integer from user to use as a seed to generate a random number
def get_random():
    import random
    seed = int(input(""Enter integer number as the random seed to start the random number generator: ""))
    random.seed (seed)
    random_number = random.randint (1, 1000)
    print(random_number) #- this was used to make sure which number was generated while the code was being tested
    return random_number

#this function checks whether guessed number and the random number generated by the program are the same, if not it will
#continue to ask the user to keep guessing.  The function also keeps count on the number of guesses
def check_match(guess,random_number):
    guess_counter = 1 #initializes guess counter, and if the first guess is correct, the number of guesses will be one

    while(guess != random_number): #if the guess is not correct repeatedly performs this task
        if(guess <= 0 or guess > 1000): #if the guess is not withing the 1-1000 range keeps asking the user for an int within the range
            guess_counter  += 1
            guess = int(input(""The guess number should be in the interval 1-1000!""))
        elif guess < random_number:
            print(""Grandfather, my number is larger!"")
            guess_counter  += 1
            guess = int(input(""Enter your guess:""))
        elif guess > random_number:
            print(""Grandfather, my number is smaller!"")
            guess_counter  += 1
            guess = int(input(""Enter your guess:""))

    print(""Congratulations, my number is really {:>}."".format(random_number))
    return guess_counter


def main():

    random_number = get_random()
    print(""Try to guess my number between 1 and 1000!"")
    guess = int(input(""Enter your guess:""))
    guess_counter = check_match(guess,random_number)
    print('You made {0} guesses'.format(guess_counter))


main()",hw3.2,2,"Attribute:4,Int:6,Add:3,AugAssign:3,Assign:10,Str:11,Gt:2,alias:1,LtE:1,While:1,arg:1,Import:1,Lt:1,FunctionDef:3,NotEq:1,If:3,Return:2,Or:1,Call:16"
Defining and Calling a Function,"
def currency_converter():
    currency_type = (input(""Which currency would you like to convert (enter 3-letter code)?""))
    exchange_rate = float(input(""What is the value of one Euro in this currency?""))
    print (""Please enter the amount of"", currency_type, ""to be converted"")
    amount = float(input(""""))
    print(""{0:0.2f} {1} is equal to {2:0.2f} EUR"".format(amount, currency_type, amount/exchange_rate))

#Whether to continue conversion rate is implemented in the main function.  A while loop keeps asking user if they
#want to continue, and assumes the user will enter the correct values
def main():
    want_continue = 1
    print(""Program to convert money in different currecies to Euro."")
    while (want_continue == 1):
        currency_converter()

        want_continue = int(input(""Do you want to continue (1 = yes / 0 = no)?""))



main()
",hw4.1,3,"Call:9,Int:2,Attribute:1,Assign:5,Str:7,While:1,Div:1,FunctionDef:2,Eq:1"
"Definition and calling of the function.
Parameters passing and value return
Using truth value as return value","__author__ = 'Vince'

#The following is a integer number retriever, it can be used to retrieve both start number and stop number.
#If check_number, entered by the parent function that calls ask_number is '-1' it assumes its asking for
#a start number.  Else it assumes the start number would be a positive integer since the start number would be retrieved
#by the previous ""ask_number"" function
def ask_number(check_num):
    if check_num < 0:
        input_num = int(input(""What is the lower limit of the range? ""))
        while input_num < 0:
            input_num = int(input(""Lower limit may not be negative!""))
        return input_num

    else:
        input_num = int(input(""What is the upper limit?""))
        while input_num < check_num:
            input_num = int(input(""The upper limit may not be smaller than the lower limit!""))
        return input_num

#This function determines a given number N is a prime through division by iterating from 2 to Square-Root of N
def is_prime(test_num):
    import math

    if test_num < 2: #Smallest Prime number is 2
        return False

    for i in range (2,int(math.sqrt(test_num))+1):
        if test_num %i == 0:
            return False

    return True

#This function stages the prime list generation by first generating a list from lower to upper number
#then generating a separate list of primes.  Then it prints it from smallest to largest
def print_primes(lower, upper):

    list = []
    prime_list = []
    for i in range (lower, upper+1):
        list.append(i)

    for element in list:
        flag = is_prime(element)

        if flag == True:
            prime_list.append(element)

    print(""Prime numbers in range from"", lower, ""to"", upper)
    for element in prime_list:
        print(element)




def main():
    lower = ask_number(-1)
    upper = ask_number(lower)

    prime_list = print_primes(lower,upper)


main()

",hw4.2,3,"List:2,Call:15,Add:2,Mod:1,Assign:11,Str:6,Int:7,For:4,While:2,arg:3,Import:1,Lt:4,FunctionDef:4,Attribute:3,alias:1,Return:5,Eq:2,False:2,USub:1,If:4,True:2"
"Using lists
Defining and Calling a Function","__author__ = 'Vincent Lee'

#the following program asks the user for a list of items with the original prices and returns the list
def get_shopping_list():
    shopping_list = []
    print(""Enter the original prices of purchases. Use negative number to stop"")
    temp_item = float(input(""Enter the price of the first purchase.""))
    while(temp_item>= 0):
        shopping_list.append(temp_item)
        temp_item = float(input(""Enter the price of the next purchase.""))

    return shopping_list

# Following function takes a price of item, and calculates and return the appropriate discounted price
# The discount is calculated separately for each purchased product. If the the normal price of a product is less than 30 dollars,
# you get a 10% discount. If the regular price is at least 30 but less than 50 dollars, you receive a 20% discount.
# If the regular price is  50 dollars or more, you receive a 40% discount.
def discount(original_price):
    if original_price < 30:
        return (original_price * 0.90)
    elif original_price < 50:
        return (original_price * 0.80)
    else:
        return (original_price * 0.60)

#this function takes the list of items at original price, and dtermines the discount and actual price paid.
#it then prints a table of original price, discount, and price paid as well as the sum of the savings
def make_discount_list(shopping_list):
    discounted_price_list = []
    savings_list = []
    for element in shopping_list:
        paid_price = discount(element)
        discounted_price_list.append(paid_price)
        savings_list.append(element - paid_price)

    print(""{0:^8} {1:^8} {2:^8}"".format('Price','Discount','Paid'))
    for i in range (0,len(shopping_list)):
        print(""{0:^8.2f} {1:^8.2f} {2:^8.2f}"".format(shopping_list[i],savings_list[i],discounted_price_list[i]))

    print(""----------------------------------------"")
    print(""Total Discount ${0:.2f}"".format(sum(savings_list)))

#main calls all the associated functions
def main():

    original_list = get_shopping_list()
    #checks to see if the user actually bought any items
    if (len(original_list) <= 0):
        print(""No purchases were made."")
        make_discount_list(original_list)
    else:
        make_discount_list(original_list)


main()
",hw5.1,4,"List:3,Call:18,arg:2,Int:5,Assign:8,Str:9,For:2,LtE:1,Attribute:6,Index:1,Mult:3,Lt:2,FunctionDef:4,Float:3,If:3,While:1,Return:4,GtE:1,Sub:1"
"Using lists
Defining and Calling a Function
Using functions that returns a number of values","__author__ = 'Vincent Lee'

import random

# The function randomly selects and returns a list with the numbers 1 to 10 randomly
# ordered. The function receives random number generator seed as a parameter
def random_list (start):
    lis = []

    # Create the list with numbers 1-10 in increasing order
    for i in range (1, 11):
        lis.append (i)

# Mix the numbers in the list DOWNSTREAM
# For each element in the list swap it with some element
# before it. Elements can be swapped several times.
    random.seed (start)
    for swap in range(9, 0, -1):
        place = random.randint(0, swap)
        temp = lis[place]
        lis[place] = lis[swap]
        lis [swap] = temp
    return lis

#following ask the user for row of multiplication table to drill, and checks to make sure the entered number is between
#1 and 10, or it will keep asking the user to enter a number within the valid range
def get_row():
    row = int(input(""Which row of multiplication table to drill (1-10)?""))
    while (row <= 0 or row > 10):
        print(""number must be between 1 to 10!"")
        row = int(input(""Which row of multiplication table to drill (1-10)?""))
    return row


#The function asks the user input data: (1) a user name (a string), (2) the row of multiplication table to drill asked (integer number between 1 and 10), and (3) the random number generator seed
#The function returns all entered data using one return-command with a list of values . Values should be returned in the same order as they were requested.
def get_input():
    name = input(""What is your name?"")
    row = get_row()
    seed = int(input(""Enter integer number to seed the random generator:""))
    return (name, row, seed)


#The function prompts the user for a single multiplication result and checks its response. The function returns True if the user's response is correct, and False if the user's response is wrong.
def drill_pair(num1,num2):
    answer = num1 * num2
    print (""How much is {0} * {1}?"".format(num2,num1))
    user_answer = int(input(""""))
    if answer == user_answer:
        return True
    else:
        return False

#The function takes care of the entire drilling dialog
#it receives the parameters for user name, the multiplication table row to drill, and a randomized list of numbers between 1 and 10 that defines the order of the drill
# (second numbers in drill pairs should be selected in the same order as provided in num_lis list passed as a parameter.
# The function always calls the function drill_pair to check user answer for a single multiplication.
# Based on that check the function tells whether the user's response is correct or wrong, and ensure that the same multiplication pair is drilled as many times as required for the user to
# provide the correct answer. The function returns an integer that indicates how many times the user gave an incorrect answer.
def drill_row (name, row, num_list):
    wrong_attempts = 0
    for element in num_list:
        flag = False

        while (flag == False):
            flag = drill_pair(row,element)
            if(flag == False):
                print(""Wrong! Try again!"")
                wrong_attempts += 1
            else:
                print(""Correct! Bravo, {0}!"".format(name))

    return wrong_attempts


def main():
    print(""Multiplication table drill!"")
    name, row, seed = get_input()
    mult_list = random_list(seed)
    wrong_attempts = drill_row(name, row, mult_list)
    print(""The drill is finished."")
    if (wrong_attempts > 0):
        print(""You gave {0} wrong answers"".format(wrong_attempts))
    else:
        print(""{0}, you are a champion! All answers were correct!"".format(name))



main()",hw5.2,4,"List:1,Call:24,Add:1,Gt:2,Str:14,Index:3,Mult:1,LtE:1,FunctionDef:6,While:2,alias:1,False:4,Return:6,If:3,For:3,Int:7,AugAssign:1,Assign:19,Or:1,Attribute:7,arg:3,Import:1,True:1,USub:1,Tuple:2,Eq:3"
"String processing, in particular the use of split method
Working with lists ","__author__ = 'Vincent Lee'

#this function asks the user for course data as name, grade and credit hours
#it asks repeatedly, storing the course and grades in a 'reportcard', until a blank entry is given at which point it returns the reportcard
# Assumption: user provides data in the right oder and format
def make_reportcard():
    print (""The program calculates the QPA of your courses."")
    print (""Enter your course data, one course per line in the following format:"")
    print (""course number; grade; credit hours"")
    print (""Example: INFSCI0012;4.0;3"")
    print (""Enter empty line after all course data entered."")
    reportcard = {}
    course = input()
    while len(course) > 0:
        course_components = course.split("";"")
        course_name = course_components[0]
        course_grade = float(course_components[1])
        course_hours = int(course_components[2])

        reportcard[course_name] = [course_grade, course_hours]
        course = input()
    return reportcard

#this function takes the reportcard and calculates the qpa, also checks if reportcard is empty
def calculate_qpa(reportcard):
    qpa_total = 0
    credit_hours = 0

    if (len(reportcard) <= 0):
        print(""No data entered."")

    else:
        for i in reportcard:
            qpa_total += (reportcard[i][0]*reportcard[i][1])
            credit_hours += reportcard[i][1]

        print(""Your QPA is {:.2f}"".format(qpa_total/credit_hours))


def main():
    reportcard = make_reportcard()
    calculate_qpa(reportcard)

main()



",hw6.1,5,"List:1,Call:17,Add:2,AugAssign:2,Assign:12,Str:9,Int:9,For:1,Gt:1,Dict:1,Attribute:2,Index:6,Mult:1,LtE:1,FunctionDef:3,While:1,Div:1,Return:1,arg:1,If:1"
"Reading from a file
Exception handling","# Vincent Lee  Assignment 7.1
# This programs reads a stock purchasing and selling transactions data from the file.
# The program calculates and prints brockerage and commissions fees.
# For each stock transactions the commission is 0.2% of the price of purchase or shares sold
# Unless the commission is less than $8, in which case, a fixed $8 commission is charged.
# Total brokerage fees are tabulated and printed at the end

# This program reads and right after reading, prints each value from the file, will not save the numbers for future processing

# Error Treatment - please see below

def main():
    fname_reading = input(""What is the name of the transaction file?\n"")
    flag = False
    total_brokerage_fee = 0
    try:
        myfile_r = open(fname_reading, ""r"")
        line  = myfile_r.readline()
        print (""purchase price  brokerage fee ($$)"")
        while line != """" and flag == False:
            try:
                temp_com = abs(float(line)) * 0.002

                if temp_com < 8:
                    print(""{0:^.2f}  {1:^.2f}"".format(float(line), 8))
                    total_brokerage_fee += 8
                else:
                    print(""{0:^.2f}  {1:^.2f}"".format(float(line), temp_com))
                    total_brokerage_fee += temp_com
                line = myfile_r.readline()

            except ValueError:
                print(""The file contains an incorrect number. The program ends."")
                flag  = True

        if flag == False:
            print(""Total brokerage fees: ${:.2f}"".format(total_brokerage_fee))

    except FileNotFoundError:
        print(""File"", fname_reading, ""doest not exist, and thus can't be opened. The program ends."")
    except IOError:
        print(""The file contains an incorrect number. The program ends."")


main()

#error
#If an error occurs while reading the file (for example, the file with the provided does not exist, or it can not be read for any other reason), the program should print that the file reading error has occurred and finish.
#If  a specific line in the file is not a decimal number, the program should print that an incorrect number is encountered and finish. However, all correct lines before this bad line should be processed normally.
#If a specific line has a negative number, it is not an error. Positive lines means sold shares, negative purchased shares. For negatives program calculates the brokerage fee as .2% of absolute value of this transaction or of a  minimum fee of $8.
",hw7.1,6,"Float:1,Int:4,Add:2,AugAssign:2,Assign:8,Str:10,FunctionDef:1,ExceptHandler:3,And:1,Lt:1,Attribute:5,Mult:1,NotEq:1,Call:13,True:1,While:1,Try:2,False:3,If:2,Eq:2"
"Reading information from a file
Processing exceptions
Processing strings","#Vincent Lee Assignment 8.1

def main():
    fname_reading = input(""Enter the name of the file with your account statement:\n"")
    payee = input(""Enter the payee to check:\n"")
    total_paid = 0


    try:
        myfile_r = open(fname_reading, ""r"")
        line = myfile_r.readline() #initial read line

        while line != """": #while not EOF

            line_as_list = line.split('\t')

            #checks to make sure the line is an actual transaction entry (5 or more tab seprated items),
            #the fourth entry in the line is a decimal number, and payee is the fifth entry in the line
            if (len(line_as_list) > 4) and ('.' in line_as_list[3]) and (payee in line_as_list[4]):

                temp_transaction = float(line_as_list[3])
                if temp_transaction < 0: #only include payment, not deposits
                    total_paid += temp_transaction


            line = myfile_r.readline()

        print(""Total payments to {0} in this statement: {1:.2f} eur"".format(payee,(-1*total_paid)))

    except FileNotFoundError:
        print(""Error reading file"", fname_reading)



main()",hw8.1,6,"In:1,Int:5,Add:1,AugAssign:1,Assign:8,Str:8,Gt:1,ExceptHandler:1,And:1,While:1,Index:2,Mult:1,Lt:1,FunctionDef:1,Attribute:4,If:2,Try:1,USub:1,Call:11,NotEq:1"
"Object Creation
Methods Calls","#Vincent Lee Assignment 8.1
# Class BankAccount

class BankAccount:
    
    # __init__ Method creates a new bank account. Account number and the 
    # owner name (strings) are given as parameters.
    
    def __init__(self, number, owner):
        self.account_number = number
        self.name = owner
        self.balance = 0.0
    
    
    # This method returns a bank account number.
       
    def get_number(self):
        return self.account_number
       
    
    # This method returns the name of the owner account.
    
    def get_owner(self):
        return self.name
    
    
    # The method returns the account balance (decimal).
    
    def get_balance(self):
        return self.balance
    
    
    # This method adds amount given as a parameter (decimal) to the account balance
    # if the parameter is positive.
    
    def deposit(self, amount):
        if amount > 0.0:
            self.balance += amount
    
    
    # Method withdraws the amount given as parameter from the account balance, if
    # amount is positive and not larger than the account balance.
    # The method returns the amount withdrawn from the account (0.0 if no withdrawal).
            
    def withdraw(self, amount):
        if amount > 0.0 and amount <= self.balance:
            self.balance -= amount
            return amount
        else:
            return 0.0
    
    
    # Method transfers the amount of money given as parameter from the current account
    # to to the account (object) provided by the last parameter. If the amount
    # is positive and transferable (i.e. not larger than the account balance)
    # the transfer is performed and the method returns True. 
    # If the transfer was not successful, balances do not change and it returns False.
    
    def transfer(self, amount, account):
        if self.withdraw(amount) > 0.0:
            account.deposit(amount)
            return True
        else:
            return False
        
    
    # The method returns a string that contains the account number, the owner's
    # Name and account balance. This string is returned when you evaluate the object
    # for example, it will be printed if you will print an object of this class
    
    def __str__ (self):
        str = ""Account {:s}, Owner {:s}, Balance ${:.2f}"".format (
                self.account_number, self.name, self.balance)
        return str


def main():
    Account1 = BankAccount(""5577"",""John Doe"")
    Account1.deposit(429.40)
    print(""Account 1 balance is ${0:.2f}"".format(Account1.get_balance()))
    print(""${0:.2f} withdrawn from Account 1"".format(Account1.withdraw(180)))

    Account2_number = input(""Enter Account 2 number:\n"")
    Account2_owner = input(""Enter Account 2 owner's name:\n"")
    Account2 = BankAccount(Account2_number, Account2_owner)
    Deposit = float(input(""How many dollars to deposit to Account 2?\n""))
    Account2.deposit(Deposit)
    print(""Account 2 balance is ${0:.2f}"".format(Account2.get_balance()))

    print(""Account details:"")
    print(Account1)
    print(Account2)

    Transfer = float(input(""How many dollars to transfer from Account 2 to Account 1?\n""))
    if (Account2.transfer(Transfer,Account1)):
        print(""Transfer Successful!"")
    else:
        print(""Transfer Failed!"")

    print(""Account details after transfer:"")
    print(Account1)
    print(Account2)


main()",hw8.2,7,"Int:1,ClassDef:1,AugAssign:2,Gt:3,Assign:10,Str:13,False:1,And:1,Attribute:19,arg:8,Add:1,LtE:1,FunctionDef:9,Float:6,Return:8,True:1,Call:24,If:4,Sub:1"
