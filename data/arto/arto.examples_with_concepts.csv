Week,Topic,Subtopic,,ContentType,Content,concepts
1,The program and the source code,Commands,1,code_sample,"System.out.println(""Hello world!"");","PublicClassSpecifier:1,StringDataType:1,StringLiteral:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
1,The program and the source code,Components of commands,1,code_sample,"System.out.print(""Hello ""); System.out.print(""world"");\nSystem.out.print(""!"");","PublicClassSpecifier:1,StringDataType:3,StringLiteral:3,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:3,java.lang.System.out.print:3,"
1,The program and the source code,Components of commands,1,code_sample,"// We will print the text ""Hello world""\nSystem.out.print(""Hello world"");\n\nSystem.out.print("" and all the people of the world.""); // We print more text to the same line.\n\n// System.out.print(""this line will not be executed, because it is commented out"");","PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:2,java.lang.System.out.print:2,"
1,The program and the source code,More about printing,1,code_sample,"System.out.println(""First\nSecond\nThird"");","PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,"
1,Main program body,-,1,code_sample,"public class Example {\n    public static void main(String[] args) {\n        // program code\n    }\n}","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
1,Main program body,-,1,code_sample,"public class Example {\n    public static void main(String[] args) {\n        System.out.print(""Text to be printed"");\n    }\n}","PublicClassSpecifier:1,StaticMethodSpecifier:1,StringDataType:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,java.lang.System.out.print:1,FormalMethodParameter:1,"
1,Getting to know your development environment,-,1,problem_1,"Name",
1,Getting to know your development environment,-,1,problem_2,"Hello world! (And all the people of the world)",
1,Getting to know your development environment,-,1,problem_3,"Spruce",
1,Variables and assignment,Variables and data types,2,code_sample,"int months = 12;","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,"
1,Variables and assignment,Variables and data types,2,code_sample,"String text = ""includes text"";\nint wholeNumber = 123;\ndouble decimalNumber = 3.141592653;\nboolean isTrue = true;\n\nSystem.out.println(""The variable's type is text. Its value is "" + text);\nSystem.out.println(""The variable's type is integer. Its value is  "" + wholeNumber);\nSystem.out.println(""The variable's type is decimal number. Its value is "" + decimalNumber);\nSystem.out.println(""The variable's type is truth value. Its value is "" + isTrue);","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,StringAddition:4,True:1,StringVariable:1,ClassDefinition:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,IntDataType:1,VoidDataType:1,StringInitializationStatement:1,DoubleDataType:1,BooleanDataType:1,ActualMethodParameter:4,"
1,Variables and assignment,Variables and data types,2,code_sample,"int wholeNumber = 123;\nSystem.out.println(""The variable's type is integer. Its value is  "" + wholeNumber);\n\nwholeNumber = 42;\nSystem.out.println(""The variable's type is integer. Its value is  "" + wholeNumber);","SimpleAssignmentExpression:2,PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,MethodDefinition:1,IntDataType:1,VoidDataType:1,StringAddition:2,ClassDefinition:1,ActualMethodParameter:2,"
1,Variables and assignment,Variable data types are immutable,2,code_sample,"String text = ""yabbadabbadoo!"";\ntext = 42; // Does not work! :(","SimpleAssignmentExpression:2,PublicClassSpecifier:1,StringDataType:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,StringVariable:1,ClassDefinition:1,"
1,Variables and assignment,Variable data types are immutable,2,code_sample,"double decimalNumber = 0.42;\ndecimalNumber = 1; // Works! :)","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,DoubleDataType:1,ClassDefinition:1,"
1,Variables and assignment,Variable data types are immutable,2,problem_4,"Varying variables",
1,Variables and assignment,Allowed and descriptive variable names,2,code_sample,"int camelCaseVariable = 7;","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,"
1,Variables and assignment,Allowed and descriptive variable names,2,code_sample,"int 7variable = 4; // Not allowed!\nint variable7 = 4; // A valid, but not descriptive variable name","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ClassDefinition:1,"
1,Variables and assignment,Allowed and descriptive variable names,2,code_sample,"int camelCase = 2;\nint camelCase = 5; // Not allowed, the variable camelCase is already defined!","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ClassDefinition:1,"
1,Calculation,-,2,code_sample,"int first = 2;   // variable of whole number type is assigned the value 2\nint second = 4;  // variable of whole number type is assigned the value 4\nint sum = first + second;  // variable of whole number type is assigned the value of first + second\n                           //     (which means 2 + 4)\n\nSystem.out.println(sum); // the value of the sum of variables is printed","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,AddExpression:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:3,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
1,Calculation,-,2,code_sample,"int calcWithParens = (1 + 1) + 3 * (2 + 5);  // 23\nint calcWithoutParens = 1 + 1 + 3 * 2 + 5;   // 13","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,AddExpression:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,MultiplyExpression:2,ClassDefinition:1,"
1,Calculation,-,2,code_sample,"int calcWithParens = (1 + 1);\ncalcWithParens = calcWithParens + 3 * (2 + 5);  // 23\n\nint calcWithoutParens = 1 + 1;\ncalcWithoutParens = calcWithoutParens + 3 * 2;\ncalcWithoutParens = calcWithoutParens + 5;      // 13","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:1,AddExpression:5,MethodDefinition:1,IntDataType:2,VoidDataType:1,MultiplyExpression:2,ClassDefinition:1,"
1,Calculation,-,2,code_sample,"int first = 2;\nint second = 4;\n\nSystem.out.println(first + second);\nSystem.out.println(2 + second - first - second);","SimpleAssignmentExpression:2,SubtractExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,AddExpression:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:2,"
1,Calculation,Floating point numbers (decimal numbers),2,code_sample,"int result = 3 / 2;  // result is 1 (integer) because 3 and 2 are integers as well","SimpleAssignmentExpression:1,PublicClassSpecifier:1,DivideExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,"
1,Calculation,Floating point numbers (decimal numbers),2,code_sample,"int first = 3:\nint second = 2;\ndouble result = first / second;  // the result is again 1 because first and second are integers","SimpleAssignmentExpression:3,PublicClassSpecifier:1,DivideExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,DoubleDataType:1,ClassDefinition:1,"
1,Calculation,Floating point numbers (decimal numbers),2,code_sample,"int remainder = 7 % 2;  // remainder is 1 (integer)","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,ModulusExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,"
1,Calculation,Floating point numbers (decimal numbers),2,code_sample,"double whenDividendIsFloat = 3.0 / 2;  // result is: 1.5\ndouble whenDivisorIsFloat = 3 / 2.0;   // result is: 1.5","SimpleAssignmentExpression:2,PublicClassSpecifier:1,DivideExpression:2,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,DoubleDataType:2,ClassDefinition:1,"
1,Calculation,Floating point numbers (decimal numbers),2,code_sample,"int first = 3;\nint second = 2;\ndouble result1 = (double)first / second;  // result is: 1.5\n\ndouble result2 = first / (double)second;  // result is: 1.5\n\ndouble result3 = (double)(first / second);  // result is: 1","SimpleAssignmentExpression:5,PublicClassSpecifier:1,ExplicitTypeCasting:3,DivideExpression:3,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,DoubleDataType:3,ClassDefinition:1,"
1,Calculation,Floating point numbers (decimal numbers),2,code_sample,"int integerResultBecauseTypeIsInteger = 3.0 / 2;  // quotient is automatically integer: 1","SimpleAssignmentExpression:1,PublicClassSpecifier:1,DivideExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,"
1,Calculation,Floating point numbers (decimal numbers),2,code_sample,"int dividend = 3;\nint divisor = 2;\n\ndouble quotient = 1.0 * dividend / divisor;\nSystem.out.println(quotient);","SimpleAssignmentExpression:3,PublicClassSpecifier:1,DivideExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,MultiplyExpression:1,DoubleDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
1,Calculation,Floating point numbers (decimal numbers),2,code_sample,"int dividend = 3;\nint divisor = 2;\n\ndouble quotient = dividend / divisor * 1.0;\nSystem.out.println(quotient);","SimpleAssignmentExpression:3,PublicClassSpecifier:1,DivideExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,MultiplyExpression:1,DoubleDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
1,Calculation,Floating point numbers (decimal numbers),2,problem_5,"Seconds in a year",
1,Concatenation or combining strings,-,2,code_sample,"String greeting = ""Hi "";\nString name = ""John"";\nString goodbye = "", and goodbye!"";\n\nString sentence = greeting + name + goodbye;\n\nSystem.out.println(sentence);","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringVariable:4,ClassDefinition:1,StringDataType:4,StringLiteral:3,AddExpression:1,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:3,ActualMethodParameter:1,"
1,Concatenation or combining strings,-,2,code_sample,"System.out.println(""there is an integer --> "" + 2);\nSystem.out.println(2 + "" <-- there is an integer"");","PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,MethodDefinition:1,VoidDataType:1,StringAddition:2,ClassDefinition:1,ActualMethodParameter:2,"
1,Concatenation or combining strings,-,2,code_sample,"System.out.println(""Four: "" + (2 + 2));\nSystem.out.println(""But! Twenty-two: "" + 2 + 2);","PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,AddExpression:1,MethodDefinition:1,VoidDataType:1,StringAddition:2,ClassDefinition:1,ActualMethodParameter:2,"
1,Concatenation or combining strings,-,2,code_sample,"int x = 10;\n\nSystem.out.println(""variable x has the following value: "" + x);\n\nint y = 5;\nint z = 6;\n\nSystem.out.println(""y has the value  "" + y + "" and z has the value "" + z);","SimpleAssignmentExpression:3,PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,MethodDefinition:1,IntDataType:3,VoidDataType:1,StringAddition:2,ClassDefinition:1,ActualMethodParameter:2,"
1,Concatenation or combining strings,-,2,problem_6,"Addition",
1,Concatenation or combining strings,-,2,problem_7,"Multiplication",
1,Reading user input,-,2,code_sample,"import java.util.Scanner;\n\npublic class ProgramBody {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n\n        // program code\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ImportStatement:1,ClassDefinition:1,ConstructorCall:1,ActualMethodParameter:1,FormalMethodParameter:1,ObjectCreationStatement:1,"
1,Reading user input,Reading a string,2,code_sample,"System.out.print(""What is your name? "");\nString name = reader.nextLine(); // Reads a line of input from the user and assigns it\n                                 //     to the variable called name\n\nSystem.out.println(""Hi, "" + name);","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,StringVariable:1,ClassDefinition:1,java.lang.System.out.print:1,StringDataType:3,StringLiteral:2,MethodDefinition:1,VoidDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:2,"
1,Reading user input,Reading a string,2,code_sample,"import java.util.Scanner;\n\npublic class Greeting {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n\n        System.out.print(""Who is greeted: "");\n        String name = reader.nextLine(); // Reads a line of input from the user and assigns it\n                                         //     to the variable called name\n\n        System.out.print(""Hi "" + name);\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringAddition:1,ImportStatement:1,StringVariable:1,ClassDefinition:1,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:2,MethodDefinition:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:3,ObjectCreationStatement:1,"
1,Reading user input,Reading integers,2,code_sample,"System.out.print(""Type an integer: "");\nint number = Integer.parseInt(reader.nextLine());\n\nSystem.out.println(""You typed "" + number);","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:1,VoidDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:3,"
1,Reading user input,Reading integers,2,code_sample,"import java.util.Scanner;\n\npublic class NameAndAgeGreeting {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n\n        System.out.print(""Your name: "");\n        String name = reader.nextLine();   // Reads a line from the users keyboard\n\n        System.out.print(""How old are you: "");\n        int age = Integer.parseInt(reader.nextLine()); // Reads a string variable from the keyboard and transfers it to an integer\n\n        System.out.println(""Your name is: "" + name + "", and you are "" + age + "" years old, nice to meet you!"");\n    }\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,StringVariable:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,StringLiteral:3,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:5,ObjectCreationStatement:1,"
1,Reading user input,Summary,2,code_sample,"import java.util.Scanner;\npublic class ProgramName {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n\n        // code here\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ImportStatement:1,ClassDefinition:1,ConstructorCall:1,ActualMethodParameter:1,FormalMethodParameter:1,ObjectCreationStatement:1,"
1,Reading user input,Summary,2,code_sample,"String text = reader.nextLine();","SimpleAssignmentExpression:1,PublicClassSpecifier:1,StringDataType:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,StringVariable:1,ClassDefinition:1,ObjectMethodInvocation:1,"
1,Reading user input,Summary,2,code_sample,"int number = Integer.parseInt(reader.nextLine());","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,ObjectMethodInvocation:1,java.lang.Integer.parseInt:1,ActualMethodParameter:1,"
1,Reading user input,Summary,2,problem_8,"Adder",
1,Reading user input,Summary,2,problem_9,"Divider",
1,Reading user input,Summary,2,problem_10,"Calculating the circumference",
1,Reading user input,Summary,2,problem_11,"Bigger number",
1,Reading user input,Summary,2,problem_12,"Sum of the ages",
1,Reading user input,Summary,2,problem_13,"NHL statistics, part 1",
1,Conditional statements and truth values,-,3,code_sample,"int number = 11;\n\nif (number > 10) {\n    System.out.println(""The number was greater than 10"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,IfStatement:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,ActualMethodParameter:1,"
1,Conditional statements and truth values,-,3,code_sample,"int number = 55;\n\nif (number != 0) {\n    System.out.println(""The number was not equal to 0"");\n}\n\nif (number >= 1000) {\n    System.out.println(""The number was greater than or equal to 1000"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,GreaterEqualExpression:1,ClassDefinition:1,NotEqualExpression:1,IfStatement:2,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:1,VoidDataType:1,ActualMethodParameter:2,"
1,Conditional statements and truth values,-,3,code_sample,"int x = 45;\nint number = 55;\n\nif (number > 0) {\n    System.out.println(""The number is positive!"");\n    if (number > x) {\n        System.out.println("" and greater than the value of variable x"");\n        System.out.println(""after all, the value of variable x is "" + x);\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,StringAddition:1,ClassDefinition:1,IfStatement:2,StringDataType:3,StringLiteral:3,MethodDefinition:1,IntDataType:2,VoidDataType:1,GreaterExpression:2,ActualMethodParameter:3,"
1,Conditional statements and truth values,-,3,code_sample,"int first = 1;\nint second = 3;\n\nboolean isGreater = first > second;","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,GreaterExpression:1,ClassDefinition:1,BooleanDataType:1,"
1,Conditional statements and truth values,-,3,code_sample,"int first = 1;\nint second = 3;\n\nboolean isLesser = first < second;\n\nif (isLesser) {\n    System.out.println(first + "" is less than "" + second + ""!"");\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,LessExpression:1,IfStatement:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,BooleanDataType:1,ActualMethodParameter:1,"
1,Conditional statements and truth values,else,3,code_sample,"int number = 4;\n\nif (number > 5) {\n    System.out.println(""Your number is greater than five!"");\n} else {\n    System.out.println(""Your number is equal to or less than five!"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,ActualMethodParameter:2,"
1,Conditional statements and truth values,else,3,problem_14,"A positive number",
1,Conditional statements and truth values,else,3,problem_15,"Age of majority",
1,Conditional statements and truth values,else,3,problem_16,"Even or odd?",
1,Conditional statements and truth values,else if,3,code_sample,"int number = 3;\n\nif (number == 1) {\n    System.out.println(""The number is one."");\n} else if (number == 2) {\n    System.out.println(""The number is two."");\n} else if (number == 3) {\n    System.out.println(""The number is three!"");\n} else {\n    System.out.println(""Quite a lot!"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,IfElseIfStatement:2,PublicMethodSpecifier:1,java.lang.System.out.println:4,EqualExpression:3,IfElseStatement:1,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,IntDataType:1,VoidDataType:1,ActualMethodParameter:4,"
1,Conditional statements and truth values,Comparing strings,3,code_sample,"String text = ""course"";\n\nif (text.equals(""marzipan"")) {\n    System.out.println(""The variable text contains the text marzipan"");\n} else {\n    System.out.println(""The variable text does not contain the text marzipan"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,StringVariable:1,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:1,ActualMethodParameter:3,java.lang.String.equals:1,"
1,Conditional statements and truth values,Comparing strings,3,code_sample,"String text = ""course"";\nString anotherText = ""horse"";\n\nif (text.equals(anotherText)) {\n    System.out.println(""The texts are the same!"");\n} else {\n    System.out.println(""The texts are not the same!"");\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,StringVariable:2,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:2,ObjectMethodInvocation:1,ActualMethodParameter:3,java.lang.String.equals:1,"
1,Conditional statements and truth values,Comparing strings,3,problem_17,"Greater number",
1,Conditional statements and truth values,Comparing strings,3,problem_18,"Grades and points",
1,Conditional statements and truth values,Logical operations,3,code_sample,"System.out.println(""Is the number between 5-10?"");\nint number = 7;\n\nif (number > 4 && number < 11) {\n    System.out.println(""Yes! :)"");\n} else {\n    System.out.println(""Nope :("")\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,IfElseStatement:1,ClassDefinition:1,StringDataType:3,LessExpression:1,AndExpression:1,StringLiteral:3,MethodDefinition:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,ActualMethodParameter:3,"
1,Conditional statements and truth values,Logical operations,3,code_sample,"System.out.println(""Is the number less than 0 or greater than 100?"");\nint number = 145;\n\nif (number < 0 || number > 100) {\n    System.out.println(""Yes! :)"");\n} else {\n    System.out.println(""Nope :("")\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,IfElseStatement:1,ClassDefinition:1,OrExpression:1,StringDataType:3,LessExpression:1,StringLiteral:3,MethodDefinition:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,ActualMethodParameter:3,"
1,Conditional statements and truth values,Logical operations,3,code_sample,"System.out.println(""Is the string equal to 'milk'?"");\nString text = ""water"";\n\nif (!(text.equals(""milk""))) {  // true if the condition text.equals(""milk"") is false\n    System.out.println(""No!"");\n} else {\n    System.out.println(""Yes"")\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,IfElseStatement:1,NotExpression:1,StringVariable:1,ClassDefinition:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:1,ActualMethodParameter:4,java.lang.String.equals:1,"
1,Conditional statements and truth values,Logical operations,3,code_sample,"int number = 99;\n\nif ((number > 0 && number < 10) || number > 100 ) {\n    System.out.println(""The number was in the range 1-9 or it was over 100"");\n} else {\n    System.out.println(""The number was equal to or less than 0 or it was in the range 10-99"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,ClassDefinition:1,OrExpression:1,LessExpression:1,StringDataType:2,AndExpression:1,StringLiteral:2,MethodDefinition:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,ActualMethodParameter:2,"
1,Conditional statements and truth values,Logical operations,3,problem_19,"Age check",
1,Conditional statements and truth values,Logical operations,3,problem_20,"Usernames",
1,Conditional statements and truth values,Logical operations,3,problem_21,"Leap year",
1,Introduction to loops,-,4,code_sample,"while (true) {\n    System.out.println(""I can program!"");\n}","PublicClassSpecifier:1,StringDataType:1,StringLiteral:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,True:1,WhileStatement:1,ClassDefinition:1,ActualMethodParameter:1,"
1,Introduction to loops,-,4,code_sample,"while (true) {\n    System.out.println(""I can program!"");\n\n    System.out.print(""Continue? ('no' to quit)? "");\n    String command = reader.nextLine();\n    if (command.equals(""no"")) {\n        break;\n    }\n}\n\nSystem.out.println(""Thank you and see you later!"");","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,True:1,WhileStatement:1,StringVariable:1,ClassDefinition:1,java.lang.System.out.print:1,StringDataType:5,IfStatement:1,StringLiteral:4,MethodDefinition:1,VoidDataType:1,ObjectMethodInvocation:2,ActualMethodParameter:4,java.lang.String.equals:1,"
1,Introduction to loops,-,4,code_sample,"System.out.println(""welcome to the calculator"");\n\nwhile (true) {\n    System.out.print(""Enter a command (sum, difference, quit): "");\n    String command = reader.nextLine();\n    if (command.equals(""quit"")) {\n        break;\n    }\n\n    System.out.print(""enter the numbers"");\n    int first = Integer.parseInt(reader.nextLine());\n    int second = Integer.parseInt(reader.nextLine());\n\n    if (command.equals(""sum"") ) {\n        int sum = first + second;\n        System.out.println( ""The sum of the numbers is "" + sum );\n    } else if (command.equals(""difference"")) {\n        int difference = first - second;\n        System.out.println(""The difference of the numbers is "" + difference);\n    } else {\n        System.out.println(""Unknown command"");\n    }\n\n}\n\nSystem.out.println(""Thanks, bye!"");","SimpleAssignmentExpression:5,PublicClassSpecifier:1,IfElseIfStatement:1,PublicMethodSpecifier:1,java.lang.System.out.println:5,StringAddition:2,IfElseStatement:1,True:1,WhileStatement:1,StringVariable:1,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:2,SubtractExpression:1,StringDataType:11,IfStatement:1,StringLiteral:10,AddExpression:1,MethodDefinition:1,IntDataType:4,VoidDataType:1,ObjectMethodInvocation:6,ActualMethodParameter:12,java.lang.String.equals:3,"
1,Introduction to loops,-,4,problem_22,"Password",
1,Introduction to loops,-,4,problem_23,"Temperatures",
1,Introduction to loops,-,4,problem_24,"NHL statistics, part 2",
2,More loops,-,4,code_sample,"int number = 1;\n\nwhile (number < 11) {\n    System.out.println(number);\n    number++;  // number++ means the same as number = number + 1\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,WhileStatement:1,ClassDefinition:1,ActualMethodParameter:1,"
2,More loops,-,4,code_sample,"int number = 1024;\n\nwhile (number >= 1) {\n    System.out.println(number);\n    number = number / 2;\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,DivideExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:1,GreaterEqualExpression:1,VoidDataType:1,WhileStatement:1,ClassDefinition:1,ActualMethodParameter:1,"
2,More loops,-,4,problem_27,"From one to a hundred",
2,More loops,-,4,problem_28,"From hundred to one",
2,More loops,-,4,problem_29,"Even numbers",
2,More loops,-,4,problem_30,"Up to a certain number",
2,More loops,-,4,problem_31,"Lower limit and upper limit",
2,More loops,Assignment operations,4,code_sample,"int length = 100;\n\nlength += 10;  // same as length = length + 10;\nlength -= 50;  // same as length = length - 50;","SimpleAssignmentExpression:1,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MinusAssignmentExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,"
2,More loops,Assignment operations,4,code_sample,"length = length + 100;  // error!\nlength += 100;          // error!","SimpleAssignmentExpression:1,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,AddExpression:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,"
2,More loops,Assignment operations,4,code_sample,"int length = 0;\nlength = length + 100;\nlength += 100;\n\n// the variable length now holds the value 200","SimpleAssignmentExpression:2,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,"
2,More loops,Assignment operations,4,code_sample,"int length = 100;\n\nlength *= 10;   // same as length = length * 10;\nlength /= 100;  // same as length = length / 100;\nlength %= 3;    // same as length = length % 3;\n\n// the variable length now holds the value 1","SimpleAssignmentExpression:1,PublicClassSpecifier:1,MultiplyAssignmentExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,DivideAssignmentExpression:1,"
2,More loops,Assignment operations,4,code_sample,"int result = 0;\n\nint i = 0;\nwhile (i < 4) {\n   result = result + 3;\n   i++;  // means the same as i = i + 1;\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,LessExpression:1,PostIncrementExpression:1,PublicMethodSpecifier:1,AddExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,WhileStatement:1,ClassDefinition:1,"
2,More loops,Assignment operations,4,code_sample,"int result = 0;\n\nint i = 0;\nwhile (i < 4) {\n   result += 3;  // this is the same as result = result + 3;\n   i++;          // means the same as i = i+1;\n}","SimpleAssignmentExpression:2,AddAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PostIncrementExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,WhileStatement:1,ClassDefinition:1,"
2,More loops,Assignment operations,4,problem_32,"The sum of a set of numbers",
2,More loops,Assignment operations,4,problem_33,"The sum between two numbers",
2,More loops,Assignment operations,4,problem_34,"Factorial",
2,More loops,Assignment operations,4,problem_35,"Sum of the powers",
2,More loops,Infinite loops,4,code_sample,"int i = 0;\n\nwhile (i < 10) {\n    System.out.println(""Never again shall I program an eternal loop!"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,WhileStatement:1,ClassDefinition:1,LessExpression:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ActualMethodParameter:1,"
2,More loops,Ending a while loop,4,code_sample,"int i = 1;\nwhile (i < 10) {\n    // Some code.\n    i++;\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PostIncrementExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,WhileStatement:1,ClassDefinition:1,"
2,More loops,Ending a while loop,4,code_sample,"System.out.println(""Type your age: "");\n\nint age = Integer.parseInt(reader.nextLine());\n\nwhile (age < 5 || age > 85) {  // age less than 5 OR greater than 85\n    System.out.println(""You are lying!"");\n    if (age < 5) {\n        System.out.println(""You are so young that you cannot know how to write!"");\n    } else if (age > 85) {\n        System.out.println(""You are so old that you cannot know how to use a computer!"");\n    }\n\n    System.out.println(""Type your age again: "");\n    age = Integer.parseInt(reader.nextLine();\n}\n\nSystem.out.println(""Your age is "" + age);","SimpleAssignmentExpression:2,PublicClassSpecifier:1,IfElseIfStatement:1,PublicMethodSpecifier:1,java.lang.System.out.println:6,StringAddition:1,WhileStatement:1,ClassDefinition:1,OrExpression:1,java.lang.Integer.parseInt:2,StringDataType:6,LessExpression:2,IfStatement:1,StringLiteral:6,MethodDefinition:1,IntDataType:1,VoidDataType:1,GreaterExpression:2,ObjectMethodInvocation:2,ActualMethodParameter:8,"
2,More loops,Ending a while loop,4,code_sample,"System.out.println(""Type your age "");\nint age;\nwhile (true) {\n    age = Integer.parseInt(reader.nextLine());\n\n    if (age >= 5 && age <= 85) {  // age between 5 AND 85\n        break;  // end the loop\n    }\n\n    System.out.println(""You are lying!"");\n    if (age < 5) {\n        System.out.println(""You are so young that you cannot know how to write!"");\n    } else {  // that means age is over 85\n        System.out.println(""You are so old that you cannot know how to use a computer!"");\n    }\n\n    System.out.println(""Type your age again: "");\n}\n\nSystem.out.println(""Your age is "" + age);","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:6,GreaterEqualExpression:1,IfElseStatement:1,StringAddition:1,True:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,LessEqualExpression:1,StringDataType:6,IfStatement:1,LessExpression:1,AndExpression:1,StringLiteral:6,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ObjectMethodInvocation:1,ActualMethodParameter:7,"
2,More loops,Ending a while loop,4,problem_36,"Loops, ending and remembering",
2,Self-written methods,-,5,code_sample,"import java.util.Scanner;\n\npublic class ProgramBody {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // program code\n    }\n\n    // self-written methods\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ImportStatement:1,ClassDefinition:1,ConstructorCall:1,ActualMethodParameter:1,FormalMethodParameter:1,ObjectCreationStatement:1,"
2,Self-written methods,-,5,code_sample,"public static void greet() {\n    System.out.println(""Greetings from the world of methods!"");\n}","PublicClassSpecifier:1,StringDataType:1,StringLiteral:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
2,Self-written methods,-,5,code_sample,"import java.util.Scanner;\n\npublic class ProgramBody {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // program code\n    }\n\n    // self-written methods\n    public static void greet() {\n        System.out.println(""Greetings from the world of methods!"");\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ImportStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:2,StringDataType:1,StringLiteral:1,MethodDefinition:2,VoidDataType:2,ConstructorCall:1,ActualMethodParameter:2,ObjectCreationStatement:1,"
2,Self-written methods,-,5,code_sample,"import java.util.Scanner;\n\npublic class ProgramBody {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n\n        // program code\n        System.out.println(""Let us try if we can get to the method world:"");\n        greet();\n\n        System.out.println(""It seems like we can, let us try again:"");\n        greet();\n        greet();\n        greet();\n    }\n\n    // self-written methods\n    public static void greet() {\n        System.out.println(""Greetings from the world of methods!"");\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:3,ImportStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:2,StringDataType:3,StringLiteral:3,MethodDefinition:2,VoidDataType:2,ConstructorCall:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
2,Self-written methods,-,5,problem_37,"Printing out text",
2,Self-written methods,-,5,problem_38,"Many prints",
2,Self-written methods,Method parameters,5,code_sample,"public static void greet(String name) {\n    System.out.println(""Hi "" + name + "", greetings from the world of methods!"");\n}","PublicClassSpecifier:1,StringDataType:2,StringLiteral:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,StringAddition:1,StringVariable:1,ClassDefinition:1,SimpleVariable:1,ActualMethodParameter:1,"
2,Self-written methods,Method parameters,5,code_sample,"public static void main(String[] args) {\n    greet(""Matt"");\n    greet(""Arthur"");\n}","PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,ArrayDataType:1,ActualMethodParameter:2,"
2,Self-written methods,Method parameters,5,code_sample,"public static void main(String[] args) {\n    String name1 = ""Anne"";\n    String name2 = ""Green"";\n    greet( name1 + "" "" + name2 );\n\n    int age = 24;\n    greet(""John "" + age + "" years"");\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringAddition:2,StringVariable:2,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,IntDataType:1,VoidDataType:1,StringInitializationStatement:2,SimpleVariable:1,ArrayDataType:1,ActualMethodParameter:2,"
2,Self-written methods,Many parameters,5,code_sample,"public static void greet(String name, String greetingsFrom) {\n    System.out.println(""Hi "" + name + "", greetings from "" + greetingsFrom);\n}","PublicClassSpecifier:1,StringDataType:2,StringLiteral:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,StringAddition:1,StringVariable:1,ClassDefinition:1,SimpleVariable:1,ActualMethodParameter:1,"
2,Self-written methods,Many parameters,5,code_sample,"String who = ""Matt"";\nString greetings = ""Alabama"";\n\ngreet(who, greetings);\ngreet(who, greetings + "" from Nevada"");","SimpleAssignmentExpression:2,PublicClassSpecifier:1,StringDataType:3,StringLiteral:3,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:2,StringAddition:1,StringVariable:2,ClassDefinition:1,ActualMethodParameter:2,"
2,Self-written methods,Method calling another method,5,code_sample,"public static void greet(String name) {\n    System.out.println(""Hi "" + name + "", greetings from the world of methods!"");\n}\n\npublic static void greetManyTimes(String name, int times) {\n    int i = 0;\n    while ( i < times ) {\n        greet(name);\n        i++;\n    }\n\n}\n\npublic static void main(String[] args) {\n    greetManyTimes(""Anthony"", 3);\n    System.out.println(""and"");\n    greetManyTimes(""Martin"", 2);\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:1,StringVariable:2,WhileStatement:1,ClassDefinition:1,StringDataType:6,LessExpression:1,StringLiteral:4,MethodDefinition:1,IntDataType:2,VoidDataType:3,SimpleVariable:3,ArrayDataType:1,ActualMethodParameter:5,"
2,Self-written methods,Method calling another method,5,problem_39,"Printing",
2,Self-written methods,Method calling another method,5,problem_40,"Printing Like A Boss",
2,Self-written methods,Method calling another method,5,problem_41,"Guessing a number game",
2,Self-written methods,Method calling another method,5,problem_42,"A text-based user interface for the Hangman game",
3,More about methods,Methods and visibility of variables,5,code_sample,"// main program\npublic static void main(String[] args) {\n    int number = 1;\n    addThree();\n}\n\n// method\npublic static void addThree() {\n    number = number + 3;\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:2,ClassDefinition:1,SimpleVariable:1,ArrayDataType:1,"
3,More about methods,Methods and visibility of variables,5,code_sample,"// main program\npublic static void main(String[] args) {\n    int number = 1;\n    System.out.println(""Main program variable number holds the value: "" + number);\n    addThree(number);\n    System.out.println(""Main program variable number holds the value: "" + number);\n}\n\n// method\npublic static void addThree(int number) {\n    System.out.println(""Method parameter number holds the value: "" + number);\n    number = number + 3;\n    System.out.println(""Method parameter number holds the value: "" + number);\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,StringAddition:4,ClassDefinition:1,StringDataType:4,StringLiteral:4,AddExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:3,SimpleVariable:2,ArrayDataType:1,ActualMethodParameter:5,"
3,More about methods,Return values,5,code_sample,"public static int alwaysReturnTen() {\n    return 10;\n}","PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ReturnStatement:1,ClassDefinition:1,"
3,More about methods,Return values,5,code_sample,"public static void main(String[] args) {\n    int number = alwaysReturnTen();\n\n    System.out.println( ""method returned the number "" + number );\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ActualMethodParameter:1,"
3,More about methods,Return values,5,code_sample,"double number = 4 * alwaysReturnTen() + (alwaysReturnTen() / 2) - 8;\n\nSystem.out.println( ""calculation total "" + number );","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MultiplyExpression:1,StringAddition:1,ClassDefinition:1,SubtractExpression:1,StringDataType:1,DivideExpression:1,StringLiteral:1,AddExpression:1,MethodDefinition:1,VoidDataType:1,DoubleDataType:1,ActualMethodParameter:1,"
3,More about methods,Return values,5,code_sample,"public static void methodThatReturnsNothing() {\n  // method body\n}\n\npublic static int methodThatReturnsInteger() {\n  // method body, needs a return statement\n}\n\npublic static String methodThatReturnsText() {\n  // method body, needs a return statement\n}\n\npublic static double methodThatReturnsFloatingpoint() {\n  // method body, needs a return statement\n}","PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,"
3,More about methods,Return values,5,code_sample,"public static String wrongMethod() {\n    System.out.println(""I tell you that I will return a String but I do not!"");\n}","PublicClassSpecifier:1,StringDataType:1,StringLiteral:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
3,More about methods,Return values,5,code_sample,"public static int sum(int first, int second) {\n    return first + second;\n}","PublicClassSpecifier:1,PublicMethodSpecifier:1,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ReturnStatement:1,ClassDefinition:1,SimpleVariable:1,"
3,More about methods,Return values,5,code_sample,"int sumNumbers = sum(2, 7);\n// sumNumbers now holds the value 9","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
3,More about methods,Return values,5,code_sample,"public static void main(String[] args) {\n    Scanner reader = new Scanner(System.in);\n\n    System.out.print(""Type the first number: "");\n    int first = Integer.parseInt( reader.nextLine() );\n\n    System.out.print(""Type the second number: "");\n    int second = Integer.parseInt( reader.nextLine() );\n\n    System.out.print(""Total: "" + sum(first,second) );\n}\n\npublic static int sum(int first, int second) {\n    return first + second;\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringAddition:1,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:3,StringDataType:3,StringLiteral:3,AddExpression:1,MethodDefinition:1,IntDataType:3,VoidDataType:1,ReturnStatement:1,SimpleVariable:2,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:6,ObjectCreationStatement:1,"
3,More about methods,Return values,5,code_sample,"int first = 3;\nint second = 2;\n\nsum(sum(1, 2), sum(first, second));\n// 1) the inner methods are executed:\n//    sum(1, 2) = 3   and sum(first, second) = 5\n// 2) the outer method is executed:\n//    sum(3, 5) = 8","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
3,More about methods,The method's own variables,5,code_sample,"public static double average(int number1, int number2, int number3) {\n\n    int sum = number1 + number2 + number3;\n    double average = sum / 3.0;\n\n    return average;\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,DivideExpression:1,PublicMethodSpecifier:1,AddExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ReturnStatement:1,DoubleDataType:2,ClassDefinition:1,SimpleVariable:1,"
3,More about methods,The method's own variables,5,problem_43,"Sum of numbers",
3,More about methods,The method's own variables,5,problem_44,"Least",
3,More about methods,The method's own variables,5,problem_45,"Greatest",
3,More about methods,The method's own variables,5,problem_46,"Average of given numbers",
3,Strings of characters,-,6,code_sample,"String animal = ""Dog"";\n\nif( animal.equals(""Dog"") ) {\n    System.out.println(animal + "" says bow-wow"");\n} else if ( animal.equals(""Cat"") ) {\n    System.out.println(cat + "" says meow meow"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,IfElseIfStatement:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:2,StringVariable:1,ClassDefinition:1,StringDataType:5,IfStatement:1,StringLiteral:5,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:2,ActualMethodParameter:4,java.lang.String.equals:2,"
3,Strings of characters,-,6,code_sample,"String banana = ""banana"";\nString cucumber = ""cucumber"";\nString together = banana + cucumber;\n\nSystem.out.println(""The length of banana is "" + banana.length());\nSystem.out.println(""The length of  cucumber is "" + cucumber.length());\nSystem.out.println(""The word "" + together + "" length is "" + together.length());","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,StringAddition:3,StringVariable:3,ClassDefinition:1,StringDataType:6,java.lang.String.length:3,StringLiteral:5,AddExpression:1,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:2,ActualMethodParameter:3,"
3,Strings of characters,-,6,code_sample,"String word = ""Supercalifragilisticexpialidocious"";\n\nchar character = word.charAt(3);\nSystem.out.println(""The 4th character of the word is "" + character); //prints ""e""","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,StringVariable:1,CharDataType:1,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,java.lang.String.charAt:1,StringInitializationStatement:1,ObjectMethodInvocation:1,ActualMethodParameter:2,"
3,Strings of characters,-,6,code_sample,"char character = word.charAt(word.length());","SimpleAssignmentExpression:1,PublicClassSpecifier:1,java.lang.String.length:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,java.lang.String.charAt:1,CharDataType:1,ClassDefinition:1,ObjectMethodInvocation:1,ActualMethodParameter:1,"
3,Strings of characters,-,6,problem_47,"The length of a name",
3,Strings of characters,-,6,problem_48,"First character",
3,Strings of characters,-,6,problem_49,"Last character",
3,Strings of characters,-,6,problem_50,"Separating first characters",
3,Strings of characters,-,6,problem_51,"Separating characters",
3,Strings of characters,-,6,problem_52,"Reversing a name",
3,Strings of characters,Other methods for strings,6,code_sample,"String word = ""Supercalifragilisticexpialidocious"";\nSystem.out.println(word.substring(14)); //prints ""listicexpialidocious""\nSystem.out.println(word.substring(9,20)); //prints ""fragilistic""","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringVariable:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,java.lang.String.substring:2,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:2,ActualMethodParameter:2,"
3,Strings of characters,Other methods for strings,6,code_sample,"String book = ""Mary Poppins"";\nString endpart = book.substring(5);\nSystem.out.println(""Harry "" + endpart); // prints ""Harry Poppins""","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,StringVariable:2,ClassDefinition:1,StringDataType:3,StringLiteral:2,MethodDefinition:1,java.lang.String.substring:1,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:1,ActualMethodParameter:2,"
3,Strings of characters,Other methods for strings,6,code_sample,"String word = ""aesthetically"";\n\nint index = word.indexOf(""tic""); // index value will be 6\nSystem.out.println(word.substring(index)); //prints ""tically""\n\nindex = word.indexOf(""ally""); //index value will be 9\nSystem.out.println(word.substring(index)); //prints ""ally""\n\nindex = word.indexOf(""book""); // string ""aesthetically"" does not include ""book""\nSystem.out.println(index); //prints -1\nSystem.out.println(word.substring(index)); //error!","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,StringVariable:1,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,IntDataType:1,java.lang.String.substring:3,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:6,ActualMethodParameter:7,"
3,Strings of characters,Other methods for strings,6,problem_53,"First part",
3,Strings of characters,Other methods for strings,6,problem_54,"The end part",
3,Strings of characters,Other methods for strings,6,problem_55,"A word inside a word",
3,Strings of characters,Other methods for strings,6,problem_56,"Reversing text",
3,Object,-,6,code_sample,"int x = 1;\nint y = 2;\n\ny = 3*x;\n\nSystem.out.println( ""value of y now: "" + y );","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MultiplyExpression:1,StringAddition:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ActualMethodParameter:1,"
3,Object,-,6,code_sample,"String word1 = ""Programming"";\nString word2 = ""Java"";\n\nSystem.out.println( ""String ""+ word1 +"" length: "" + word1.length() );\n\nSystem.out.println( ""String ""+ word2 +"" length: "" + word2.length() );","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:2,StringVariable:2,ClassDefinition:1,StringDataType:4,java.lang.String.length:2,StringLiteral:4,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:2,ActualMethodParameter:2,"
3,Object,-,6,code_sample,"word1.length()    // String object's name is word1 and its method length() is called\nword2.length()    // String object's name is word2 and its method length() is called","PublicClassSpecifier:1,java.lang.String.length:2,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,"
3,Object,-,6,code_sample,"Scanner reader = new Scanner(System.in);","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:1,ActualMethodParameter:1,ObjectCreationStatement:1,"
3,Object,-,6,code_sample,"String banana = new String(""Banana"");\nString carrot = ""carrot"";","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringVariable:2,StringCreationStatement:1,ClassDefinition:1,StringDataType:2,StringConstructorCall:1,StringLiteral:2,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ActualMethodParameter:1,"
3,"ArrayList or an ""object container""",-,7,code_sample,"String word1;\nString word2;\nString word3;\n// ...\nString word10;","PublicClassSpecifier:1,StringDataType:4,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,StringVariable:4,ClassDefinition:1,SimpleVariable:4,"
3,"ArrayList or an ""object container""",-,7,code_sample,"import java.util.ArrayList;\n\npublic class ListProgram {\n\n    public static void main(String[] args) {\n        ArrayList<String> wordList = new ArrayList<String>();\n\n        wordList.add(""First"");\n        wordList.add(""Second"");\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:1,GenericObjectCreationStatement:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:2,MethodDefinition:1,VoidDataType:1,ObjectMethodInvocation:2,ActualMethodParameter:2,"
3,"ArrayList or an ""object container""",Methods of ArrayLists,7,code_sample,"public static void main(String[] args) {\n    ArrayList<String> teachers = new ArrayList<String>();\n\n    teachers.add(""Anthony"");\n    teachers.add(""Barto"");\n    teachers.add(""Paul"");\n    teachers.add(""John"");\n    teachers.add(""Martin"");\n    teachers.add(""Matt"");\n\n    System.out.println(""the number of teachers "" + teachers.size() );\n\n    System.out.println(""first teacher on the list "" + teachers.get(0));\n    System.out.println(""third teacher on the list "" + teachers.get(2));\n\n    teachers.remove(""Barto"");\n\n    if (teachers.contains(""Barto"")) {\n        System.out.println(""Barto is on the teachers list"");\n    } else {\n        System.out.println(""Barto is not on the teachers list"");\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:5,StringAddition:3,IfElseStatement:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,StringDataType:13,StringLiteral:13,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:11,ActualMethodParameter:13,ArrayInitializer:1,"
3,"ArrayList or an ""object container""",Going through an ArrayList,7,code_sample,"public static void main(String[] args) {\n    ArrayList<String> teachers = new ArrayList<String>();\n\n    teachers.add(""Anthony"");\n    teachers.add(""Paul"");\n    teachers.add(""John"");\n    teachers.add(""Martin"");\n\n    System.out.println( teachers.get(0) );\n    System.out.println( teachers.get(1) );\n    System.out.println( teachers.get(2) );\n    System.out.println( teachers.get(3) );\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:8,ActualMethodParameter:8,ArrayInitializer:1,"
3,"ArrayList or an ""object container""",Going through an ArrayList,7,code_sample,"public static void main(String[] args) {\n    ArrayList<String> teachers = new ArrayList<String>();\n\n    teachers.add(""Anthony"");\n    teachers.add(""Paul"");\n    teachers.add(""John"");\n    teachers.add(""Martin"");\n    teachers.add(""Matt"");\n\n    int place = 0;\n    System.out.println( teachers.get(place) );\n    place++;\n    System.out.println( teachers.get(place) );  // place = 1\n    place++;\n    System.out.println( teachers.get(place) );  // place = 2\n    place++;\n    System.out.println( teachers.get(place) );  // place = 3\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:3,PublicMethodSpecifier:1,java.lang.System.out.println:4,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:9,ActualMethodParameter:9,ArrayInitializer:1,"
3,"ArrayList or an ""object container""",Going through an ArrayList,7,code_sample,"public static void main(String[] args) {\n    ArrayList<String> teachers = new ArrayList<String>();\n\n    teachers.add(""Anthony"");\n    teachers.add(""Paul"");\n    teachers.add(""John"");\n    teachers.add(""Martin"");\n    teachers.add(""Matt"");\n\n    int place = 0;\n    while ( place < teachers.size() )  // remember why place <= teachers.size() doesn't work?\n        System.out.println( teachers.get(place) );\n        place++;\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,java.util.ArrayList:1,GenericObjectCreationStatement:1,StaticMethodSpecifier:1,StringDataType:6,LessExpression:1,StringLiteral:5,MethodDefinition:1,IntDataType:1,VoidDataType:1,ObjectMethodInvocation:7,ActualMethodParameter:6,"
3,"ArrayList or an ""object container""",for-each,7,code_sample,"public static void main(String[] args) {\n    ArrayList<String> teachers = new ArrayList<String>();\n\n    teachers.add(""Anthony"");\n    teachers.add(""Paul"");\n    teachers.add(""John"");\n    teachers.add(""Martin"");\n    teachers.add(""Matt"");\n\n    for (String teacher : teachers) {\n        System.out.println( teacher );\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:5,ActualMethodParameter:6,ArrayInitializer:1,ForEachStatement:1,"
3,"ArrayList or an ""object container""",for-each,7,problem_57,"Words",
3,"ArrayList or an ""object container""",for-each,7,problem_58,"Recurring word",
3,"ArrayList or an ""object container""","Ordering, reversing and shuffling a list",7,code_sample,"public static void main(String[] args) {\n    ArrayList<String> teachers = new ArrayList<String>();\n\n    // ...\n\n    Collections.sort(teachers);\n\n    for (String teacher : teachers) {\n        System.out.println( teacher );\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:2,ArrayInitializer:1,ForEachStatement:1,"
3,"ArrayList or an ""object container""","Ordering, reversing and shuffling a list",7,problem_59,"Words in reverse order",
3,"ArrayList or an ""object container""","Ordering, reversing and shuffling a list",7,problem_60,"Words in alphabetical order",
3,"ArrayList or an ""object container""",ArrayList as a parameter for a method,7,code_sample,"public static void print(ArrayList<String> list) {\n    for (String word : list) {\n        System.out.println( word );\n    }\n}\n\npublic static void main(String[] args) {\n    ArrayList<String> list = new ArrayList<String>();\n    list.add(""Java"");\n    list.add(""Python"");\n    list.add(""Ruby"");\n    list.add(""C++"");\n\n    print(list);\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,GreaterExpression:1,ClassDefinition:1,java.util.ArrayList:1,"
3,"ArrayList or an ""object container""",ArrayList as a parameter for a method,7,code_sample,"public static void print(ArrayList<String> printed) {\n    for (String word : printed) {\n        System.out.println( word );\n    }\n}\n\npublic static void main(String[] args) {\n    ArrayList<String> programmingLanguages = new ArrayList<String>();\n    programmingLanguages.add(""Java"");\n    programmingLanguages.add(""Python"");\n    programmingLanguages.add(""Ruby"");\n    programmingLanguages.add(""C++"");\n\n    ArrayList<String> countries = new ArrayList<String>();\n    countries.add(""Finland"");\n    countries.add(""Sweden"");\n    countries.add(""Norway"");\n\n    print(programmingLanguages);    // method is given the list programmingLanguages\nas a parameter\n\n   print(countries);                 //  method is given the list countries as a parameter\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,GreaterExpression:1,ClassDefinition:1,java.util.ArrayList:1,"
3,"ArrayList or an ""object container""",ArrayList as a parameter for a method,7,problem_61,"Amount of items in a list",
3,"ArrayList or an ""object container""",ArrayList as a parameter for a method,7,problem_62,"Remove last",
3,"ArrayList or an ""object container""",Numbers in an ArrayList,7,code_sample,"public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n\n    numbers.add(4);\n    numbers.add(8);\n\n    // tries to remove the number from the index 4, does not work as expected!\n    numbers.remove(4);\n\n    // this removes the number 4 from the list\n    numbers.remove(Integer.valueOf(4));\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:4,ActualMethodParameter:4,ArrayInitializer:1,"
3,"ArrayList or an ""object container""",Numbers in an ArrayList,7,code_sample,"ArrayList<Double> doubles = new ArrayList<Double>();\n        ArrayList<Character> characters = new ArrayList<Character>();","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,java.util.ArrayList:2,GenericObjectCreationStatement:2,"
3,"ArrayList or an ""object container""",Numbers in an ArrayList,7,problem_63,"Sum of the numbers",
3,"ArrayList or an ""object container""",Numbers in an ArrayList,7,problem_64,"Average of numbers",
3,"ArrayList or an ""object container""",ArrayList as return value of a method,7,code_sample,"public class Main {\n\n    public static ArrayList<Integer> addNumbersToList(int num1, int num2, int num3){\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\n        list.add(num1);\n        list.add(num2);\n        list.add(num3);\n\n        return list;\n    }\n\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = addNumbersToList(3, 5, 2);\n\n        for (int number : numbers) {\n            System.out.println( number );\n        }\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ClassDefinition:1,FormalMethodParameter:2,java.util.ArrayList:2,GenericObjectCreationStatement:1,StaticMethodSpecifier:2,MethodDefinition:2,IntDataType:2,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:3,ActualMethodParameter:5,ForEachStatement:1,"
3,"ArrayList or an ""object container""",ArrayList as return value of a method,7,problem_65,"The lengths of the Strings",
3,"ArrayList or an ""object container""",ArrayList as return value of a method,7,problem_66,"The Greatest",
3,"ArrayList or an ""object container""",ArrayList as return value of a method,7,problem_67,"Variance",
3,Using truth values,-,7,code_sample,"int num1 = 1;\nint num2 = 5;\n\nboolean firstGreater = true;\n\nif (num1 <= num2) {\n    firstGreater = false;\n}\n\nif (firstGreater==true) {\n    System.out.println(""num1 is greater"");\n} else {\n    System.out.println(""num1 was not greater"");\n}","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,EqualExpression:1,True:2,False:1,ClassDefinition:1,LessEqualExpression:1,IfStatement:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,BooleanDataType:1,ActualMethodParameter:2,"
3,Using truth values,-,7,code_sample,"if (firstGreater) {  // means the same as firstGreater==true\n    System.out.println(""num1 was greater"");\n} else {\n    System.out.println(""num1 was not greater"");\n}","PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,MethodDefinition:1,VoidDataType:1,IfElseStatement:1,ClassDefinition:1,ActualMethodParameter:2,"
3,Using truth values,-,7,code_sample,"if (!firstGreater) {  // means the same as firstGreater==false\n    System.out.println(""num1 was not greater"");\n} else {\n    System.out.println(""num1 was greater"");\n}","PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,MethodDefinition:1,VoidDataType:1,IfElseStatement:1,NotExpression:1,ClassDefinition:1,ActualMethodParameter:2,"
3,Using truth values,Methods that return a truth value,7,code_sample,"public static boolean allPositive(ArrayList<Integer> numbers) {\n    boolean noNegative = true;\n\n    for (int number : numbers) {\n        if (number < 0) {\n            noNegative = false;\n        }\n    }\n\n    // if one of the numbers on the list had a value that is below zero, noNegatives becomes false.\n\n    return noNegative;\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,True:1,False:1,ClassDefinition:1,java.util.ArrayList:1,LessExpression:2,IfStatement:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,ReturnStatement:1,BooleanDataType:1,ForEachStatement:1,"
3,Using truth values,Methods that return a truth value,7,code_sample,"public static void main(String[] args) {\n\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(3);\n    numbers.add(1);\n    numbers.add(-1);\n\n    boolean result = allPositive(numbers);\n\n    if (result) {  // means the same as result == true\n        System.out.println(""all numbers are positive"");\n    } else {\n        System.out.println(""there is at least one negative number"");\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:3,BooleanDataType:1,ActualMethodParameter:6,ArrayInitializer:1,"
3,Using truth values,Methods that return a truth value,7,code_sample,"ArrayList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(4);\nnumbers.add(7);\nnumbers.add(12);\nnumbers.add(9);\n\nif (allPositive(numbers)) {\n    System.out.println(""all numbers are positive"");\n} else {\n    System.out.println(""there is at least one negative number"");\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,ClassDefinition:1,java.util.ArrayList:1,GenericObjectCreationStatement:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,ObjectMethodInvocation:4,ActualMethodParameter:7,"
3,Using truth values,The return command and ending a method,7,code_sample,"public static boolean allPositive(ArrayList<Integer> numbers) {\n    for (int number : numbers) {\n        if (number < 0) {\n            return false;\n        }\n    }\n\n    // if the execution reached this far, no negative numbers were found\n    // so we return true\n    return true;\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,GreaterExpression:1,ClassDefinition:1,BooleanDataType:1,java.util.ArrayList:1,"
3,Using truth values,The return command and ending a method,7,problem_68,"Is the number more than once in the list?",
3,Using truth values,The return command and ending a method,7,problem_69,"Palindrome",
4,Methods and copying parameters,-,7,code_sample,"public static void main(String[] args) {\n    int number = 1;\n    addThree();\n    System.out.println(""Main program variable number holds the value: "" + number);\n}\n\npublic static void addThree() {\n    number = number + 3;\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ActualMethodParameter:1,"
4,Methods and copying parameters,-,7,code_sample,"public static void main(String[] args) {\n    int number = 1;\n    addThree(number);\n    System.out.println(number);  // prints 1, the value did not change\n}\n\npublic static addThree(int number) {\n    number = number + 3;\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,ArrayDataType:1,ActualMethodParameter:3,"
4,Methods and copying parameters,-,7,code_sample,"public static void main(String[] args) {\n    int number = 1;\n    number = addThreeAndReturn(number);\n\n    System.out.println(number);  // prints 4, because number has the method return value as its value\n}\n\npublic static int addThreeAndReturn(int number) {\n    number = number + 3;\n\n    return number;\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,AddExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ReturnStatement:1,SimpleVariable:2,ArrayDataType:1,ActualMethodParameter:2,"
4,Methods and copying parameters,-,7,code_sample,"public static void main(String[] args) {\n    int number = 1;\n    number = addThreeAndReturn(number);\n\n    System.out.println(number);\n}\n\npublic static int addThreeAndReturn(int incremented) {\n    incremented = incremented + 3;\n\n    return incremented;\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,AddExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ReturnStatement:1,SimpleVariable:2,ArrayDataType:1,ActualMethodParameter:2,"
4,Methods and copying parameters,-,7,code_sample,"public static void removeFirst(ArrayList<Integer> list) {\n    list.remove(0); // removes the number from index 0\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,GreaterExpression:1,ClassDefinition:1,ObjectMethodInvocation:1,ActualMethodParameter:1,java.util.ArrayList:1,"
4,Methods and copying parameters,-,7,code_sample,"public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(4);\n    numbers.add(3);\n    numbers.add(7);\n    numbers.add(3);\n\n    System.out.println(numbers); // prints [4,3,7,3]\n\n    removeFirst(numbers);\n\n    System.out.println(numbers); // prints [3,7,3]\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:4,ActualMethodParameter:7,ArrayInitializer:1,"
4,Methods and copying parameters,-,7,problem_70,"Combining ArrayLists",
4,Methods and copying parameters,-,7,problem_71,"Smart combining",
4,Instructions on code-writing and problem solving,"Well indented and ""breathing"" code",7,code_sample,"public static void main(String[] args) {\nArrayList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(4);\nnumbers.add(3);\nnumbers.add(7);\nnumbers.add(3);\nSystem.out.println(""The numbers in the beginning:"");\nfor (int number : numbers) {\nSystem.out.println(number);\n}\nwhile (numbers.contains(Integer.valueOf(3))) {\nnumbers.remove(Integer.valueOf(3));\n}\nSystem.out.println(""The numbers after removal:"");\nfor (int number : numbers) {\nSystem.out.println(number);\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,java.util.ArrayList:1,GenericObjectCreationStatement:1,StaticMethodSpecifier:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,ObjectMethodInvocation:6,ActualMethodParameter:10,ForEachStatement:2,"
4,Instructions on code-writing and problem solving,"Well indented and ""breathing"" code",7,code_sample,"public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(4);\n    numbers.add(3);\n    numbers.add(7);\n    numbers.add(3);\n\n    System.out.println(""The numbers in the beginning:"");\n\n    // here we print numbers\n    for (int number : numbers) {\n        System.out.println(number);\n    }\n\n    // checks if the list contains the number 3\n    while (numbers.contains(Integer.valueOf(3))) {\n        numbers.remove(Integer.valueOf(3));  // if yes, it is removed\n    }\n    // we use a while structure to get all the threes removed!\n\n    System.out.println(""The numbers after removal:"");\n\n     // here we print numbers\n    for (int number : numbers) {\n        System.out.println(number);\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,WhileStatement:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:6,ActualMethodParameter:10,ArrayInitializer:1,ForEachStatement:2,"
4,Instructions on code-writing and problem solving,Getting rid of copy-paste with methods,7,code_sample,"public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(4);\n    numbers.add(3);\n    numbers.add(7);\n    numbers.add(3);\n\n    System.out.println(""The numbers in the beginning:"");\n\n    // here we print numbers\n    print(numbers);\n\n    while (numbers.contains(Integer.valueOf(3))) {\n        numbers.remove(Integer.valueOf(3));\n    }\n\n    System.out.println(""The numbers after removal:"");\n\n    // here we print numbers\n    print(numbers);\n}\n\npublic static void print(ArrayList<Integer> numbers) {\n    for (int number : numbers) {\n        System.out.println( number );\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,WhileStatement:1,ClassDefinition:1,java.util.ArrayList:2,ArrayInitializationStatement:1,LessExpression:2,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,VoidDataType:2,GreaterExpression:2,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:6,ActualMethodParameter:10,ArrayInitializer:1,"
4,Instructions on code-writing and problem solving,Slicing separate tasks into methods with descriptive names,7,code_sample,"public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(4);\n    numbers.add(3);\n    numbers.add(7);\n    numbers.add(3);\n\n    System.out.println(""The numbers in the beginning:"");\n    print(numbers);\n\n    remove(numbers, 3);\n\n    System.out.println(""The numbers after removal:"");\n    print(numbers);\n}\n\npublic static void print(ArrayList<Integer> numbers) {\n    for (int number : numbers) {\n        System.out.println( number );\n    }\n}\n\npublic static void remove(ArrayList<Integer> numbers, int removed) {\n    while (numbers.contains(Integer.valueOf(removed))) {\n        numbers.remove(Integer.valueOf(removed));\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,java.util.ArrayList:2,ArrayInitializationStatement:1,LessExpression:2,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,VoidDataType:2,GreaterExpression:2,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:4,ActualMethodParameter:9,ArrayInitializer:1,"
4,Object-oriented programming,Object,8,code_sample,"public static void main(String[] args) {\n    ArrayList<String> cities = new ArrayList<String>();\n    ArrayList<String> countries = new ArrayList<String>();\n\n    countries.add(""Finland"");\n    countries.add(""Germany"");\n    countries.add(""Netherlands"");\n\n    cities.add(""Berliini"");\n    cities.add(""Nijmegen"");\n    cities.add(""Turku"");\n    cities.add(""Helsinki"");\n\n    System.out.println(""number of countries "" + countries.size() );\n    System.out.println(""number of cities "" + cities.size() );\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:2,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:2,StringDataType:9,StringLiteral:9,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:2,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:9,ActualMethodParameter:9,ArrayInitializer:1,"
4,Object-oriented programming,Object,8,code_sample,"String text = ""some text"";       // abbreviated way of creating a String\nString anotherText = new String(""more text"");","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringVariable:2,StringCreationStatement:1,ClassDefinition:1,StringDataType:2,StringConstructorCall:1,StringLiteral:2,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ActualMethodParameter:1,"
4,Object-oriented programming,A class and its objects,8,code_sample,"Scanner reader = new Scanner(System.in);","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:1,ActualMethodParameter:1,ObjectCreationStatement:1,"
4,Object-oriented programming,A class and its objects,8,problem_72,"Accounts",
4,Object-oriented programming,Defining your own class - object variables,8,code_sample,"public class Main {\n\n    public static void main(String[] args) {\n    }\n\n}","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
4,Object-oriented programming,Defining your own class - object variables,8,code_sample,"public class Person {\n\n}","PublicClassSpecifier:1,ClassDefinition:1,"
4,Object-oriented programming,Defining your own class - object variables,8,code_sample,"public class Person {\n    private String name;\n    private int age;\n}","PublicClassSpecifier:1,StringDataType:1,IntDataType:1,InstanceField:2,StringVariable:1,ClassDefinition:1,SimpleVariable:2,PrivateFieldSpecifier:2,"
4,Object-oriented programming,"Defining your own class - constructor, or ""formatting the state""",8,code_sample,"public static void main(String[] args) {\n        Person bob = new Person(""Bob"");\n        // ...\n    }","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ActualMethodParameter:1,ObjectCreationStatement:1,"
4,Object-oriented programming,"Defining your own class - constructor, or ""formatting the state""",8,code_sample,"public class Person {\n    private String name;\n    private int age;\n\n    public Person(String initialName) {\n        this.age = 0;\n        this.name = initialName;\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,ConstructorDefinition:1,StringVariable:1,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:1,InstanceFieldInvocation:2,IntDataType:1,InstanceField:2,SimpleVariable:2,PrivateFieldSpecifier:2,"
4,Object-oriented programming,Class definition - methods,8,code_sample,"public class Person {\n    private String name;\n    private int age;\n\n    public Person(String nameAtStart) {\n        this.age = 0;\n        this.name = nameAtStart;\n    }\n\n    public void printPerson() {\n        System.out.println(this.name + "", age "" + this.age + "" years"");\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ConstructorDefinition:1,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:3,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:2,InstanceFieldInvocation:3,StringLiteral:1,IntDataType:1,MethodDefinition:1,InstanceField:2,VoidDataType:1,SimpleVariable:2,PrivateFieldSpecifier:2,ActualMethodParameter:1,"
4,Object-oriented programming,Class definition - methods,8,code_sample,"public class Main {\n\n    public static void main(String[] args) {\n        Person pekka = new Person(""Pekka"");\n        Person brian = new Person(""Brian"");\n        Person martin = new Person(""Martin"");\n\n        pekka.printPerson();\n        brian.printPerson();\n        martin.printPerson();\n    }\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,VoidDataType:1,ConstructorCall:3,ObjectMethodInvocation:3,ActualMethodParameter:3,ObjectCreationStatement:3,"
4,Object-oriented programming,Class definition - methods,8,problem_73,"Product",
4,Object-oriented programming,More methods,8,code_sample,"public class Person {\n    // ...\n\n    public void becomeOlder() {\n        this.age++;;    // same as this.age = this.age + 1;\n    }\n}","PublicClassSpecifier:1,PostIncrementExpression:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ThisReference:1,"
4,Object-oriented programming,More methods,8,code_sample,"public class Main {\n\n    public static void main(String[] args) {\n        Person pekka = new Person(""Pekka"");\n        Person andrew = new Person(""Andrew"");\n\n        pekka.printPerson();\n        andrew.printPerson();\n\n        System.out.println("""");\n\n        pekka.becomeOlder();\n        pekka.becomeOlder();\n\n        pekka.printPerson();\n        andrew.printPerson();\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:6,ActualMethodParameter:3,ObjectCreationStatement:2,"
4,Object-oriented programming,More methods,8,code_sample,"public class Person {\n    // ...\n\n    public int getAge() {\n        return this.age;\n    }\n}","PublicClassSpecifier:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,ReturnStatement:1,ClassDefinition:1,ThisReference:1,"
4,Object-oriented programming,More methods,8,code_sample,"public class Main {\n\n    public static void main(String[] args) {\n        Person pekka = new Person(""Pekka"");\n        Person andrew = new Person(""Andrew"");\n\n        pekka.becomeOlder();\n        pekka.becomeOlder();\n\n        andrew.becomeOlder();\n\n        System.out.println( ""Age of Pekka: ""+pekka.getAge() );\n        System.out.println( ""Age of Andrew: ""+andrew.getAge() );\n\n        int total = pekka.getAge() + andrew.getAge();\n\n        System.out.println( ""Pekka and Andrew total of ""+total+ "" years old"" );\n    }\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,StringAddition:3,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:5,StringLiteral:5,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:6,ActualMethodParameter:5,ObjectCreationStatement:2,"
4,Object-oriented programming,More methods,8,problem_74,"Multiplier",
4,Object-oriented programming,More methods,8,problem_75,"Decreasing counter",
4,Object-oriented programming,More methods,8,problem_76,"Menu",
4,Object-oriented programming,The Person class grows,8,code_sample,"public class Person {\n    private String name;\n    private int age;\n\n    public Person(String initialName) {\n        this.age = 0;\n        this.name = initialName;\n    }\n\n    public void printPerson() {\n        System.out.println(this.name + "", age "" + this.age + "" years"");\n    }\n\n    public void becomeOlder() {\n        this.age = this.age + 1;\n    }\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ConstructorDefinition:1,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:4,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:2,InstanceFieldInvocation:4,StringLiteral:1,AddExpression:1,IntDataType:1,MethodDefinition:2,InstanceField:2,VoidDataType:2,SimpleVariable:2,PrivateFieldSpecifier:2,ActualMethodParameter:1,"
4,Object-oriented programming,The Person class grows,8,code_sample,"public class Person {\n    // ...\n\n    public boolean isAdult(){\n        if ( this.age < 18 ) {\n            return false;\n        }\n\n        return true;\n    }\n\n   /*\n      note that the method could also be written like this:\n  \n      public boolean isAdult(){\n        return this.age >= 18;\n      }\n   */\n}","PublicClassSpecifier:1,IfStatement:1,LessExpression:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,ReturnStatement:2,True:1,False:1,ClassDefinition:1,BooleanDataType:1,ThisReference:1,"
4,Object-oriented programming,The Person class grows,8,code_sample,"public static void main(String[] args) {\n        Person bob = new Person(""Bob"");\n        Person andy = new Person(""Andy"");\n\n        int i = 0;\n        while ( i < 30 ) {\n            bob.becomeOlder();\n            i++;\n        }\n\n        andy.becomeOlder();\n\n        System.out.println("""");\n\n        if ( andy.isAdult() ) {\n            System.out.print(""adult: "");\n            andy.printPerson();\n        } else {\n            System.out.print(""minor: "");\n            andy.printPerson();\n        }\n\n        if ( bob.isAdult() ) {\n            System.out.print(""adult: "");\n            bob.printPerson();\n        } else {\n            System.out.print(""minor: "");\n            bob.printPerson();\n        }\n    }","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,IfElseStatement:2,WhileStatement:1,ClassDefinition:1,java.lang.System.out.print:4,StringDataType:7,LessExpression:1,StringLiteral:7,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:8,ActualMethodParameter:7,ObjectCreationStatement:2,"
4,Object-oriented programming,The Person class grows,8,code_sample,"public class Person {\n    // ...\n\n    public String getName() {\n        return this.name;\n    }\n}","PublicClassSpecifier:1,StringDataType:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,ReturnStatement:1,ClassDefinition:1,ThisReference:1,"
4,Object-oriented programming,The Person class grows,8,code_sample,"public static void main(String[] args) {\n        Person bob = new Person(""bob"");\n        Person andy = new Person(""andy"");\n\n        int i = 0;\n        while ( i < 30 ) {\n            bob.becomeOlder();\n            i++;\n        }\n\n        andy.becomeOlder();\n\n        System.out.println("""");\n\n        if ( andy.isAdult() ) {\n            System.out.println( andy.getName() + "" is an adult"" );\n        } else {\n            System.out.println( andy.getName() + "" is a minor"" );\n        }\n\n        if ( bob.isAdult() ) {\n            System.out.println( bob.getName() + "" is an adult"" );\n        } else {\n            System.out.println( bob.getName() + "" is a minor"" );\n        }\n    }","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:5,IfElseStatement:2,StringAddition:4,WhileStatement:1,ClassDefinition:1,StringDataType:7,LessExpression:1,StringLiteral:7,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:8,ActualMethodParameter:7,ObjectCreationStatement:2,"
4,Object-oriented programming,toString,8,code_sample,"public class Person {\n    // ...\n\n    public String toString() {\n        return this.name + "", age "" + this.age + "" years"";\n    }\n}","PublicClassSpecifier:1,StringDataType:2,InstanceFieldInvocation:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,ReturnStatement:1,StringAddition:1,OverridingToString:1,ClassDefinition:1,ThisReference:1,"
4,Object-oriented programming,toString,8,code_sample,"public static void main(String[] args) {\n        Person bob = new Person(""Bob"");\n        Person andy = new Person(""Andy"");\n\n        int i = 0;\n        while ( i < 30 ) {\n            bob.becomeOlder();\n            i++;\n        }\n\n        andy.becomeOlder();\n\n        System.out.println( andy ); // same as System.out.println( andy.toString() ); \n        System.out.println( bob ); // same as System.out.println( bob.toString() ); \n    }","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,WhileStatement:1,ClassDefinition:1,StringDataType:2,LessExpression:1,StringLiteral:2,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:2,ActualMethodParameter:4,ObjectCreationStatement:2,"
4,Object-oriented programming,toString,8,code_sample,"System.out.println( andy );","PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,"
4,Object-oriented programming,toString,8,code_sample,"System.out.println( andy.toString() );","PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ObjectMethodInvocation:1,ActualMethodParameter:1,"
4,Object-oriented programming,toString,8,problem_77,"Lyyra-card",
4,Object-oriented programming,More methods,8,code_sample,"public class Person {\n    private String name;\n    private int age;\n    private int weight;\n    private int height;\n\n    public Person(String initialName) {\n        this.age = 0;\n        this.name = initialName;\n        this.weight = 0;\n        this.height = 0;\n    }\n\n    public void setHeight(int newHeight) {\n        this.height = newHeight;\n    }\n\n    public void setWeight(int newWeight) {\n        this.weight = newWeight;\n    }\n\n    public double bodyMassIndex(){\n        double heightDividedByHundred = this.height / 100.0;\n        return this.weight / ( heightDividedByHundred * heightDividedByHundred );\n    }\n\n    // ...\n}","SimpleAssignmentExpression:7,PublicClassSpecifier:1,PublicMethodSpecifier:3,MultiplyExpression:1,ConstructorDefinition:1,StringVariable:1,ClassDefinition:1,ThisReference:8,PublicConstructorSpecifier:1,FormalMethodParameter:3,StringDataType:1,InstanceFieldInvocation:8,DivideExpression:2,IntDataType:5,MethodDefinition:3,InstanceField:4,VoidDataType:2,ReturnStatement:1,DoubleDataType:2,SimpleVariable:4,PrivateFieldSpecifier:4,"
4,Object-oriented programming,More methods,8,code_sample,"public static void main(String[] args) {\n    Person matti = new Person(""Matti"");\n    Person john = new Person(""John"");\n\n    matti.setHeight(180);\n    matti.setWeight(86);\n\n    john.setHeight(175);\n    john.setWeight(64);\n\n    System.out.println(matti.getName() + "", body mass index: "" + matti.bodyMassIndex());\n    System.out.println(john.getName() + "", body mass index: "" + john.bodyMassIndex());\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:2,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:6,ActualMethodParameter:8,ObjectCreationStatement:2,"
4,Object-oriented programming,Object variable and parameter with identical name,8,code_sample,"public void setHeight(int newHeight) {\n    this.height = newHeight;\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,ThisReference:1,"
4,Object-oriented programming,Object variable and parameter with identical name,8,code_sample,"public void setHeight(int height) {\n    this.height = height;\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,ThisReference:1,"
4,Object-oriented programming,Object variable and parameter with identical name,8,code_sample,"public void setHeight(int height) {\n    // DOES NOT WORK!\n    height = height;\n    // this just assigns the value of the parameter to the parameter itself\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,"
4,Object-oriented programming,Contolling the number of decimals when printing a float,8,code_sample,"System.out.println(matti.getName() + "", body mass index: "" + String.format( ""%.2f"", matti.bodyMassIndex()));\nSystem.out.println(john.getName() + "", body mass index: "" + String.format( ""%.2f"", john.bodyMassIndex()));","PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,MethodDefinition:1,VoidDataType:1,StringAddition:2,ClassDefinition:1,ObjectMethodInvocation:2,ActualMethodParameter:2,"
4,Object-oriented programming,Contolling the number of decimals when printing a float,8,problem_78,"Clock using a counter",
4,Object-oriented programming,Calling other methods within an object,8,code_sample,"public String toString() {\n    return this.name + "", age "" + this.age + "" years, my body mass index is "" + this.bodyMassIndex();\n}","PublicClassSpecifier:1,StringDataType:1,InstanceFieldInvocation:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ReturnStatement:1,StringAddition:1,ClassDefinition:1,ThisReference:1,ObjectMethodInvocation:1,"
4,Object-oriented programming,Calling other methods within an object,8,code_sample,"public String toString() {\n    return this.name + "", age "" + this.age + "" years, my body mass index is "" + bodyMassIndex();\n}","PublicClassSpecifier:1,StringDataType:1,InstanceFieldInvocation:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ReturnStatement:1,StringAddition:1,ClassDefinition:1,ThisReference:1,"
4,Object-oriented programming,Calling other methods within an object,8,problem_79,"NumberStatistics",
4,Randomness,-,8,code_sample,"import java.util.Random;\n\npublic class Randomizing {\n    public static void main(String[] args) {\n        Random randomizer = new Random(); // creates a random number generator\n        int i = 0;\n\n        while (i < 10) {\n            // Generates and prints out a new random number on each round of the loop\n            System.out.println(randomizer.nextInt(10));\n            i++;\n        }\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,LessExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:1,ObjectCreationStatement:1,"
4,Randomness,-,8,code_sample,"import java.util.ArrayList;\nimport java.util.Random;\n\npublic class WeatherForecaster {\n    private Random random;\n\n    public WeatherForecaster() {\n        this.random = new Random();\n    }\n\n    public String forecastWeather() {\n        double probability = this.random.nextDouble();\n\n        if (probability <= 0.1) {\n            return ""Sleet"";\n        } else if (probability <= 0.4) { // 0.1 + 0.3\n            return ""Snow"";\n        } else { // the rest, 1.0 - 0.4 = 0.6\n            return ""Sunny"";\n        }\n    }\n\n    public int forecastTemperature() {\n        return (int) ( 4 * this.random.nextGaussian() - 3 );\n    }\n}","IfElseIfStatement:1,ConstructorDefinition:1,ImportStatement:2,ClassDefinition:1,java.util.ArrayList:1,LessEqualExpression:2,SubtractExpression:1,StringDataType:4,MethodDefinition:2,InstanceField:1,ReturnStatement:4,SimpleVariable:1,ConstructorCall:1,SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,MultiplyExpression:1,IfElseStatement:1,ThisReference:3,PublicConstructorSpecifier:1,ExplicitTypeCasting:1,InstanceFieldInvocation:3,StringLiteral:3,IntDataType:2,DoubleDataType:1,ObjectMethodInvocation:2,PrivateFieldSpecifier:1,ObjectCreationStatement:1,"
4,Randomness,-,8,code_sample,"public int forecastTemperature() {\n    return (int) ( 4 * this.random.nextGaussian() - 3 );\n}","PublicClassSpecifier:1,PublicMethodSpecifier:1,MultiplyExpression:1,ClassDefinition:1,ThisReference:1,SubtractExpression:1,ExplicitTypeCasting:1,InstanceFieldInvocation:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:1,"
4,Randomness,-,8,code_sample,"public class Program {\n\n    public static void main(String[] args) {\n        WeatherForecaster forecaster = new WeatherForecaster();\n\n        // Use a list to help you organise things\n        ArrayList<String> days = new ArrayList<String>();\n        Collections.addAll(days, ""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat"", ""Sun"");\n\n        System.out.println(""Weather forecast for the next week:"");\n        for(String day : days) {\n            String weatherForecast = forecaster.forecastWeather();\n            int temperatureForecast = forecaster.forecastTemperature();\n\n            System.out.println(day + "": "" + weatherForecast + "" "" + temperatureForecast + "" degrees."");\n        }\n    }\n}","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:1,StringVariable:1,ClassDefinition:1,FormalMethodParameter:1,java.util.ArrayList:1,GenericObjectCreationStatement:1,StaticMethodSpecifier:1,StringDataType:5,StringLiteral:3,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:3,ObjectCreationStatement:1,ForEachStatement:1,"
4,Randomness,-,8,problem_80,"Rolling the dice",
4,Randomness,-,8,problem_81,"Password randomizer",
4,Randomness,-,8,problem_82,"Lottery",
4,Randomness,-,8,problem_83,"Game logic for Hangman",
5,More about objects and classes,Multiple constructors,8,code_sample,"public class Person {\n\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n\n     public Person(String name) {\n        this.name = name;\n        this.age = 0;\n        this.weight = 0;\n        this.height = 0;\n    }\n\n    public void printPerson() {\n        System.out.println(this.name + "" I am "" + this.age + "" years old"");\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public boolean adult(){\n        if ( this.age < 18 ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public double weightIndex(){\n        double heightInMeters = this.height/100.0;\n\n        return this.weight / (heightInMeters*heightInMeters);\n    }\n\n    public String toString(){\n        return this.name + "" I am "" + this.age + "" years old, my weight index is "" + this.weightindex();\n    }\n\n    public void setHeight(int height){\n        this.height = height;\n    }\n\n    public int getHeight(){\n        return this.height;\n    }\n\n    public int getWeight() {\n        return this.weight;\n    }\n\n    public void setWeight(int weight) {\n        this.weight = weight;\n    }\n\n    public String getName(){\n        return this.name;\n    }\n}","ConstructorDefinition:1,StringAddition:2,True:1,False:1,ClassDefinition:1,FormalMethodParameter:3,StringDataType:5,IfStatement:1,LessExpression:1,MethodDefinition:10,InstanceField:4,ReturnStatement:7,SimpleVariable:4,BooleanDataType:1,SimpleAssignmentExpression:7,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:10,java.lang.System.out.println:1,MultiplyExpression:1,StringVariable:1,ThisReference:15,PublicConstructorSpecifier:1,InstanceFieldInvocation:15,DivideExpression:2,StringLiteral:2,IntDataType:7,VoidDataType:4,DoubleDataType:2,OverridingToString:1,ObjectMethodInvocation:1,PrivateFieldSpecifier:4,ActualMethodParameter:1,"
5,More about objects and classes,Multiple constructors,8,code_sample,"public Person(String name) {\n    this.name = name;\n    this.age = 0;\n    this.weight = 0;\n    this.height = 0;\n}","SimpleAssignmentExpression:4,PublicClassSpecifier:1,ObjectVariable:1,InstanceFieldInvocation:4,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,ThisReference:4,"
5,More about objects and classes,Multiple constructors,8,code_sample,"public Person(String name) {\n    this.name = name;\n    this.age = 0;\n    this.weight = 0;\n    this.height = 0;\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n    this.weight = 0;\n    this.height = 0;\n}","SimpleAssignmentExpression:8,PublicClassSpecifier:1,ObjectVariable:2,InstanceFieldInvocation:8,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:2,ThisReference:8,"
5,More about objects and classes,Multiple constructors,8,code_sample,"public static void main(String[] args) {\n    Person pekka = new Person(""Pekka"", 24);\n    Person esko = new Person(""Esko"");\n\n    System.out.println( pekka );\n    System.out.println( esko );\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ActualMethodParameter:4,ObjectCreationStatement:2,"
5,More about objects and classes,Calling your own constructor,8,code_sample,"public Person(String name) {\n    this(name, 0);  // run here the other constructor's code and set the age parameter to 0\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n    this.weight = 0;\n    this.height = 0;\n}","SimpleAssignmentExpression:4,PublicClassSpecifier:1,ObjectVariable:2,InstanceFieldInvocation:4,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:2,ThisReference:4,"
5,More about objects and classes,Overloading a method,8,code_sample,"public void becomeOlder() {\n    this.age = this.age + 1;\n}\n\npublic void becomeOlder(int years) {\n    this.age = this.age + years;\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,InstanceFieldInvocation:2,PublicMethodSpecifier:1,AddExpression:2,MethodDefinition:1,IntDataType:1,VoidDataType:2,ClassDefinition:1,ThisReference:2,SimpleVariable:1,"
5,More about objects and classes,Overloading a method,8,code_sample,"public static void main(String[] args) {\n    Person pekka = new Person(""Pekka"", 24);\n\n    System.out.println(pekka);\n    pekka.becomeOlder();\n    System.out.println(pekka);\n    pekka.becomeOlder(10);\n    System.out.println(pekka);\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:5,ObjectCreationStatement:1,"
5,More about objects and classes,Overloading a method,8,code_sample,"public void becomeOlder() {\n    this.becomeOlder(1);\n}\n\npublic void becomeOlder(int years) {\n    this.age = this.age + years;\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,ThisReference:1,InstanceFieldInvocation:1,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:2,ObjectMethodInvocation:1,SimpleVariable:1,ActualMethodParameter:1,"
5,More about objects and classes,Overloading a method,8,problem_84,"Overloaded counter",
5,More about objects and classes,Object is at the end of a wire,8,code_sample,"public static void main(String[] args) {\n    Person pekka = new Person(""Pekka"", 24);\n\n    System.out.println( pekka );\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ActualMethodParameter:2,ObjectCreationStatement:1,"
5,More about objects and classes,Object is at the end of a wire,8,code_sample,"public static void main(String[] args) {\n    Person pekka = new Person(""Pekka"", 24);\n\n    System.out.println( pekka );\n\n    Person person = pekka;\n    person.becomeOlder(25);\n\n    System.out.println( pekka );\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
5,More about objects and classes,Object is at the end of a wire,8,code_sample,"public static void main(String[] args) {\n    Person pekka = new Person(""Pekka"", 24);\n\n    System.out.println( pekka );\n\n    Person person = pekka;\n    person.becomeOlder(25);\n\n    System.out.println( pekka );\n\n    pekka = new Person(""Pekka Mikkola"", 24);\n    System.out.println( pekka );\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:1,ActualMethodParameter:6,ObjectCreationStatement:2,"
5,More about objects and classes,Object is at the end of a wire,8,code_sample,"public static void main(String[] args) {\n    Person pekka = new Person(""Pekka"", 24);\n\n    System.out.println( pekka );\n\n    Person person = pekka;\n    person.becomeOlder(25);\n\n    System.out.println( pekka );\n\n    pekka = new Person(""Pekka Mikkola"", 24);\n    System.out.println( pekka );\n\n    person = null;\n    System.out.println( person );\n}","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:1,ActualMethodParameter:7,ObjectCreationStatement:2,"
5,More about objects and classes,Object is at the end of a wire,8,code_sample,"public static void main(String[] args) {\n    Person pekka = new Person(""Pekka"", 24);\n\n    System.out.println( pekka );\n\n    Person person = null;\n    System.out.println( person.weightIndex() );\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,nullInitialization:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:3,ObjectCreationStatement:1,"
5,More about objects and classes,An object as a method parameter,8,code_sample,"public class WeightWatchersAssociation {\n    private double lowestWeightIndex;\n\n    public WeightWatchersAssociation(double indexLimit) {\n        this.lowestWeightIndex = indexLimit;\n    }\n\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,InstanceFieldInvocation:1,InstanceField:1,ConstructorDefinition:1,DoubleDataType:2,ClassDefinition:1,SimpleVariable:1,ThisReference:1,PrivateFieldSpecifier:1,PublicConstructorSpecifier:1,FormalMethodParameter:1,"
5,More about objects and classes,An object as a method parameter,8,code_sample,"public class WeightWatchersAssociation {\n    // ...\n\n    public boolean isAcceptedAsMember(Person person) {\n        if ( person.weightIndex() < this.lowestWeightIndex ) {\n            return false;\n        }\n\n        return true;\n    }\n}","PublicClassSpecifier:1,PublicMethodSpecifier:1,True:1,False:1,ClassDefinition:1,ThisReference:1,FormalMethodParameter:1,IfStatement:1,LessExpression:1,InstanceFieldInvocation:1,MethodDefinition:1,ReturnStatement:2,BooleanDataType:1,ObjectMethodInvocation:1,"
5,More about objects and classes,An object as a method parameter,8,code_sample,"public static void main(String[] args) {\n    Person matti = new Person(""Matti"");\n    matti.setWeight(86);\n    matti.setHeight(180);\n\n    Person juhana = new Person(""Juhana"");\n    juhana.setWeight(64);\n    juhana.setHeight(172);\n\n    WeightWatchersAssociation kumpulasWeight = new WeightWatchersAssociation(25);\n\n    if ( kumpulasWeight.isAcceptedAsMember(matti) ) {\n        System.out.println( matti.getName() + "" is accepted as a member"");\n    } else {\n        System.out.println( matti.getName() + "" is not accepted as a member"");\n    }\n\n    if ( kumpulasWeight.isAcceptedAsMember(juhana) ) {\n        System.out.println( juhana.getName() + "" is accepted as a memberksi"");\n    } else {\n        System.out.println( juhana.getName() + "" is not accepted as a member"");\n    }\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,IfElseStatement:2,StringAddition:4,ClassDefinition:1,StringDataType:6,StringLiteral:6,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:3,ObjectMethodInvocation:10,ActualMethodParameter:13,ObjectCreationStatement:3,"
5,More about objects and classes,An object as a method parameter,8,problem_85,"Reformatory",
5,More about objects and classes,An object as a method parameter,8,problem_86,"Lyyra card and Cash Register",
5,More about objects and classes,Another object of the same type as a parameter to a method,8,code_sample,"public class Person {\n\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n\n    // ...\n}","PublicClassSpecifier:1,StringDataType:1,IntDataType:3,InstanceField:4,StringVariable:1,ClassDefinition:1,SimpleVariable:4,PrivateFieldSpecifier:4,"
5,More about objects and classes,Another object of the same type as a parameter to a method,8,code_sample,"Person pekka = new Person(""Pekka"");\nPerson juhana = new Person(""Juhana"")\n\nif ( pekka.getAge() > juhana.getAge() ) {\n    System.out.println(pekka.getName() + "" is older than "" + juhana.getName());\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,StringDataType:3,IfStatement:1,StringLiteral:3,MethodDefinition:1,VoidDataType:1,GreaterExpression:1,ConstructorCall:2,ObjectMethodInvocation:2,ActualMethodParameter:3,ObjectCreationStatement:2,"
5,More about objects and classes,Another object of the same type as a parameter to a method,8,code_sample,"public static void main(String[] args) {\n    Person pekka = new Person(""Pekka"", 24);\n    Person antti = new Person(""Antti"", 22);\n\n    if (pekka.olderThan(antti)) {  //  same as pekka.olderThan(antti)==true\n        System.out.println(pekka.getName() + "" is older than "" + antti.getName());\n    } else {\n        System.out.println(pekka.getName() + "" isn't older than "" + antti.getName());\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,StringAddition:2,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:3,ActualMethodParameter:5,ObjectCreationStatement:2,"
5,More about objects and classes,Another object of the same type as a parameter to a method,8,code_sample,"public class Person {\n    // ...\n\n    public boolean olderThan(Person compared) {\n        if ( this.age > compared.age ) {\n            return true;\n        }\n\n        return false;\n    }\n}","PublicClassSpecifier:1,PublicMethodSpecifier:1,True:1,False:1,ClassDefinition:1,ThisReference:1,FormalMethodParameter:1,IfStatement:1,InstanceFieldInvocation:1,MethodDefinition:1,ConstantInvocation:1,GreaterExpression:1,ReturnStatement:2,BooleanDataType:1,"
5,More about objects and classes,The date as an object,8,code_sample,"public class MyDate {\n    private int day;\n    private int month;\n    private int year;\n\n    public MyDate(int day, int month, int year) {\n        this.day = day;\n        this.month = month;\n        this.year = year;\n    }\n\n    public String toString() {\n        return this.day + ""."" + this.month + ""."" + this.year;\n    }\n\n    public boolean earlier(MyDate compared) {\n        // first we'll compare years\n        if ( this.year < compared.year ) {\n            return true;\n        }\n\n        // if the years are the same, we'll compare the months\n        if ( this.year == compared.year && this.month < compared.month ) {\n            return true;\n        }\n\n        // years and months the same, we'll compare the days\n        if ( this.year == compared.year && this.month == compared.month &&\n                this.day < compared.day ) {\n            return true;\n        }\n\n        return false;\n    }\n}","ConstructorDefinition:1,StringAddition:1,EqualExpression:2,True:3,False:1,ClassDefinition:1,FormalMethodParameter:2,StringDataType:2,IfStatement:3,LessExpression:3,AndExpression:2,MethodDefinition:2,ConstantInvocation:4,InstanceField:3,ReturnStatement:5,SimpleVariable:3,BooleanDataType:1,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,ThisReference:8,PublicConstructorSpecifier:1,InstanceFieldInvocation:8,StringLiteral:1,IntDataType:4,OverridingToString:1,PrivateFieldSpecifier:3,"
5,More about objects and classes,The date as an object,8,code_sample,"public static void main(String[] args) {\n    MyDate p1 = new MyDate(14, 2, 2011);\n    MyDate p2 = new MyDate(21, 2, 2011);\n    MyDate p3 = new MyDate(1, 3, 2011);\n    MyDate p4 = new MyDate(31, 12, 2010);\n\n    System.out.println( p1 + "" earlier than "" + p2 + "": "" + p1.earlier(p2));\n    System.out.println( p2 + "" earlier than "" + p1 + "": "" + p2.earlier(p1));\n\n    System.out.println( p2 + "" earlier than "" + p3 + "": "" + p2.earlier(p3));\n    System.out.println( p3 + "" earlier than "" + p2 + "": "" + p3.earlier(p2));\n\n    System.out.println( p4 + "" earlier than "" + p1 + "": "" + p4.earlier(p1));\n    System.out.println( p1 + "" earlier than "" + p4 + "": "" + p1.earlier(p4));\n}","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:6,StringAddition:6,ClassDefinition:1,StringDataType:6,StringLiteral:6,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:4,ObjectMethodInvocation:6,ActualMethodParameter:10,ObjectCreationStatement:4,"
5,More about objects and classes,The date as an object,8,problem_87,"Apartment comparison",
5,More about objects and classes,Objects on a list,8,code_sample,"public static void main(String[] args) {\n    ArrayList<Person> teachers = new ArrayList<Person>();\n\n    // first we can take a person into a variable\n    Person teacher = new Person(""Juhana"");\n    // and then add it to the list\n    teachers.add(teacher);\n\n    // or we can create the object as we add it:\n    teachers.add( new Person(""Matti"") );\n    teachers.add( new Person(""Martin"") );\n\n    System.out.println(""teachers as newborns: "");\n    for ( Person prs : teachers ) {\n        System.out.println( prs );\n    }\n\n    for ( Person prs : teachers ) {\n        prs.becomeOlder( 30 );\n    }\n\n    System.out.println(""in 30 years: "");\n    for ( Person prs : teachers ) {\n        System.out.println( prs );\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,ClassDefinition:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:3,ObjectMethodInvocation:4,ActualMethodParameter:9,ObjectCreationStatement:3,ForEachStatement:3,"
5,More about objects and classes,Objects on a list,8,problem_88,"Students",
5,More about objects and classes,An object within an object,8,code_sample,"public class Person {\n    private String name;\n    private int age;\n    private int weight;\n    private int height;\n    private MyDate birthMyDate;\n\n    // ...","PublicClassSpecifier:1,StringDataType:1,IntDataType:3,InstanceField:5,StringVariable:1,ClassDefinition:1,SimpleVariable:5,PrivateFieldSpecifier:5,"
5,More about objects and classes,An object within an object,8,code_sample,"public Person(String name, int day, int month, int year) {\n        this.name = name;\n        this.weight = 0;\n        this.height = 0;\n        this.birthMyDate = new MyDate(day, month, year);\n    }","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,ThisReference:4,ObjectVariable:1,InstanceFieldInvocation:4,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ConstructorCall:1,ActualMethodParameter:1,ObjectCreationStatement:1,"
5,More about objects and classes,An object within an object,8,code_sample,"public String toString() {\n    return this.name + "", born "" + this.birthMyDate;\n}","PublicClassSpecifier:1,StringDataType:1,InstanceFieldInvocation:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ReturnStatement:1,StringAddition:1,ClassDefinition:1,ThisReference:1,"
5,More about objects and classes,An object within an object,8,code_sample,"public static void main(String[] args) {\n    Person martin = new Person(""Martin"", 24, 4, 1983);\n\n    Person juhana = new Person(""Juhana"", 17, 9, 1985);\n\n    System.out.println( martin );\n    System.out.println( juhana );\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ActualMethodParameter:4,ObjectCreationStatement:2,"
5,More about objects and classes,An object within an object,8,code_sample,"int day = Calendar.getInstance().get(Calendar.DATE);\nint month = Calendar.getInstance().get(Calendar.MONTH) + 1; // January is 0 so we add 1\nint year = Calendar.getInstance().get(Calendar.YEAR);\nSystem.out.println(""Today is "" + day + ""."" + month + ""."" + year );","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,AddExpression:1,MethodDefinition:1,IntDataType:3,VoidDataType:1,ObjectMethodInvocation:3,ActualMethodParameter:4,"
5,More about objects and classes,An object within an object,8,problem_89,"Clock object",
5,More about objects and classes,A list of objects within an object,8,code_sample,"public class WeightWatchersAssociation {\n    private double lowestWeightIndex;\n    private String name;\n    private ArrayList<Person> members;\n\n    public WeightWatchersAssociation(String name, double lowestWeightIndex) {\n        this.lowestWeightIndex = lowestWeightIndex;\n        this.name = name;\n        this.members = new ArrayList<Person>();\n    }\n\n    //..\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,ConstructorDefinition:1,StringVariable:1,ClassDefinition:1,ThisReference:3,PublicConstructorSpecifier:1,java.util.ArrayList:1,FormalMethodParameter:1,GenericObjectCreationStatement:1,StringDataType:1,InstanceFieldInvocation:3,InstanceField:3,DoubleDataType:2,SimpleVariable:3,PrivateFieldSpecifier:3,"
5,More about objects and classes,A list of objects within an object,8,code_sample,"public class WeightWatchersAssociation {\n    // ...\n\n    public boolean isAccepted(Person person) {\n        if ( person.weightIndex() < this.lowestWeightIndex ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public void addAsMember(Person person) {\n        if ( !isAccepted(person) ) { // same as isAccepted(person) == false\n            return;\n        }\n\n        this.members.add(person);\n    }\n\n    public String toString() {\n        String membersAsString = """";\n\n        for ( Person member : this.members ) {\n            membersAsString += ""  "" + member.getName() + ""\n"";\n        }\n\n        return ""Weightwatchers association "" + this.name + "" members: \n"" + membersAsString;\n    }\n}","PublicClassSpecifier:1,PublicMethodSpecifier:3,True:1,NotExpression:1,False:1,ClassDefinition:1,ThisReference:2,FormalMethodParameter:2,IfStatement:2,LessExpression:1,StringDataType:1,InstanceFieldInvocation:2,MethodDefinition:3,VoidDataType:1,ReturnStatement:2,OverridingToString:1,BooleanDataType:1,ObjectMethodInvocation:2,ActualMethodParameter:2,"
5,More about objects and classes,A list of objects within an object,8,code_sample,"public static void main(String[] args) {\n    WeightWatchersAssociation weightWatcher = new WeightWatchersAssociation(""Kumpulan paino"", 25);\n\n    Person matti = new Person(""Matti"");\n    matti.setWeight(86);\n    matti.setHeight(180);\n    weightWatcher.addAsMember(matti);\n\n    Person juhana = new Person(""Juhana"");\n    juhana.setWeight(64);\n    juhana.setHeight(172);\n    weightWatcher.addAsMember(juhana);\n\n    Person harri = new Person(""Harri"");\n    harri.setWeight(104);\n    harri.setHeight(182);\n    weightWatcher.addAsMember(harri);\n\n    Person petri = new Person(""Petri"");\n    petri.setWeight(112);\n    petri.setHeight(173);\n    weightWatcher.addAsMember(petri);\n\n    System.out.println( weightWatcher );\n}","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:5,ObjectMethodInvocation:12,ActualMethodParameter:18,ObjectCreationStatement:5,"
5,More about objects and classes,A list of objects within an object,8,problem_90,"Team and Players",
5,More about objects and classes,Method returns an object,8,code_sample,"public class WeightWatchersAssociation {\n    // ...\n\n    public Person personWithHighestWeightIndex() {\n        // if members list is empty, we'll return null-reference\n        if ( this.members.isEmpty() ) {\n            return null;\n        }\n\n        Person heaviestSoFar = this.members.get(0);\n\n        for ( Person person : this.members) {\n            if ( person.weightIndex() > heaviestSoFar.weightIndex() ) {\n                heaviestSoFar = person;\n            }\n        }\n\n        return heaviestSoFar;\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,ThisReference:3,IfStatement:2,InstanceFieldInvocation:3,MethodDefinition:1,GreaterExpression:1,ReturnStatement:2,ObjectMethodInvocation:3,ActualMethodParameter:1,ForEachStatement:1,"
5,More about objects and classes,Method returns an object,8,code_sample,"public static void main(String[] args) {\n    WeightWatchersAssociation weightWatcher = new WeightWatchersAssociation(""Kumpluan paino"", 25);\n\n    // ..\n\n    Person heaviest = weightWatcher.personWithHighestWeightIndex();\n    System.out.print(""member with the greatest weight index: "" + heaviest.getName() );\n    System.out.println("" weight index "" + String.format( ""%.2f"", heaviest.weightIndex() ) );\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:2,ClassDefinition:1,java.lang.System.out.print:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:3,ObjectCreationStatement:1,"
5,More about objects and classes,Method returns an object it creates,8,code_sample,"public Counter {\n    private int value;\n\n    public Counter(){\n        this(0);\n    }\n\n    public Counter(int initialValue){\n        this.value = initialValue;\n    }\n\n    public void grow(){\n        this.value++;\n    }\n\n    public String toString(){\n        return ""value: ""+value;\n    }\n\n    public Counter clone(){\n        // lets create a new counter object, that gets as its initial value\n        // the value of the counter that is being cloned\n        Counter clone = new Counter(this.value);\n\n        // return the clone to the caller\n        return clone;\n    }\n}","PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,"
5,More about objects and classes,Method returns an object it creates,8,code_sample,"Counter counter = new Counter();\ncounter.grow();\ncounter.grow();\n\nSystem.out.println(counter);         // prints 2\n\nCounter clone = counter.clone();\n\nSystem.out.println(counter);         // prints 2\nSystem.out.println(clone);           // prints 2\n\ncounter.grow();\ncounter.grow();\ncounter.grow();\ncounter.grow();\n\nSystem.out.println(counter);         // prints 6\nSystem.out.println(clone);           // prints 2\n\nclone.grow();\n\nSystem.out.println(counter);         // prints 6\nSystem.out.println(clone);           // prints 3","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:7,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:1,ObjectMethodInvocation:8,ActualMethodParameter:7,ObjectCreationStatement:1,"
5,More about objects and classes,Method returns an object it creates,8,problem_91,"Extending MyDate",
5,More about objects and classes,More assignments,8,problem_92,"Difference of two dates",
5,More about objects and classes,More assignments,8,problem_93,"Person extended",
6,A quick recap,-,8,problem_94,"PhoneBook",
6,A quick recap,-,8,problem_95,"Money",
6,A quick recap,Character strings are immutable,8,code_sample,"String characterString = ""test"";\ncharacterString + ""tail"";\n\nSystem.out.println( characterString );  // test","SimpleAssignmentExpression:2,PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,StringVariable:1,ClassDefinition:1,ActualMethodParameter:1,"
6,A quick recap,Character strings are immutable,8,code_sample,"String characterString = ""test"";\ncharacterString = characterString + ""tail"";   // or characterString += ""tail"";\n\nSystem.out.println( characterString );  // testtail","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,StringVariable:1,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ActualMethodParameter:1,"
6,Array,-,9,code_sample,"int[] numbers = {100, 1, 42};","SimpleAssignmentExpression:1,PublicClassSpecifier:1,ArrayInitializationStatement:1,PublicMethodSpecifier:1,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,ArrayDataType:1,ArrayInitializer:1,"
6,Array,-,9,code_sample,"String[] characterStringArray = {""Matti P."", ""Matti V.""};\ndouble[] floatingNumberArray = {1.20, 3.14, 100.0, 0.6666666667};","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,ArrayInitializationStatement:2,StringDataType:1,StringLiteral:1,MethodDefinition:1,ArrayVariable:2,VoidDataType:1,DoubleDataType:1,ArrayDataType:2,ArrayInitializer:2,"
6,Array,-,9,code_sample,"// index           0   1    2    3   4   5     6     7\nint[] numbers = {100,  1,  42,  23,  1,  1, 3200, 3201};\n\nSystem.out.println(numbers[0]);    // prints the number in the array's index 0: the number 100\nSystem.out.println(numbers[2]);    // prints the number in the array's index 2, the number 42","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,ArrayInitializationStatement:1,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:2,ArrayElement:2,ArrayInitializer:1,"
6,Array,-,9,code_sample,"int[] numbers = {100,1,42};\n\nnumbers[0] = 1;    // setting value 1 to index 0\nnumbers[1] = 101;  // setting value 101 to index 1\n\n// the numbers array now looks like {1,101,42}","SimpleAssignmentExpression:3,PublicClassSpecifier:1,ArrayInitializationStatement:1,PublicMethodSpecifier:1,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,ArrayDataType:1,ArrayElement:2,ArrayInitializer:1,"
6,Array,Iteration of an array,9,code_sample,"int[] numbers = {1, 8, 10, 3, 5};\n\nint i = 0;\nwhile (i < numbers.length ) {\n    System.out.println(numbers[i]);\n    i++;\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ArrayLength:1,WhileStatement:1,ClassDefinition:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,"
6,Array,Iteration of an array,9,code_sample,"int[] numbers = {1,8,10,3,5};\n\nfor (int number : numbers) {\n    System.out.println(number);\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:1,ArrayInitializer:1,ForEachStatement:1,"
6,Array,Iteration of an array,9,code_sample,"String[] names = {""Juhana L."", ""Matti P."", ""Matti L."", ""Pekka M.""};\n\nfor (String name : names) {\n    System.out.println(name);\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:1,ArrayInitializer:1,ForEachStatement:1,"
6,Array,Another form of the for command,9,code_sample,"for (int i = 0; i < 3; i++ ) {\n    System.out.println(i);\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,ForStatement:1,ActualMethodParameter:1,"
6,Array,Another form of the for command,9,code_sample,"int i = 0;  // formatting the variable that will be used in the loop\nwhile ( i < 3 ) {  // condition\n    System.out.println(i);\n    i++;   // updating the variable that is used in the loop\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,WhileStatement:1,ClassDefinition:1,ActualMethodParameter:1,"
6,Array,Another form of the for command,9,code_sample,"int[] numbers = {1, 3, 5, 9, 17, 31, 57, 105};\n\nfor(int i = 3; i < 7; i++) {\n    System.out.println(numbers[i]);\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ForStatement:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,"
6,Array,Another form of the for command,9,code_sample,"int[] numbers = {1, 3, 5, 9, 17, 31, 57, 105};\n\nfor(int i = 6; i>2 ; i--) {\n    System.out.println(numbers[i]);\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,GreaterExpression:1,PostDecrementExpression:1,ArrayDataType:1,ForStatement:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,"
6,Array,For and array length,9,code_sample,"int[] numbers = {1, 8, 10, 3, 5};\n\nfor (int i = 0; i < numbers.length; i++ ) {\n    System.out.println(numbers[i]);\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ArrayLength:1,ClassDefinition:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ForStatement:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,"
6,Array,Array as a parameter,9,code_sample,"public static void listCells(int[] integerArray) {\n\n    System.out.println(""the cells of the array are: "");\n    for( int number : integerArray) {\n        System.out.print(number + "" "");\n    }\n\n    System.out.println("""");\n}\n\npublic static void  main(String[] args) {\n    int[] numbers = { 1, 2, 3, 4, 5 };\n    listCells(numbers);\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:1,ClassDefinition:1,java.lang.System.out.print:1,ArrayInitializationStatement:2,StringDataType:3,StringLiteral:3,MethodDefinition:1,ArrayVariable:2,IntDataType:3,VoidDataType:2,SimpleVariable:2,ArrayDataType:3,ActualMethodParameter:4,ArrayInitializer:2,ForEachStatement:1,"
6,Array,Array as a parameter,9,problem_96,"Sum of the array",
6,Array,Array as a parameter,9,problem_97,"Elegant printing of an array",
6,Array,Creating a new array,9,code_sample,"int cells = 99;\nint[] array = new int[cells];","SimpleAssignmentExpression:2,ArrayCreationStatement:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,ArrayVariable:1,VoidDataType:1,ClassDefinition:1,ArrayDataType:1,"
6,Array,Creating a new array,9,code_sample,"int cells = 99;\nint[] array = new int[cells]; //creating an array of the size of the value in the 'cells' variable\n\nif(array.length == cells) {\n    System.out.println(""The length of the array is "" + cells);\n} else {\n    System.out.println(""Something unreal happened. The length of the array is something else than "" + cells);\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,EqualExpression:1,StringAddition:2,ArrayLength:1,ClassDefinition:1,ArrayCreationStatement:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,ArrayVariable:1,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:2,"
6,Array,Creating a new array,9,code_sample,"System.out.print(""How many values? "");\nint amountOfValues = Integer.parseInt(reader.nextLine());\n\nint[] values = new int[amountOfValues];\n\nSystem.out.println(""Enter values:"");\nfor(int i = 0; i < amountOfValues; i++) {\n    values[i] = Integer.parseInt(reader.nextLine());\n}\n\nSystem.out.println(""Values again:"");\nfor(int i = 0; i < amountOfValues; i++) {\n    System.out.println(values[i]);\n}","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:3,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:1,ArrayCreationStatement:1,StringDataType:3,LessExpression:2,StringLiteral:3,MethodDefinition:1,IntDataType:4,ArrayVariable:1,VoidDataType:1,ObjectMethodInvocation:2,ArrayDataType:1,ForStatement:2,ActualMethodParameter:6,ArrayElement:2,"
6,Array,An array as the return value,9,code_sample,"public static String[] giveStringTable() {\n    String[] tchrs = new String[3];\n\n    tchrs[0] = ""Bonus"";\n    tchrs[1] = ""Ihq"";\n    tchrs[2] = ""Lennon"";\n\n    return tchrs;\n}\n\npublic static void main(String[] args){\n    String[] teachers = giveStringTable();\n\n    for ( String teacher : teachers)\n        System.out.println( teacher );\n}","SimpleAssignmentExpression:6,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayCreationStatement:1,StringDataType:3,ArrayInitializationStatement:1,ExplicitTypeCasting:1,StringLiteral:3,MethodDefinition:1,ArrayVariable:2,VoidDataType:2,ReturnStatement:1,ArrayDataType:2,SimpleVariable:1,ArrayElement:4,ActualMethodParameter:1,ArrayInitializer:1,"
6,Array,An array as the return value,9,problem_98,"Reversing and copying of an array",
6,About blocks and nested loops,-,10,code_sample,"int number = 5;\n\nif( number == 5 ){\n    String stringDefinedWithinBlock = ""Yeah!"";\n}\n\nSystem.out.println(stringDefinedWithinBlock); // does not work!","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,EqualExpression:1,StringVariable:1,ClassDefinition:1,IfStatement:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,StringInitializationStatement:1,ActualMethodParameter:1,"
6,About blocks and nested loops,-,10,code_sample,"int number = 5;\n\nif( number == 5 ) {\n    number = 6;\n}\n\nSystem.out.println(number); // prints 6","SimpleAssignmentExpression:2,PublicClassSpecifier:1,IfStatement:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,EqualExpression:1,ClassDefinition:1,ActualMethodParameter:1,"
6,About blocks and nested loops,-,10,code_sample,"for(int i = 0; i < 3; i++) {\n   System.out.print(i + "": "");\n\n   for(int j = 0; j < 3; j++) {\n      System.out.print(j + "" "");\n   }\n\n   System.out.println();\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:2,ClassDefinition:1,java.lang.System.out.print:2,LessExpression:2,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,ForStatement:2,ActualMethodParameter:2,"
6,About blocks and nested loops,-,10,code_sample,"for(int i = 0; i < 3; i++) {\n   System.out.print(i + "": "");\n\n   // the inner for-loop\n\n   System.out.println();\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,java.lang.System.out.print:1,LessExpression:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ForStatement:1,ActualMethodParameter:1,"
6,About blocks and nested loops,variables defined outside of a for loop as its condition,10,code_sample,"for(int i = 0; i < 3; i++) {\n    System.out.print(i + "": "");\n\n    for(int j = 0; j <= i; j++) {\n        System.out.print(j + "" "");\n    }\n\n    System.out.println();\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:2,ClassDefinition:1,java.lang.System.out.print:2,LessEqualExpression:1,LessExpression:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,ForStatement:2,ActualMethodParameter:2,"
6,About blocks and nested loops,variables defined outside of a for loop as its condition,10,code_sample,"for(int i = 1; i <= 10; i++) {\n\n    for(int j = 1; j <= 10; j++) {\n        System.out.print(i * j + "" "");\n    }\n\n    System.out.println();\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:1,MultiplyExpression:1,StringAddition:1,ClassDefinition:1,java.lang.System.out.print:1,LessEqualExpression:2,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ForStatement:2,ActualMethodParameter:1,"
6,About blocks and nested loops,variables defined outside of a for loop as its condition,10,code_sample,"public class MultiplicationTable {\n\n    public void print(int upTo) {\n        for(int i = 1; i <= upTo; i++) {\n            printMultiplicationTableRow(i, upTo);\n\n            System.out.println();\n        }\n    }\n\n    public void printMultiplicationTableRow(int multiplier, int howManyTimes) {\n        for(int i = 1; j <= howManyTimes; i++) {\n            System.out.print(i * multiplier + "" "");\n        }\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:2,java.lang.System.out.println:1,MultiplyExpression:1,StringAddition:1,ClassDefinition:1,java.lang.System.out.print:1,FormalMethodParameter:2,LessEqualExpression:2,StringDataType:1,StringLiteral:1,MethodDefinition:2,IntDataType:4,VoidDataType:2,ForStatement:2,ActualMethodParameter:2,"
6,About blocks and nested loops,variables defined outside of a for loop as its condition,10,problem_99,"Array to stars",
6,About blocks and nested loops,variables defined outside of a for loop as its condition,10,problem_100,"Night sky",
6,To static or not to static?,-,10,code_sample,"public class Program {\n\n    public static void resetArray(int[] table) {\n        for ( int i=0; i < table.length; i++ )\n            table[i] = 0;\n    }\n\n    public static void main(String[] args) {\n        int[] values = { 1, 2, 3, 4, 5 };\n\n        for ( int number : values ) {\n            System.out.print( number + "" "" );  // prints 1, 2, 3, 4, 5\n        }\n\n        System.out.println();\n\n        resetArray(values);\n\n        for ( int number : values ) {\n            System.out.print( number + "" "" );  // prints 0, 0, 0, 0, 0\n        }\n    }\n}","StringAddition:2,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,LessExpression:1,StringDataType:2,MethodDefinition:2,ArrayVariable:1,ForStatement:1,ArrayElement:1,ForEachStatement:2,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ArrayLength:1,java.lang.System.out.print:2,ArrayInitializationStatement:1,StringLiteral:2,IntDataType:5,VoidDataType:2,ArrayDataType:1,ActualMethodParameter:3,ArrayInitializer:1,"
6,To static or not to static?,-,10,code_sample,"public class Program {\n    public static void main(String[] args) {\n        int[] values = { 1, 2, 3, 4, 5 };\n\n        for ( int value : values ) {\n            System.out.print( value + "" "" );  // prints: 1, 2, 3, 4, 5\n        }\n\n        System.out.println();\n\n        ArrayHandling.resetArray(values);\n\n        for ( int value : values ) {\n            System.out.print( value + "" "" );  // prints: 0, 0, 0, 0, 0\n        }\n    }\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:2,ClassDefinition:1,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,ArrayInitializationStatement:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,IntDataType:3,VoidDataType:1,ArrayDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:3,ArrayInitializer:1,ForEachStatement:2,"
6,To static or not to static?,-,10,code_sample,"public class ArrayHandling {\n    public static void resetArray(int[] array) {\n        for ( int i=0; i < array.length; i++ ) {\n            array[i] = 0;\n        }\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,ArrayLength:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,LessExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ForStatement:1,ArrayElement:1,"
6,To static or not to static?,When static methods should be used,10,code_sample,"public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name) {\n        this.age = 0;\n        this.name = name;\n    }\n\n    public boolean isAdult(){\n        if ( this.age < 18 ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:3,ConstructorDefinition:1,True:1,StringVariable:1,False:1,ClassDefinition:1,ThisReference:5,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:2,IfStatement:1,LessExpression:1,InstanceFieldInvocation:5,IntDataType:1,MethodDefinition:3,InstanceField:2,VoidDataType:1,ReturnStatement:3,SimpleVariable:2,BooleanDataType:1,PrivateFieldSpecifier:2,"
6,To static or not to static?,When static methods should be used,10,code_sample,"public class Person {\n    //...\n\n    public static void becomeOlder() {\n        this.age++;\n    }\n}","PublicClassSpecifier:1,StaticMethodSpecifier:1,PostIncrementExpression:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ThisReference:1,"
6,To static or not to static?,When static methods should be used,10,code_sample,"public class Program {\n    public static void main(String[] args) {\n        Person pekka = new Person(""Pekka"");\n        Person antti = new Person(""Antti"");\n        Person juhana = new Person(""Juhana"");\n\n        for ( int i=0; i < 30; i++ ) {\n            pekka.becomeOlder();\n            juhana.becomeOlder();\n        }\n\n        antti.becomeOlder();\n\n        if ( antti.isAdult() ) {\n            System.out.println( antti.getName() + "" is an adult"" );\n        } else {\n            System.out.println( antti.getName() + "" is a minor"" );\n        }\n\n        if ( pekka.isAdult() ) {\n            System.out.println( pekka.getName() + "" is an adult"" );\n        } else {\n            System.out.println( pekka.getName() + "" is a minor"" );\n        }\n\n        if ( juhana.isAdult() ) {\n            System.out.println( juhana.getName() + "" is an adult"" );\n        } else {\n            System.out.println( juhana.getName() + "" is a minor"" );\n        }\n    }\n}","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:6,IfElseStatement:3,StringAddition:6,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:9,LessExpression:1,StringLiteral:9,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:3,ForStatement:1,ObjectMethodInvocation:12,ActualMethodParameter:9,ObjectCreationStatement:3,"
6,To static or not to static?,When static methods should be used,10,code_sample,"public class Main {\n\n    public static void main(String[] args) {\n        Person pekka = new Person(""Pekka"");\n        Person antti = new Person(""Antti"");\n        Person juhana = new Person(""Juhana"");\n\n        for ( int i=0; i < 30; i++ ) {\n            pekka.becomeOlder();\n            juhana.becomeOlder();\n        }\n\n        antti.becomeOlder();\n\n        reportMaturity(antti);\n\n        reportMaturity(pekka);\n\n        reportMaturity(juhana);\n    }\n\n    private static void reportMaturity(Person person) {\n        if ( person.isAdult() ) {\n            System.out.println(person.getName() + "" is an adult"");\n        } else {\n            System.out.println(person.getName() + "" is a minor"");\n        }\n    }\n}","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,StringAddition:2,PrivateMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,StringDataType:5,LessExpression:1,StringLiteral:5,MethodDefinition:2,IntDataType:1,VoidDataType:2,ConstructorCall:3,ForStatement:1,ObjectMethodInvocation:6,ActualMethodParameter:8,ObjectCreationStatement:3,"
6,To static or not to static?,When static methods should be used,10,problem_101,"The library information system",
6,Assignments where you are free to decide how to structure the program.,-,10,problem_102,"Grade distribution",
6,Assignments where you are free to decide how to structure the program.,-,10,problem_103,"Birdwatchers database",
6,Sorting an array,Sorting an array with the ready-made tools of Java.,10,code_sample,"int[] values = {-3, -111, 7, 42};\nArrays.sort(values);\nfor(int value: values) {\n    System.out.println(value);\n}","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:2,ArrayInitializer:1,ForEachStatement:1,"
6,Sorting an array,Implementation of a sorting algorithm,10,problem_104,"Sorting",
6,Searching,-,10,code_sample,"public static boolean isInArray(int[] array, int searchingFor) {\n    for ( int value : array ) {\n       if ( value == searchingFor )  {\n           return true;\n       }\n    }\n\n    return false;\n}\n\npublic static boolean isWordInArray(String[] array, String searchingFor) {\n    for ( String word: array ) {\n        if ( word.equals(searchingFor) )  {\n            return true;\n        }\n    }\n\n    return false;\n}","PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,BooleanDataType:1,SimpleVariable:1,ArrayDataType:1,"
6,Searching,-,10,problem_105,"Guessing game",
6,Searching,-,10,problem_106,"Implementation of binary search",
6,About arrays and objects,-,10,code_sample,"public static void main(String[] args) {\n    Person[] persons = new Person[3];\n\n    persons[0] = new Person(""Pekka"");\n    persons[1] = new Person(""Antti"");\n    persons[2] = new Person(""Juhana"");\n\n    for ( int i=0; i < 30; i++ ) {\n        persons[0].becomeOlder();\n        persons[1].becomeOlder();\n        persons[2].becomeOlder();\n    }\n\n    for ( Person person : persons ) {\n        reportMaturity(person);\n    }\n}","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,ClassDefinition:1,ArrayCreationStatement:1,StringDataType:3,LessExpression:1,StringLiteral:3,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:2,ConstructorCall:3,ForStatement:1,ObjectMethodInvocation:3,ArrayElement:6,ActualMethodParameter:4,ObjectCreationStatement:3,ForEachStatement:1,"
6,About arrays and objects,-,10,code_sample,"public static void main(String[] args) {\n    ArrayList<Person> persons = new ArrayList<Person>();\n\n    persons.add( new Person(""Pekka"") );\n    persons.add( new Person(""Antti"") );\n    persons.add( new Person(""Juhana"") );\n\n    for ( int i=0; i < 30; i++ ) {\n        for ( Person person : persons ) {\n            person.becomeOlder();\n        }\n\n        //  or persons.get(0).becomeOlder();\n        //     persons.get(1).becomeOlder();\n        //     ...\n    }\n\n    for ( Person person : persons ) {\n        reportMaturity(person);\n    }\n}","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:2,StringDataType:3,StringLiteral:3,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:4,ConstructorCall:3,ForStatement:1,ActualMethodParameter:4,ArrayInitializer:1,ObjectCreationStatement:3,ForEachStatement:2,"
6,About arrays and objects,-,10,code_sample,"public class Day {\n    private String name;\n    // ...\n}\n\npublic class Week {\n    private Day[] days;\n\n    public Week(){\n        days = new Day[7];\n        days[0] = new Day(""Monday"");\n        days[1] = new Day(""Tuesday"");\n        // ...\n    }\n}","SimpleAssignmentExpression:3,PublicClassSpecifier:2,ConstructorDefinition:1,StringVariable:1,ClassDefinition:2,PublicConstructorSpecifier:1,StringDataType:3,StringLiteral:2,InstanceField:2,SimpleVariable:2,ArrayDataType:1,ConstructorCall:2,PrivateFieldSpecifier:2,ArrayElement:2,ActualMethodParameter:2,ObjectCreationStatement:2,"