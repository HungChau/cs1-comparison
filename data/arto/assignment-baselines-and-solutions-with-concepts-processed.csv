Week,AssignmentId,AssignmentName,ContentType,ContentFilename,"Content
",concepts
1,000,000.Sandbox,baseline,Ohjelma.java,"// This is not an exercise but a ""sandbox"" where you can freely test\n// whatever you want\npublic class Ohjelma {\n    public static void main(String[] args) {\n        // Write the code here. You can run the code by \n        // selecting Run->Run File from the menu or by pressing Shift+F6\n    }\n}
",
1,000,000.Sandbox,solution,Ohjelma.java,"// This is not an exercise but a ""sandbox"" where you can freely test\n// whatever you want\npublic class Ohjelma {\n    public static void main(String[] args) {\n        // Write the code here. You can run the code by \n        // selecting Run->Run File from the menu or by pressing Shift+F6\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
1,001,001.Name,baseline,Name.java,"public class Name {\n    public static void main(String[] args) {\n        // Write your program here\n    }\n}
",
1,001,001.Name,solution,Name.java,"public class Name {\n    public static void main(String[] args) {\n        // Write your program here\n        System.out.println(""Eric Example"");\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,StringDataType:1,StringLiteral:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,FormalMethodParameter:1,"
1,002,002.HelloWorld,baseline,Greeter.java,"public class Greeter {\n    public static void main(String[] args) {\n        // Write your code here\n    }\n}
",
1,002,002.HelloWorld,solution,Greeter.java,"public class Greeter {\n    public static void main(String[] args) {\n        // Write your code here\n        System.out.println(""Hello world!"");\n        System.out.println(""(And all the people of the world)"");\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:2,FormalMethodParameter:1,"
1,003,003.Spruce,baseline,Spruce.java,"public class Spruce {\n    public static void main(String[] args) {\n        // Write code here\n        System.out.println(""*"");\n    }\n}
",
1,003,003.Spruce,solution,Spruce.java,"public class Spruce {\n    public static void main(String[] args) {\n        // Write code here\n        System.out.println(""    *"");\n        System.out.println(""   ***"");\n        System.out.println(""  *****"");\n        System.out.println("" *******"");\n        System.out.println(""*********"");\n        System.out.println(""    *"");\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,StringDataType:6,StringLiteral:6,PublicMethodSpecifier:1,java.lang.System.out.println:6,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:6,FormalMethodParameter:1,"
1,004,004.ChangingVariables,baseline,Variables.java,"public class Variables {\n    public static void main(String[] args) {\n        // CHANGE THESE:\n        int chickenCount = 3;\n        double baconWeight = 5.5;\n        String tractor = ""There is none"";\n        // DO NOT TOUCH THE BELOW:\n        System.out.println(""Chickens:"");\n        System.out.println(chickenCount);\n        System.out.println(""Bacon (kg):"");\n        System.out.println(baconWeight);\n        System.out.println(""A tractor:"");\n        System.out.println(tractor);\n        System.out.println("""");\n        System.out.println(""In a nutshell:"");\n        System.out.println(chickenCount);\n        System.out.println(baconWeight);\n        System.out.println(tractor);\n    }\n}
",
1,004,004.ChangingVariables,solution,Variables.java,"public class Variables {\n    public static void main(String[] args) {\n        // CHANGE THESE:\n        int chickenCount = 9000;\n        double baconWeight = 0.1;\n        String tractor = ""Zetor"";\n        // DO NOT TOUCH THE BELOW:\n        System.out.println(""Chickens:"");\n        System.out.println(chickenCount);\n        System.out.println(""Bacon (kg):"");\n        System.out.println(baconWeight);\n        System.out.println(""A tractor:"");\n        System.out.println(tractor);\n        System.out.println("""");\n        System.out.println(""In a nutshell:"");\n        System.out.println(chickenCount);\n        System.out.println(baconWeight);\n        System.out.println(tractor);\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:11,StringVariable:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:6,StringLiteral:6,MethodDefinition:1,IntDataType:1,VoidDataType:1,StringInitializationStatement:1,DoubleDataType:1,ActualMethodParameter:11,"
1,005,005.SecondsOfTheYear,baseline,SecondsOfTheYear.java,"public class SecondsOfTheYear {\n    public static void main(String[] args) {   \n        // In below an incomplete version of the program. Please complete it!\n        int daysInYear = 365;\n        int hoursInDay = 0;\n        int minutesInHour = 0;\n        int secondsInMinute = 0;\n        int secondsInYear = daysInYear * hoursInDay;\n        System.out.println(""There are ""+secondsInYear+"" seconds in a year"");\n    }\n}
",
1,005,005.SecondsOfTheYear,solution,SecondsOfTheYear.java,"public class SecondsOfTheYear {\n    public static void main(String[] args) {   \n        // In below an incomplete version of the program. Please complete it!\n        int daysInYear = 365;\n        int hoursInDay = 24;\n        int minutesInHour = 60;\n        int secondsInMinute = 60;\n        int secondsInYear = daysInYear * hoursInDay * minutesInHour * secondsInMinute;\n        System.out.println(""There are ""+secondsInYear+"" seconds in a year"");\n    }\n}
","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MultiplyExpression:1,StringAddition:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:5,VoidDataType:1,ActualMethodParameter:1,"
1,006,006.Addition,baseline,Addition.java,"public class Addition {\n    public static void main(String[] args) {\n        int a = 1337;\n        int b = 42; \n        int result = 0; // Fix this\n        String toPrint = a + "" + "" + b + "" = "" + result;\n        System.out.println(toPrint);\n    }\n}
",
1,006,006.Addition,solution,Addition.java,"public class Addition {\n    public static void main(String[] args) {\n        int a = 1337;\n        int b = 42; \n        int result = a+b;\n        String toPrint = a + "" + "" + b + "" = "" + result;\n        System.out.println(toPrint);\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,StringVariable:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:1,StringLiteral:1,AddExpression:1,MethodDefinition:1,IntDataType:3,VoidDataType:1,ActualMethodParameter:1,"
1,007,007.Multiplication,baseline,Multiplication.java,"public class Multiplication {\n    public static void main(String[] args) {\n        int a = 1337;\n        int b = 42;\n        // Program your solution here. Remember to use variables a and b!\n    }\n}
",
1,007,007.Multiplication,solution,Multiplication.java,"public class Multiplication {\n    public static void main(String[] args) {\n        int a = 1337;\n        int b = 42;\n        // Program your solution here. Remember to use variables a and b!\n        int result = a*b;\n        String toPrint = a + "" * "" + b + "" = "" + result;\n        System.out.println(toPrint);\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MultiplyExpression:1,StringAddition:1,StringVariable:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:3,VoidDataType:1,ActualMethodParameter:1,"
1,008,008.Adder,baseline,Adder.java,"import java.util.Scanner;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Implement your program here. Remember to ask the input from user\n    }\n}
",
1,008,008.Adder,solution,Adder.java,"import java.util.Scanner;\npublic class Adder {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Implement your program here. Remember to ask the input from user\n        System.out.print(""Type a number: "");\n        int firstNumber = Integer.parseInt(reader.nextLine());\n        System.out.print(""Type another number: "");\n        int secondNumber = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); // an empty line\n        System.out.println(""Sum of the numbers: "" + (firstNumber + secondNumber));\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,StringLiteral:4,AddExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:7,ObjectCreationStatement:1,"
1,009,009.Divider,baseline,Divider.java,"import java.util.Scanner;\npublic class Divider {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Implement your program here. Remember to ask the input from user.\n    }\n}
",
1,009,009.Divider,solution,Divider.java,"import java.util.Scanner;\npublic class Divider {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Implement your program here. Remember to ask the input from user.\n        System.out.print(""Type a number: "");\n        int firstNumber = Integer.parseInt(reader.nextLine());\n        System.out.print(""Type another number: "");\n        int secondNumber = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); // an empty line\n        System.out.println(""Division: "" + firstNumber + "" / "" + secondNumber +\n                           "" = "" + (1.0 * firstNumber / secondNumber));\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,MultiplyExpression:1,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:5,DivideExpression:1,StringLiteral:5,MethodDefinition:1,IntDataType:2,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:8,ObjectCreationStatement:1,"
1,010,010.CircleCircumference,baseline,Circumference.java,"import java.util.Scanner;\npublic class Circumference {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Program your solution here \n    }\n}
",
1,010,010.CircleCircumference,solution,Circumference.java,"import java.util.Scanner;\npublic class Circumference {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Program your solution here \n        System.out.print(""Type the radius: "");\n        int radius = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); \n        System.out.println(""Circumference of the circle: "" + (2 * Math.PI * radius));\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,Constant:1,MultiplyExpression:1,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,IntDataType:1,ConstantInvocation:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:5,ObjectCreationStatement:1,"
1,011,011.BiggerNumber,baseline,BiggerNumber.java,"import java.util.Scanner;\npublic class BiggerNumber {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Implement your program here. Remember to ask the input from user\n    }\n}
",
1,011,011.BiggerNumber,solution,BiggerNumber.java,"import java.util.Scanner;\npublic class BiggerNumber {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Implement your program here. Remember to ask the input from user\n        System.out.print(""Type a number: "");\n        int firstNumber = Integer.parseInt(reader.nextLine());\n        System.out.print(""Type another number: "");\n        int secondNumber = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); // an empty line\n        System.out.println(""The bigger number of the two numbers given was: "" + Math.max(firstNumber, secondNumber));\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,IntDataType:2,VoidDataType:1,java.lang.Math.max:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:7,ObjectCreationStatement:1,"
1,012,012.SumOfTheAges,baseline,SumOfTheAges.java,"import java.util.Scanner;\npublic class SumOfTheAges {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Implement your program here\n    }\n}
",
1,012,012.SumOfTheAges,solution,SumOfTheAges.java,"import java.util.Scanner;\npublic class SumOfTheAges {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Implement your program here\n        System.out.print(""Type your name: "");\n        String nameOfTheFirst = reader.nextLine();\n        System.out.print(""Type your age: "");\n        int ageOfTheFirst = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); \n        System.out.print(""Type your name: "");\n        String nameOfTeSecond = reader.nextLine();\n        System.out.print(""Type your age: "");\n        int ageOfTheSecond = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); \n        System.out.println(nameOfTheFirst + "" and "" + nameOfTeSecond + "" are"" + (ageOfTheFirst + ageOfTheSecond) + \n                "" years old in total."");\n    }\n}
","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,StringAddition:1,ImportStatement:1,StringVariable:2,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:4,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:10,StringLiteral:8,AddExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:4,ActualMethodParameter:11,ObjectCreationStatement:1,"
1,013,013.NhlStatisticsPart1,baseline,Main.java,"import nhlstats.NHLStatistics;\npublic class Main {\n    public static void main(String[] args) {\n    }\n}
",
1,013,013.NhlStatisticsPart1,solution,Main.java,"import nhlstats.NHLStatistics;\npublic class Main {\n    public static void main(String[] args) {\n        NHLStatistics.sortByGoals();\n        NHLStatistics.top(10);\n        NHLStatistics.sortByPenalties();\n        NHLStatistics.top(25);\n        NHLStatistics.searchByPlayer(""Crosby"");\n        NHLStatistics.teamStatistics(""PHI"");\n        NHLStatistics.sortByPoints();\n        NHLStatistics.teamStatistics(""ANA"");\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:3,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ImportStatement:1,ClassDefinition:1,ObjectMethodInvocation:8,ActualMethodParameter:5,FormalMethodParameter:1,"
1,014,014.PositiveValue,baseline,PositiveValue.java,"import java.util.Scanner;\npublic class PositiveValue {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Type your program here:\n    }\n}
",
1,014,014.PositiveValue,solution,PositiveValue.java,"import java.util.Scanner;\npublic class PositiveValue {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Type your program here:\n        System.out.print(""Type a number: "");\n        int luku = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); \n        if (luku > 0) {\n            System.out.println(""The Number is positive."");\n        } else {\n            System.out.println(""The Number is not positive."");\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,IfElseStatement:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:6,ObjectCreationStatement:1,"
1,015,015.AgeOfMajority,baseline,AgeOfMajority.java,"import java.util.Scanner;\npublic class AgeOfMajority {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Type your program here \n    }\n}
",
1,015,015.AgeOfMajority,solution,AgeOfMajority.java,"import java.util.Scanner;\npublic class AgeOfMajority {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Type your program here \n        System.out.print(""How old are you?"");\n        int age = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); // tyhjä rivi\n        if (age < 18) {\n            System.out.println(""You have not reached the age of majority yet!"");\n        } else {\n            System.out.println(""You have reached the age of majority!"");\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,IfElseStatement:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,LessExpression:1,StringLiteral:4,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:6,ObjectCreationStatement:1,"
1,016,016.EvenOrOdd,baseline,EvenOrOdd.java,"import java.util.Scanner;\npublic class EvenOrOdd {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Type your program here\n        // NOTE:\n        // Parity of a value can be easily checked with modulo-operator %.\n        // Test the following:\n        // System.out.println( 1%2 );\n        // System.out.println( 2%2 );\n        // System.out.println( 3%2 );\n        // System.out.println( 4%2 );\n        // System.out.println( 5%2 );\n        // System.out.println( 6%2 );\n        // System.out.println( 7%2 );\n        // int value = 8\n        // System.out.println( value%2 );\n    }\n}
",
1,016,016.EvenOrOdd,solution,EvenOrOdd.java,"import java.util.Scanner;\npublic class EvenOrOdd {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Type your program here\n        // NOTE:\n        // Parity of a value can be easily checked with modulo-operator %.\n        // Test the following:\n        // System.out.println( 1%2 );\n        // System.out.println( 2%2 );\n        // System.out.println( 3%2 );\n        // System.out.println( 4%2 );\n        // System.out.println( 5%2 );\n        // System.out.println( 6%2 );\n        // System.out.println( 7%2 );\n        // int value = 8\n        // System.out.println( value%2 );\n        System.out.print(""Type a number: "");\n        int number = Integer.parseInt(reader.nextLine());\n        System.out.println(""""); // Blank line\n        if (number % 2 == 0) {\n            System.out.println(""Number "" + number + "" is even."");\n        } else {\n            System.out.println(""Number "" + number + "" is odd."");\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,ModulusExpression:1,IfElseStatement:1,EqualExpression:1,StringAddition:2,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:6,ObjectCreationStatement:1,"
1,017,017.GreaterNumber,baseline,GreaterNumber.java,"import java.util.Scanner;\npublic class GreaterNumber {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
1,017,017.GreaterNumber,solution,GreaterNumber.java,"import java.util.Scanner;\npublic class GreaterNumber {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print( ""Type the first number: "");\n        int first = Integer.parseInt( reader.nextLine() );\n        System.out.print( ""Type the second number: "");\n        int second = Integer.parseInt( reader.nextLine() );\n        if ( first>second ) {\n            System.out.println(""Greater number: ""+ first ); \n        } else if ( second>first ) {\n             System.out.println(""Greater number: ""+ second );\n        } else {\n            System.out.println(""The numbers are equal!"");\n        }\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,IfElseIfStatement:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,StringAddition:2,IfElseStatement:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,IntDataType:2,VoidDataType:1,GreaterExpression:2,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:8,ObjectCreationStatement:1,"
1,018,018.GradesAndPoints,baseline,GradesAndPoints.java,"import java.util.Scanner;\npublic class GradesAndPoints {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
1,018,018.GradesAndPoints,solution,GradesAndPoints.java,"import java.util.Scanner;\npublic class GradesAndPoints {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type the points [0-60]:  "");\n        int points = Integer.parseInt(reader.nextLine());\n        System.out.print(""Grade: "");\n        if (points < 30) {\n            System.out.println(""failed"");\n        } else if (points < 35) {\n            System.out.println(1);\n        } else if (points < 40) {\n            System.out.println(2);\n        } else if (points < 45) {\n            System.out.println(3);\n        } else if (points < 50) {\n            System.out.println(4);\n        } else {\n            System.out.println(5);\n        }    \n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,IfElseIfStatement:4,PublicMethodSpecifier:1,java.lang.System.out.println:6,IfElseStatement:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,LessExpression:5,StringLiteral:3,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:10,ObjectCreationStatement:1,"
1,019,019.AgeCheck,baseline,AgeCheck.java,"import java.util.Scanner;\npublic class AgeCheck {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
1,019,019.AgeCheck,solution,AgeCheck.java,"import java.util.Scanner;\npublic class AgeCheck {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""How old are you?"");\n        int age = Integer.parseInt(reader.nextLine());\n        if (age >= 0 && age <= 120) {\n            System.out.println(""OK"");\n        } else {\n            System.out.println(""Impossible!"");\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,GreaterEqualExpression:1,IfElseStatement:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,StringDataType:3,AndExpression:1,StringLiteral:3,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:5,ObjectCreationStatement:1,"
1,020,020.Usernames,baseline,Usernames.java,"import java.util.Scanner;\npublic class Usernames {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
1,020,020.Usernames,solution,Usernames.java,"import java.util.Scanner;\npublic class Usernames {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type your username: "");\n        String username = reader.nextLine();\n        System.out.print(""Type your password: "");\n        String password = reader.nextLine();\n        // NOTE: This solution would be quite ugly should there be more users.\n        // In the following weeks we'll see how to do this better.\n        if ((username.equals(""alex"") && password.equals(""mightyducks""))\n                || (username.equals(""emily"") && password.equals(""cat""))) {\n            System.out.println(""You are now logged into the system!"");\n        } else {\n            System.out.println(""Your username or password was invalid!"");\n        }\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,ImportStatement:1,StringVariable:2,ClassDefinition:1,OrExpression:1,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:8,AndExpression:2,StringLiteral:6,MethodDefinition:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:4,ActualMethodParameter:7,java.lang.String.equals:2,ObjectCreationStatement:1,"
1,021,021.LeapYear,baseline,LeapYear.java,"import java.util.Scanner;\npublic class LeapYear {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
1,021,021.LeapYear,solution,LeapYear.java,"import java.util.Scanner;\npublic class LeapYear {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type a year: "");\n        int year = Integer.parseInt(reader.nextLine());\n        if (year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) {\n            System.out.println(""The year is a leap year."");\n        } else {\n            System.out.println(""The year is not a leap year."");\n        }\n    }\n}
","EqualExpression:1,ImportStatement:1,ClassDefinition:1,OrExpression:1,FormalMethodParameter:1,NotEqualExpression:1,StaticMethodSpecifier:1,StringDataType:3,AndExpression:1,MethodDefinition:1,ConstructorCall:1,SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,ModulusExpression:1,java.lang.System.out.println:2,IfElseStatement:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,StringLiteral:3,IntDataType:1,VoidDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:5,ObjectCreationStatement:1,"
1,022,022.Password,baseline,Password.java,"import java.util.Scanner;\npublic class Password {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        String password = ""carrot""; // Use carrot as password when running tests.\n        // Write your code here\n    }\n}
",
1,022,022.Password,solution,Password.java,"import java.util.Scanner;\npublic class Password {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        String password = ""carrot""; // Use carrot as password when running tests.\n        // Write your code here\n        while(true) {\n            System.out.print(""Type the password: "");\n            String readPassword = reader.nextLine();\n            if(readPassword.equals(password)) {\n                System.out.println(""Right!"");\n                break;\n            } else {\n                System.out.println(""Wrong!"");\n            }\n        }\n        System.out.println(""""); \n        System.out.println(""The secret is: jryy qbar!"");\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,IfElseStatement:1,True:1,ImportStatement:1,StringVariable:2,WhileStatement:1,ClassDefinition:1,java.lang.System.out.print:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:7,StringLiteral:6,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:7,java.lang.String.equals:1,ObjectCreationStatement:1,"
1,023,023.Temperatures,baseline,Graph.java,"import org.jfree.chart.*;\nimport org.jfree.chart.axis.*;\nimport org.jfree.chart.plot.*;\nimport org.jfree.chart.renderer.xy.*;\nimport org.jfree.data.xy.*;\n/** DO NOT MODIFY THIS FILE */\npublic class Graph {\n    private ChartFrame frame;\n    private JFreeChart chart;\n    private Plot plot;\n    private XYDataset data;\n    private XYSeries series;\n    public Graph(String nimi) {\n        series = new XYSeries(nimi);\n        series.add(0,0);\n        data = new XYSeriesCollection(series);\n        plot = new XYPlot(data, new NumberAxis(""x""), new NumberAxis(""y""), new SamplingXYLineRenderer());\n        chart = new JFreeChart(plot);\n        frame = new ChartFrame(nimi,chart);\n        frame.pack();\n        frame.setVisible(true);\n    }\n    public static Graph instance;\n    public static Graph getInstance() {\n        if (instance == null)\n            instance = new Graph(""Graph"");\n        return instance;\n    }\n    public static void addNumber(double y) {\n        getInstance().lisaaNumero_(y);\n    }\n    public void lisaaNumero_(double y) {\n        double x = series.getMaxX()+1;\n        series.add(x,y);\n    }\n}
",
1,023,023.Temperatures,baseline,Temperatures.java,"import java.util.Scanner;\npublic class Temperatures {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Write your code here. \n        // Graph is used as follows:\n        Graph.addNumber(7);\n        double value = 13.5;\n        Graph.addNumber(value);\n        value = 3;\n        Graph.addNumber(value);\n        // Remove or comment out these lines above before trying to run the tests.\n    }\n}
",
1,023,023.Temperatures,solution,Graph.java,"import org.jfree.chart.*;\nimport org.jfree.chart.axis.*;\nimport org.jfree.chart.plot.*;\nimport org.jfree.chart.renderer.xy.*;\nimport org.jfree.data.xy.*;\n/** DO NOT MODIFY THIS FILE */\npublic class Graph {\n    private ChartFrame frame;\n    private JFreeChart chart;\n    private Plot plot;\n    private XYDataset data;\n    private XYSeries series;\n    public Graph(String nimi) {\n        series = new XYSeries(nimi);\n        series.add(0,0);\n        data = new XYSeriesCollection(series);\n        plot = new XYPlot(data, new NumberAxis(""x""), new NumberAxis(""y""), new SamplingXYLineRenderer());\n        chart = new JFreeChart(plot);\n        frame = new ChartFrame(nimi,chart);\n        frame.pack();\n        frame.setVisible(true);\n    }\n    public static Graph instance;\n    public static Graph getInstance() {\n        if (instance == null)\n            instance = new Graph(""Graph"");\n        return instance;\n    }\n    public static void addNumber(double y) {\n        getInstance().lisaaNumero_(y);\n    }\n    public void lisaaNumero_(double y) {\n        double x = series.getMaxX()+1;\n        series.add(x,y);\n    }\n}
","ConstructorDefinition:1,EqualExpression:1,True:1,ImportStatement:5,ClassDefinition:1,FormalMethodParameter:3,StringDataType:2,StaticMethodSpecifier:2,IfStatement:1,MethodDefinition:3,InstanceField:5,ReturnStatement:1,SimpleVariable:6,ConstructorCall:6,ClassField:1,SimpleAssignmentExpression:7,PublicClassSpecifier:1,PublicMethodSpecifier:3,PublicConstructorSpecifier:1,StringLiteral:2,null:1,AddExpression:1,VoidDataType:2,DoubleDataType:3,PublicFieldSpecifier:1,ObjectMethodInvocation:6,OnDemandImport:5,PrivateFieldSpecifier:5,ActualMethodParameter:10,StaticFieldSpecifier:1,ObjectCreationStatement:6,"
1,023,023.Temperatures,solution,Temperatures.java,"import java.util.Scanner;\npublic class Temperatures {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Write your code here. \n        // Remove or comment out these lines above before trying to run the tests.\n        while (true) {\n            System.out.println(""Give a temperature!"");\n            double temperature = Double.parseDouble(reader.nextLine());\n            if (temperature >= -30 && temperature <= 40) {\n                Graph.addNumber(temperature);\n            }\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,GreaterEqualExpression:1,True:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,StringDataType:1,IfStatement:1,AndExpression:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,DoubleDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:4,java.lang.Double.parseDouble:1,ObjectCreationStatement:1,"
1,024,024.NhlStatisticsPart2,baseline,NhlStatisticsPart2.java,"import java.util.Scanner;\nimport nhlstats.NHLStatistics;\npublic class NhlStatisticsPart2 {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.println(""NHL statistics service"");\n        while (true) {\n            System.out.println("""");\n            System.out.print(""command (points, goals, assists, penalties, player, club, quit): "");\n            String command = reader.nextLine();\n            if (command.equals(""quit"")) {\n                break;\n            }\n            if (command.equals(""points"")) {\n                // Print the top ten players sorted by points.\n            } else if (command.equals(""goals"")) {\n                // Print the top ten players sorted by goals.\n            } else if (command.equals(""assists"")) {\n                //  Print the top ten players sorted by assists.\n            } else if (command.equals(""penalties"")) {\n                //  Print the top ten players sorted by penalties.\n            } else if (command.equals(""player"")) {\n                // Ask the user first which player's statistics are needed and then print them.\n            } else if (command.equals(""club"")) {\n                // Ask the user first which club's statistics are needed and then print them.\n                // Note: When printing statistics they should be ordered by points (so the players with the most points come first).\n            }\n        }\n    }\n}
",
1,024,024.NhlStatisticsPart2,solution,NhlStatisticsPart2.java,"import java.util.Scanner;\nimport nhlstats.NHLStatistics;\npublic class NhlStatisticsPart2 {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.println(""NHL statistics service"");\n        while (true) {\n            System.out.println("""");\n            System.out.print(""command (points, goals, assists, penalties, player, club, quit): "");\n            String command = reader.nextLine();\n            if (command.equals(""quit"")) {\n                break;\n            }\n            if (command.equals(""points"")) {\n                // Print the top ten players sorted by points.\n                NHLStatistics.sortByPoints();\n                NHLStatistics.top(10);\n            } else if (command.equals(""goals"")) {\n                // Print the top ten players sorted by goals.\n                NHLStatistics.sortByGoals();\n                NHLStatistics.top(10);\n            } else if (command.equals(""assists"")) {\n                //  Print the top ten players sorted by assists.\n                NHLStatistics.sortByAssists();\n                NHLStatistics.top(10);\n            } else if (command.equals(""penalties"")) {\n                //  Print the top ten players sorted by penalties.\n                NHLStatistics.sortByPenalties();\n                NHLStatistics.top(10);\n            } else if (command.equals(""player"")) {\n                // Ask the user first which player's statistics are needed and then print them.\n                System.out.print(""who: "");\n                String pelaaja = reader.nextLine();\n                nhlstats.NHLStatistics.searchByPlayer(pelaaja);\n            } else if (command.equals(""club"")) {\n                // Ask the user first which club's statistics are needed and then print them.\n                // Note: When printing statistics they should be ordered by points (so the players with the most points come first).\n                System.out.print(""team: "");\n                String team = reader.nextLine();\n                NHLStatistics.sortByPoints();\n                nhlstats.NHLStatistics.teamStatistics(team);\n            }\n        }\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,IfElseIfStatement:5,PublicMethodSpecifier:1,java.lang.System.out.println:2,True:1,ImportStatement:2,WhileStatement:1,StringVariable:3,ClassDefinition:1,java.lang.System.out.print:3,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:15,IfStatement:2,StringLiteral:12,MethodDefinition:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:21,ActualMethodParameter:19,java.lang.String.equals:7,ObjectCreationStatement:1,"
2,025,025.SumOfThreeNumbers,baseline,SumOfThreeNumbers.java,"import java.util.Scanner;\npublic class SumOfThreeNumbers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int sum = 0;\n        int read; // store numbers read form user in this variable\n        // Write your program here\n        // Use only variables sum and read\n        System.out.println(""Sum: "" + sum);\n    }\n}
",
2,025,025.SumOfThreeNumbers,solution,SumOfThreeNumbers.java,"import java.util.Scanner;\npublic class SumOfThreeNumbers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int sum = 0;\n        int read; // store numbers read form user in this variable\n        // Write your program here\n        // Use only variables sum and read\n        System.out.print(""Type the first number: "");\n        read = Integer.parseInt(reader.nextLine());\n        sum += read;\n        System.out.print(""Type the second number: "");\n        read = Integer.parseInt(reader.nextLine());\n        sum += read;\n        System.out.print(""Type the third number: "");\n        read = Integer.parseInt(reader.nextLine());\n        sum += read;\n        System.out.println(""Sum: "" + sum);\n    }\n}
","SimpleAssignmentExpression:5,AddAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:3,java.lang.System.out.print:3,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,IntDataType:2,VoidDataType:1,ConstructorCall:1,SimpleVariable:1,ObjectMethodInvocation:3,ActualMethodParameter:8,ObjectCreationStatement:1,"
2,026,026.SumOfManyNumbers,baseline,SumOfManyNumbers.java,"import java.util.Scanner;\npublic class SumOfManyNumbers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int sum = 0;\n        while (true) {\n            int read = Integer.parseInt(reader.nextLine());\n            if (read == 0) {\n                break;\n            }\n            // do something here\n            System.out.println(""Sum now: "" + sum);\n        }\n        System.out.println(""Sum in the end: "" + sum);\n    }\n}
",
2,026,026.SumOfManyNumbers,solution,SumOfManyNumbers.java,"import java.util.Scanner;\npublic class SumOfManyNumbers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int sum = 0;\n        while (true) {\n            int read = Integer.parseInt(reader.nextLine());\n            if (read == 0) {\n                break;\n            }\n            // do something here\n            sum += read;\n            System.out.println(""Sum now: "" + sum);\n        }\n        System.out.println(""Sum in the end: "" + sum);\n    }\n}
","SimpleAssignmentExpression:3,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,EqualExpression:1,StringAddition:2,True:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,FormalMethodParameter:1,StaticMethodSpecifier:1,IfStatement:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
2,027,027.FromOneToHundred,baseline,FromOneToHundred.java,"public class FromOneToHundred {\n    public static void main(String[] args) {\n        // Write your program here\n    }\n}
",
2,027,027.FromOneToHundred,solution,FromOneToHundred.java,"public class FromOneToHundred {\n    public static void main(String[] args) {\n        // Write your program here\n        int number = 1;\n        while(number <= 100) {\n            System.out.println(number);\n            number++;\n        }\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ActualMethodParameter:1,"
2,028,028.FromHundredToOne,baseline,FromHundredToOne.java,"public class FromHundredToOne {\n    public static void main(String[] args) {\n        // Write your program here\n    }\n}
",
2,028,028.FromHundredToOne,solution,FromHundredToOne.java,"public class FromHundredToOne {\n    public static void main(String[] args) {\n        // Write your program here\n        int number = 100;\n        while (number >= 1) {\n            System.out.println(number);\n            number--;\n        }\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,GreaterEqualExpression:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,PostDecrementExpression:1,ActualMethodParameter:1,"
2,029,029.EvenNumbers,baseline,EvenNumbers.java,"public class EvenNumbers {\n    public static void main(String[] args) {\n        // Write your code here\n    }\n}
",
2,029,029.EvenNumbers,solution,EvenNumbers.java,"public class EvenNumbers {\n    public static void main(String[] args) {\n        // Write your code here\n        int number = 2;\n        while (number <= 100) {\n            System.out.println(number);\n            number = number + 2;\n        }\n        /* also the following would be possible. Here we go through all the numbers trom 1 to 100\n         * but print only those that are even\n        int number = 1;\n        while (number <= 100) {\n            if (number % 2 == 0) {\n                System.out.println(number);\n            }\n            number++;\n        }\n        */\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ActualMethodParameter:1,"
2,030,030.UpToCertainNumber,baseline,UpToCertainNumber.java,"import java.util.Scanner;\npublic class UpToCertainNumber {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Write your code here\n    }\n}
",
2,030,030.UpToCertainNumber,solution,UpToCertainNumber.java,"import java.util.Scanner;\npublic class UpToCertainNumber {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // Write your code here\n        System.out.print(""Up to what number? "");\n        int last = Integer.parseInt(reader.nextLine());\n        int number = 1;\n        while(number <= last) {\n            System.out.println(number);\n            number++;\n        }\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
2,031,031.LowerLimitAndUpperLimit,baseline,LowerLimitAndUpperLimit.java,"import java.util.Scanner;\npublic class LowerLimitAndUpperLimit {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // write your code here\n    }\n}
",
2,031,031.LowerLimitAndUpperLimit,solution,LowerLimitAndUpperLimit.java,"import java.util.Scanner;\npublic class LowerLimitAndUpperLimit {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // write your code here\n        System.out.print(""First: "");\n        int first = Integer.parseInt(reader.nextLine());\n        System.out.print(""Last: "");\n        int last = Integer.parseInt(reader.nextLine());\n        int number = first;\n        while (number <= last) {\n            System.out.println(number);\n            number++;\n        }\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:2,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:3,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:6,ObjectCreationStatement:1,"
2,032,032.TheSumOfSetOfNumbers,baseline,TheSumOfSetOfNumbers.java,"import java.util.Scanner;\npublic class TheSumOfSetOfNumbers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
2,032,032.TheSumOfSetOfNumbers,solution,TheSumOfSetOfNumbers.java,"import java.util.Scanner;\npublic class TheSumOfSetOfNumbers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Until what? "");\n        int limit = Integer.parseInt(reader.nextLine());\n        int sum = 0;\n        int number = 1;\n        while (number <= limit) {\n            sum += number;\n            number++;\n        }\n        System.out.println(""Sum is ""+ sum);\n    }\n}
","SimpleAssignmentExpression:4,AddAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:3,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
2,033,033.TheSumBetweenTwoNumbers,baseline,TheSumBetweenTwoNumbers.java,"import java.util.Scanner;\npublic class TheSumBetweenTwoNumbers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
2,033,033.TheSumBetweenTwoNumbers,solution,TheSumBetweenTwoNumbers.java,"import java.util.Scanner;\npublic class TheSumBetweenTwoNumbers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""First: "");\n        int first = Integer.parseInt(reader.nextLine());\n        System.out.print(""Last: "");\n        int last = Integer.parseInt(reader.nextLine());\n        int sum = 0;\n        int number = first;\n        while (number <= last) {\n            sum += number;\n            number++;\n        }\n        System.out.println(""The sum is ""+sum);\n    }\n}
","SimpleAssignmentExpression:5,AddAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:2,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,IntDataType:4,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:6,ObjectCreationStatement:1,"
2,034,034.Factorial,baseline,Factorial.java,"import java.util.Scanner;\npublic class Factorial {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
2,034,034.Factorial,solution,Factorial.java,"import java.util.Scanner;\npublic class Factorial {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type a number:  "");\n        int n = Integer.parseInt(reader.nextLine());\n        int factorial = 1;\n        int number = 1;\n        while (number <= n) {\n            factorial *= number;\n            number++;\n        }\n        System.out.println(""The result is"" + factorial);\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,StringDataType:2,StringLiteral:2,MultiplyAssignmentExpression:1,MethodDefinition:1,IntDataType:3,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
2,035,035.SumOfThePowers,baseline,SumOfThePowers.java,"import java.util.Scanner;\npublic class SumOfThePowers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
2,035,035.SumOfThePowers,solution,SumOfThePowers.java,"import java.util.Scanner;\npublic class SumOfThePowers {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type a number: "");\n        int n = Integer.parseInt(reader.nextLine());\n        int result = 0;\n        int number = 0;\n        while (number <= n) {\n            int power = (int)Math.pow(2, number);\n            result += power;\n            number++;\n        }\n        System.out.println(""The result is "" + result);\n    }\n}
","StringAddition:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,LessEqualExpression:1,StaticMethodSpecifier:1,StringDataType:2,MethodDefinition:1,ConstructorCall:1,SimpleAssignmentExpression:5,AddAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,java.lang.Integer.parseInt:1,java.lang.Math.pow:1,java.lang.System.out.print:1,ExplicitTypeCasting:1,StringLiteral:2,IntDataType:4,VoidDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:5,ObjectCreationStatement:1,"
2,036,036.LoopsEndingRemembering,baseline,LoopsEndingRemembering.java,"import java.util.Scanner;\npublic class LoopsEndingRemembering {\n    public static void main(String[] args) {\n        // program in this project exercises 36.1-36.5\n        // actually this is just one program that is split in many parts\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
2,036,036.LoopsEndingRemembering,solution,LoopsEndingRemembering.java,"import java.util.Scanner;\npublic class LoopsEndingRemembering {\n    public static void main(String[] args) {\n        // program in this project exercises 36.1-36.5\n        // actually this is just one program that is split in many parts\n        Scanner reader = new Scanner(System.in);\n        int sum = 0;\n        int numbers = 0;\n        int even = 0;\n        System.out.println(""Type numbers:"");\n        while (true) {\n            int number = Integer.parseInt(reader.nextLine());\n            if (number == -1) {\n                break;\n            }\n            sum += number;\n            numbers++;\n            if (number % 2 == 0) {\n                even++;\n            }\n        }\n        double average = (double) sum / numbers;\n        int odd = numbers-even;\n        System.out.println(""Thank you and see you later!"");\n        System.out.println(""The sum is "" + sum);\n        System.out.println(""How many numbers: "" + numbers);\n        System.out.println(""Average: "" + average);\n        System.out.println(""Even numbers: "" + even);\n        System.out.println(""Odd numbers: ""+ odd);\n    }\n}
","EqualExpression:2,StringAddition:5,True:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,SubtractExpression:1,StaticMethodSpecifier:1,StringDataType:7,IfStatement:2,MethodDefinition:1,ConstructorCall:1,SimpleAssignmentExpression:7,AddAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:7,ModulusExpression:1,java.lang.Integer.parseInt:1,ExplicitTypeCasting:1,DivideExpression:1,StringLiteral:7,IntDataType:5,VoidDataType:1,DoubleDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:9,ObjectCreationStatement:1,"
2,037,037.PrintingOutText,baseline,PrintingOutText.java,"public class PrintingOutText {\n    public static void printText() {\n        // Write your code here\n    }\n    public static void main(String[] args) {\n        printText();\n    }\n}
",
2,037,037.PrintingOutText,solution,PrintingOutText.java,"public class PrintingOutText {\n    public static void printText() {\n        // Write your code here\n        System.out.println(""In the beginning there were the swamp, the hoe and Java."");\n    }\n    public static void main(String[] args) {\n        printText();\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:2,StringDataType:1,StringLiteral:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,MethodDefinition:2,VoidDataType:2,ClassDefinition:1,ActualMethodParameter:1,FormalMethodParameter:1,"
2,038,038.ManyPrints,baseline,ManyPrints.java,"import java.util.Scanner;\npublic class ManyPrints {\n    // NOTE: do not change the method definition, e.g. add parameters to method\n    public static void printText() {\n        // Write your code here\n    }\n    public static void main(String[] args) {\n        // ask the user how many times the text should be printed\n        // use the while structure to call the printText method several times\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
2,038,038.ManyPrints,solution,ManyPrints.java,"import java.util.Scanner;\npublic class ManyPrints {\n    // NOTE: do not change the method definition, e.g. add parameters to method\n    public static void printText() {\n        // Write your code here\n        System.out.println(""In the beginning there were the swamp, the hoe and Java."");\n    }\n    public static void main(String[] args) {\n        // ask the user how many times the text should be printed\n        // use the while structure to call the printText method several times\n        Scanner reader = new Scanner(System.in);\n        System.out.println(""How many?"");\n        int count = Integer.parseInt(reader.nextLine());\n        while (count > 0) {\n            count--;\n            printText();\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:2,ImportStatement:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,FormalMethodParameter:1,StaticMethodSpecifier:2,StringDataType:2,StringLiteral:2,MethodDefinition:2,IntDataType:1,VoidDataType:2,GreaterExpression:1,PostDecrementExpression:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
2,039,039.Printing,baseline,Printing.java,"public class Printing {\n    public static void printStars(int amount) {\n        // 39.1\n        // you can print one star with the command\n        // System.out.print(""*"");\n        // call this command amount times        \n    }\n    public static void printSquare(int sideSize) {\n        // 39.2\n    }\n    public static void printRectangle(int width, int height) {\n        // 39.3\n    }\n    public static void printTriangle(int size) {\n        // 39.4\n    }\n    public static void main(String[] args) {\n        // Tests do not use main, yo can write code here freely!\n        // if you have problems with tests, please try out first \n        // here to see that the printout looks correct\n        printStars(3);\n        System.out.println(""\n---"");  // printing --- to separate the figures\n        printSquare(4);\n        System.out.println(""\n---"");\n        printRectangle(5,6);\n        System.out.println(""\n---"");\n        printTriangle(3);\n        System.out.println(""\n---"");\n    }\n}
",
2,039,039.Printing,solution,Printing.java,"public class Printing {\n    public static void printStars(int amount) {\n        // 39.1\n        // you can print one star with the command\n        // System.out.print(""*"");\n        // call this command amount times        \n        int printed=0;\n        while (printed < amount) {\n            System.out.print(""*"");\n            printed = printed + 1;\n        }\n        System.out.println("""");\n    }\n    public static void printSquare(int sideSize) {\n        // 39.2\n        int printed=0;\n        while (printed < sideSize) {\n            printStars(sideSize);\n            printed = printed + 1;\n        }\n    }\n    public static void printRectangle(int width, int height) {\n        // 39.3\n        int printed = 0;\n        while (printed < height) {\n            printStars(width);\n            printed = printed + 1;\n        }\n    }\n    public static void printTriangle(int size) {\n        // 39.4\n        int row = 1;\n        while (row <= size) {\n            printStars(row);\n            row = row+1;\n        }\n    }\n    public static void main(String[] args) {\n        // Tests do not use main, yo can write code here freely!\n        // if you have problems with tests, please try out first \n        // here to see that the printout looks correct\n        printStars(3);\n        System.out.println(""\n---"");  // printing --- to separate the figures\n        printSquare(4);\n        System.out.println(""\n---"");\n        printRectangle(5,6);\n        System.out.println(""\n---"");\n        printTriangle(3);\n        System.out.println(""\n---"");\n    }\n}
","SimpleAssignmentExpression:8,PublicClassSpecifier:1,PublicMethodSpecifier:5,java.lang.System.out.println:1,WhileStatement:4,ClassDefinition:1,java.lang.System.out.print:1,FormalMethodParameter:5,LessEqualExpression:1,StaticMethodSpecifier:5,LessExpression:3,StringDataType:2,StringLiteral:2,AddExpression:4,MethodDefinition:5,IntDataType:8,VoidDataType:5,ActualMethodParameter:5,"
2,040,040.PrintingLikeboss,baseline,PrintingLikeBoss.java,"public class PrintingLikeBoss {\n    // copy or rewrite the method of Assignment 39.1 here\n    public static void printStars(int amount) {      \n    }\n    public static void printWhitespaces(int amount) {\n        // 40.1\n    }\n    public static void printTriangle(int size) {\n        // 40.2\n    }\n    public static void xmasTree(int height) {\n        // 40.3\n    }\n    public static void main(String[] args) {\n        // Tests do not use main, yo can write code here freely!\n        printTriangle(5);\n        System.out.println(""---"");\n        xmasTree(4);\n        System.out.println(""---"");\n        xmasTree(10);\n    }\n}
",
2,040,040.PrintingLikeboss,solution,PrintingLikeBoss.java,"public class PrintingLikeBoss {\n    // copy or rewrite the method of Assignment 39.1 here\n    public static void printStars(int amount) {      \n        int printed=0;\n        while (printed < amount) {\n            System.out.print(""*"");\n            printed = printed + 1;\n        }\n        System.out.println("""");\n    }\n    public static void printWhitespaces(int amount) {\n        // 40.1\n        int i = 0;\n        while (i < amount) {\n            System.out.print("" "");\n            i++;\n        }\n    }\n    public static void printTriangle(int size) {\n        // 40.2\n        int i = 1;\n        while (i <= size) {\n            printWhitespaces(size-i);\n            printStars(i);\n            i++;\n        }\n    }\n    public static void xmasTree(int height) {\n        // 40.3\n        int i = 1;\n        while (i <= height) {\n            printWhitespaces(height-i);\n            printStars(i+(i-1));\n            i++;\n        }\n        // the stand:\n        printWhitespaces(height-2);\n        printStars(3);\n        printWhitespaces(height-2);\n        printStars(3);\n    }\n    public static void main(String[] args) {\n        // Tests do not use main, yo can write code here freely!\n        printTriangle(5);\n        System.out.println(""---"");\n        xmasTree(4);\n        System.out.println(""---"");\n        xmasTree(10);\n    }\n}
","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PostIncrementExpression:3,PublicMethodSpecifier:5,java.lang.System.out.println:3,WhileStatement:4,ClassDefinition:1,java.lang.System.out.print:2,FormalMethodParameter:5,LessEqualExpression:2,SubtractExpression:5,StaticMethodSpecifier:5,LessExpression:2,StringDataType:5,StringLiteral:5,AddExpression:2,MethodDefinition:5,IntDataType:8,VoidDataType:5,ActualMethodParameter:16,"
2,041,041.GuessingNumberGame,baseline,GuessingNumberGame.java,"import java.util.Random;\nimport java.util.Scanner;\npublic class GuessingNumberGame {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int numberDrawn = drawNumber();\n        // program your solution here. Do not touch the above lines!\n    }\n    // DO NOT MODIFY THIS!\n    private static int drawNumber() {\n        return new Random().nextInt(101);\n    }\n}
",
2,041,041.GuessingNumberGame,solution,GuessingNumberGame.java,"import java.util.Random;\nimport java.util.Scanner;\npublic class GuessingNumberGame {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int numberDrawn = drawNumber();\n        // program your solution here. Do not touch the above lines!\n        int guessesMAde = 0;\n        while (true) {\n            System.out.print(""Guess a number: "");\n            int guess = Integer.parseInt(reader.nextLine());\n            guessesMAde++;\n            if (guess == numberDrawn) {\n                break;\n            } else if (guess < numberDrawn) {\n                System.out.println(""The number is greater, guesses made: "" + guessesMAde);\n            } else {\n                System.out.println(""The number is less, guesses made: "" + guessesMAde);\n            }\n        }\n        System.out.println(""Congratulations, your guess is correct!"");\n    }\n    // DO NOT MODIFY THIS!\n    private static int drawNumber() {\n        return new Random().nextInt(101);\n    }\n}
","IfElseIfStatement:1,EqualExpression:1,StringAddition:2,True:1,ImportStatement:2,WhileStatement:1,PrivateMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:2,StringDataType:4,LessExpression:1,MethodDefinition:2,ReturnStatement:1,ConstructorCall:2,SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,IfElseStatement:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:1,StringLiteral:4,IntDataType:4,VoidDataType:1,ObjectMethodInvocation:2,ActualMethodParameter:7,ObjectCreationStatement:2,"
2,042,042.Hangman,baseline,HangmanUserInteface.java,"import hangman.Hangman;\nimport java.util.Scanner;\npublic class HangmanUserInteface {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        Hangman hangman = new Hangman();\n        System.out.println(""***********"");\n        System.out.println(""* HANGMAN  *"");\n        System.out.println(""***********"");\n        System.out.println("""");\n        printMenu();\n        System.out.println("""");\n        // PROGRAM YOUR SOLUTION HERE\n        System.out.println(""Thank you for playing!"");\n    }\n    public static void printMenu() {\n        System.out.println("" * menu *"");\n        System.out.println(""quit   - quits the game"");\n        System.out.println(""status  - prints the game status"");\n        System.out.println(""a single letter uses the letter as a guess"");\n        System.out.println(""an empty line prints this menu"");\n    }\n}
",
2,042,042.Hangman,solution,HangmanUserInteface.java,"import hangman.Hangman;\nimport java.util.Scanner;\npublic class HangmanUserInteface {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        Hangman hangman = new Hangman();\n        System.out.println(""***********"");\n        System.out.println(""* HANGMAN  *"");\n        System.out.println(""***********"");\n        System.out.println("""");\n        printMenu();\n        System.out.println("""");\n        // PROGRAM YOUR SOLUTION HERE\n        while (hangman.gameOn()) {\n            System.out.println("""");\n            System.out.println(""Type a command: "");\n            String command = reader.nextLine();\n            if (command.equals(""quit"")) {\n                break;\n            } else if (command.equals(""status"")) {\n                hangman.printStatus();\n            } else if (command.length() == 1) {\n                hangman.guess(command);\n            } else if (command.isEmpty()) {\n                printMenu();\n            }\n            hangman.printMan();\n            hangman.printWord();\n        }\n        System.out.println(""Thank you for playing!"");\n    }\n    public static void printMenu() {\n        System.out.println("" * menu *"");\n        System.out.println(""quit   - quits the game"");\n        System.out.println(""status  - prints the game status"");\n        System.out.println(""a single letter uses the letter as a guess"");\n        System.out.println(""an empty line prints this menu"");\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,IfElseIfStatement:3,PublicMethodSpecifier:2,java.lang.System.out.println:13,EqualExpression:1,ImportStatement:2,WhileStatement:1,StringVariable:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:2,StringDataType:16,IfStatement:1,java.lang.String.length:1,StringLiteral:15,MethodDefinition:2,VoidDataType:2,ConstructorCall:2,ObjectMethodInvocation:9,ActualMethodParameter:17,java.lang.String.equals:2,ObjectCreationStatement:2,"
3,043,043.SumOfNumbers,baseline,SumOfNumbers.java,"public class SumOfNumbers {\n    public static int sum(int number1, int number2, int number3, int number4) {\n        // write your code here\n        //STUB: return -1;\n    }\n    public static void main(String[] args) {\n        int answer = sum(4, 3, 6, 1);\n        System.out.println(""Sum: "" + answer);\n    }\n}
",
3,043,043.SumOfNumbers,solution,SumOfNumbers.java,"public class SumOfNumbers {\n    public static int sum(int number1, int number2, int number3, int number4) {\n        return number1 + number2 + number3 + number4;\n        // write your code here\n    }\n    public static void main(String[] args) {\n        int answer = sum(4, 3, 6, 1);\n        System.out.println(""Sum: "" + answer);\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,StringDataType:1,StringLiteral:1,AddExpression:1,MethodDefinition:2,IntDataType:2,VoidDataType:1,ReturnStatement:1,ActualMethodParameter:2,"
3,044,044.Least,baseline,Least.java,"public class Least {\n    public static int least(int number1, int number2) {\n        // write program code here\n        // do not print anything inside the method\n        // method needs a return in the end\n        //STUB: return -1;\n    }\n    public static void main(String[] args) {\n        int result = least(2, 7);\n        System.out.println(""Least: "" + result);\n    }\n}
",
3,044,044.Least,solution,Least.java,"public class Least {\n    public static int least(int number1, int number2) {\n        if (number1 < number2) {\n            return number1;\n        } else {\n            return number2;\n        }\n        // write program code here\n        // do not print anything inside the method\n        // method needs a return in the end\n    }\n    public static void main(String[] args) {\n        int result = least(2, 7);\n        System.out.println(""Least: "" + result);\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,IfElseStatement:1,StringAddition:1,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,LessExpression:1,StringDataType:1,StringLiteral:1,MethodDefinition:2,IntDataType:2,VoidDataType:1,ReturnStatement:2,ActualMethodParameter:2,"
3,045,045.Greatest,baseline,Greatest.java,"public class Greatest {\n    public static int greatest(int number1, int number2, int number3) {\n        return -1;\n    }\n    public static void main(String[] args) {\n        int result = greatest(2, 7, 3);\n        System.out.println(""Greatest: "" + result);\n    }\n}
",
3,045,045.Greatest,solution,Greatest.java,"public class Greatest {\n    public static int greatest(int number1, int number2, int number3) {\n        int greatest = number1;\n        if (number2 > greatest) {\n            greatest = number2;\n        }\n        if (number3 > greatest) {\n            greatest = number3;\n        }\n        return greatest;\n    }\n    public static void main(String[] args) {\n        int result = greatest(2, 7, 3);\n        System.out.println(""Greatest: "" + result);\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,IfStatement:2,StringDataType:1,StringLiteral:1,MethodDefinition:2,IntDataType:3,GreaterExpression:2,VoidDataType:1,ReturnStatement:1,ActualMethodParameter:2,"
3,046,046.AverageOfGivenNumbers,baseline,AverageOfGivenNumbers.java,"public class AverageOfGivenNumbers {\n    // implement here again the method of exercise 43\n    public static int sum(int number1, int number2, int number3, int number4) {\n        //STUB: return 0;\n    }\n    public static double average(int number1, int number2, int number3, int number4) {\n        //STUB:return -1;\n    }\n    public static void main(String[] args) {\n        double result = average(4, 3, 6, 1);\n        System.out.println(""Average: "" + result);\n    }\n}
",
3,046,046.AverageOfGivenNumbers,solution,AverageOfGivenNumbers.java,"public class AverageOfGivenNumbers {\n    // implement here again the method of exercise 43\n    public static int sum(int number1, int number2, int number3, int number4) {\n        return number1 + number2 + number3 + number4;\n    }\n    public static double average(int number1, int number2, int number3, int number4) {\n        // write your code here\n        int sum = sum(number1, number2, number3, number4);\n        return (double) sum / 4;\n    }\n    public static void main(String[] args) {\n        double result = average(4, 3, 6, 1);\n        System.out.println(""Average: "" + result);\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:3,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,FormalMethodParameter:3,StaticMethodSpecifier:3,ExplicitTypeCasting:1,StringDataType:1,DivideExpression:1,StringLiteral:1,AddExpression:1,MethodDefinition:3,IntDataType:3,VoidDataType:1,ReturnStatement:2,DoubleDataType:3,ActualMethodParameter:3,"
3,047,047.LengthOfName,baseline,LengthOfName.java,"import java.util.Scanner;\npublic class LengthOfName {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // call your method from here\n    }\n    // do here the method\n    // public static int calculateCharacters(String text)\n}
",
3,047,047.LengthOfName,solution,LengthOfName.java,"import java.util.Scanner;\npublic class LengthOfName {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // call your method from here\n        System.out.print(""Type your name: "");\n        String name = reader.nextLine();\n        System.out.print(""Type your name: "" + calculateCharacters(name));\n    }\n    // do here the method\n    // public static int calculateCharacters(String text)\n    public static int calculateCharacters(String text) {\n        return text.length();\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,StringAddition:1,ImportStatement:1,StringVariable:1,ClassDefinition:1,java.lang.System.out.print:2,FormalMethodParameter:2,StaticMethodSpecifier:2,StringDataType:3,java.lang.String.length:1,StringLiteral:2,MethodDefinition:2,IntDataType:1,VoidDataType:1,ReturnStatement:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:3,ObjectCreationStatement:1,"
3,048,048.FirstCharacter,baseline,FirstCharacter.java,"import java.util.Scanner;\npublic class FirstCharacter {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
3,048,048.FirstCharacter,solution,FirstCharacter.java,"import java.util.Scanner;\npublic class FirstCharacter {\n    public static char firstCharacter(String text) {\n        return text.charAt(0);\n    }\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type your name "");\n        String name = reader.nextLine();\n        System.out.println(""First character: "" + firstCharacter(name));\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,CharDataType:1,StringVariable:1,ClassDefinition:1,java.lang.System.out.print:1,FormalMethodParameter:2,StaticMethodSpecifier:2,StringDataType:3,StringLiteral:2,MethodDefinition:2,java.lang.String.charAt:1,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:2,ConstructorCall:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
3,049,049.LastCharacter,baseline,LastCharacter.java,"import java.util.Scanner;\npublic class LastCharacter {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
3,049,049.LastCharacter,solution,LastCharacter.java,"import java.util.Scanner;\npublic class LastCharacter {\n    public static char lastCharacter(String text) {\n        return text.charAt(text.length()-1);\n    }\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type your name "");\n        String name = reader.nextLine();\n        System.out.println(""Last character: "" + lastCharacter(name));\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,CharDataType:1,StringVariable:1,ClassDefinition:1,java.lang.System.out.print:1,FormalMethodParameter:2,SubtractExpression:1,StaticMethodSpecifier:2,StringDataType:3,java.lang.String.length:1,StringLiteral:2,MethodDefinition:2,java.lang.String.charAt:1,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:2,ConstructorCall:1,ActualMethodParameter:4,ObjectCreationStatement:1,"
3,050,050.SeparatingFirstCharacters,baseline,FirstCharacters.java,"import java.util.Scanner;\npublic class FirstCharacters {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
3,050,050.SeparatingFirstCharacters,solution,FirstCharacters.java,"import java.util.Scanner;\npublic class FirstCharacters {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type your name: "");\n        String name = reader.nextLine();\n        if (name.length() < 3) {\n            return;\n        }\n        int i = 0;\n        while (i < 3) {\n            System.out.println((i + 1) + "". character: "" + name.charAt(i));\n            i++;\n        }\n    }\n}
","StringAddition:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,IfStatement:1,LessExpression:2,MethodDefinition:1,java.lang.String.charAt:1,ConstructorCall:1,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringVariable:1,java.lang.System.out.print:1,java.lang.String.length:1,StringLiteral:2,AddExpression:1,IntDataType:1,VoidDataType:1,ObjectMethodInvocation:2,ActualMethodParameter:3,ObjectCreationStatement:1,"
3,051,051.SeparatingCharacters,baseline,SeparatingCharacters.java,"import java.util.Scanner;\npublic class SeparatingCharacters {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
3,051,051.SeparatingCharacters,solution,SeparatingCharacters.java,"import java.util.Scanner;\npublic class SeparatingCharacters {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type your name: "");\n        String name = reader.nextLine();\n        int i = 0;\n        while (i < name.length()) {\n            System.out.println((i + 1) + "". character: "" + name.charAt(i));\n            i++;\n        }\n    }\n}
","StringAddition:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,LessExpression:1,MethodDefinition:1,java.lang.String.charAt:1,ConstructorCall:1,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringVariable:1,java.lang.System.out.print:1,java.lang.String.length:1,StringLiteral:2,AddExpression:1,IntDataType:1,VoidDataType:1,ObjectMethodInvocation:2,ActualMethodParameter:3,ObjectCreationStatement:1,"
3,052,052.ReversingName,baseline,ReversingName.java,"import java.util.Scanner;\npublic class ReversingName {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
3,052,052.ReversingName,solution,ReversingName.java,"import java.util.Scanner;\npublic class ReversingName {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type your name: "");\n        String name = reader.nextLine();\n        System.out.print(""In reverse order: "");\n        int i = name.length() - 1;\n        while (i >= 0) {\n            System.out.print(name.charAt(i));\n            i--;\n        }\n        System.out.println("""");\n    }\n}
","GreaterEqualExpression:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,SubtractExpression:1,StaticMethodSpecifier:1,StringDataType:4,MethodDefinition:1,java.lang.String.charAt:1,PostDecrementExpression:1,ConstructorCall:1,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringVariable:1,java.lang.System.out.print:3,java.lang.String.length:1,StringLiteral:3,IntDataType:1,VoidDataType:1,ObjectMethodInvocation:2,ActualMethodParameter:5,ObjectCreationStatement:1,"
3,053,053.FirstPart,baseline,FirstPart.java,"import java.util.Scanner;\npublic class FirstPart {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
3,053,053.FirstPart,solution,FirstPart.java,"import java.util.Scanner;\npublic class FirstPart {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type a word: "");\n        String word = reader.nextLine();\n        System.out.print(""Length of the first part: "");\n        int lengthOfBeginning = Integer.parseInt(reader.nextLine());\n        System.out.print(""Result: "" + word.substring(0, lengthOfBeginning));\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringAddition:1,ImportStatement:1,StringVariable:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:3,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,StringLiteral:3,MethodDefinition:1,IntDataType:1,java.lang.String.substring:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:5,ObjectCreationStatement:1,"
3,054,054.TheEndPart,baseline,TheEndPart.java,"import java.util.Scanner;\npublic class TheEndPart {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
3,054,054.TheEndPart,solution,TheEndPart.java,"import java.util.Scanner;\npublic class TheEndPart {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type a word: "");\n        String word = reader.nextLine();\n        System.out.print(""Length of the end part:  "");\n        int lengthOfEnd = Integer.parseInt(reader.nextLine());\n        int startingPosition = word.length() - lengthOfEnd;\n        System.out.print(""Result: "" + word.substring(startingPosition, word.length()));\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringAddition:1,ImportStatement:1,StringVariable:1,ClassDefinition:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:3,FormalMethodParameter:1,SubtractExpression:1,StaticMethodSpecifier:1,StringDataType:4,java.lang.String.length:2,StringLiteral:3,MethodDefinition:1,IntDataType:2,java.lang.String.substring:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:5,ObjectCreationStatement:1,"
3,055,055.WordInsideWord,baseline,WordInsideWord.java,"import java.util.Scanner;\npublic class WordInsideWord {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n    }\n}
",
3,055,055.WordInsideWord,solution,WordInsideWord.java,"import java.util.Scanner;\npublic class WordInsideWord {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type the 1. word:"");\n        String word1 = reader.nextLine();\n        System.out.print(""Type the 2. word:"");\n        String word2 = reader.nextLine();\n        if (word1.indexOf(word2)!=-1) {\n            System.out.println(""The word '"" + word2 + ""' is found from the word '"" + word1 + ""'"");\n        } else {\n            System.out.println(""The word '"" + word2 + ""' is not found from the word '"" + word1 + ""'"");\n        }\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,StringAddition:2,ImportStatement:1,StringVariable:2,ClassDefinition:1,java.lang.System.out.print:2,FormalMethodParameter:1,NotEqualExpression:1,StaticMethodSpecifier:1,StringDataType:6,StringLiteral:4,MethodDefinition:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:6,ObjectCreationStatement:1,"
3,056,056.ReversingText,baseline,ReversingText.java,"import java.util.Scanner;\npublic class ReversingText {\n    public static String reverse(String text) {\n        // write your code here\n        // note that method does now print anything, it RETURNS the reversed string\n        //STUB: return """";\n    }\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type in your text: "");\n        String text = reader.nextLine();\n        System.out.println(""In reverse order: "" + reverse(text));\n    }\n}
",
3,056,056.ReversingText,solution,ReversingText.java,"import java.util.Scanner;\npublic class ReversingText {\n    public static String reverse(String text) {\n        // write your code here\n        // note that method does now print anything, it RETURNS the reversed string\n        // First we create an empty string\n        String result = """";\n        // then the rest is copied to it one by one at reverse order\n        int i = text.length() - 1;\n        while (i >= 0) {\n            result += text.charAt(i);  // same as result = result + text.charAt(i); \n            i--;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.print(""Type in your text: "");\n        String text = reader.nextLine();\n        System.out.println(""In reverse order: "" + reverse(text));\n    }\n}
","GreaterEqualExpression:1,StringAddition:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:2,SubtractExpression:1,StaticMethodSpecifier:2,StringDataType:5,MethodDefinition:2,java.lang.String.charAt:1,ReturnStatement:1,PostDecrementExpression:1,ConstructorCall:1,SimpleAssignmentExpression:4,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,StringVariable:2,java.lang.System.out.print:1,java.lang.String.length:1,StringLiteral:3,IntDataType:1,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:2,ActualMethodParameter:4,ObjectCreationStatement:1,"
3,057,057.Words,baseline,Words.java,"import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Words {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        ArrayList<String> words = new ArrayList<String>();\n    }\n}
",
3,057,057.Words,solution,Words.java,"import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Words {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        ArrayList<String> words = new ArrayList<String>();\n        while (true) {\n            System.out.print(""Type a word: "");\n            String word = reader.nextLine();\n            if (word.equals("""")) {\n                break;\n            }\n            words.add(word);\n        }\n        System.out.println(""You typed the following words:"");\n        for (String word : words) {\n            System.out.println(word);\n        }\n    }\n}
","True:1,ImportStatement:2,WhileStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:5,IfStatement:1,MethodDefinition:1,ConstructorCall:1,java.lang.String.equals:1,ForEachStatement:1,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringVariable:1,java.lang.System.out.print:1,GenericObjectCreationStatement:1,StringLiteral:3,VoidDataType:1,ObjectMethodInvocation:3,ActualMethodParameter:6,ObjectCreationStatement:1,"
3,058,058.RecurringWord,baseline,RecurringWord.java,"import java.util.ArrayList;\nimport java.util.Scanner;\npublic class RecurringWord {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // create here the ArrayList \n    }\n}
",
3,058,058.RecurringWord,solution,RecurringWord.java,"import java.util.ArrayList;\nimport java.util.Scanner;\npublic class RecurringWord {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // create here the ArrayList \n        ArrayList<String> words = new ArrayList<String>();\n        while (true) {\n            System.out.print(""Type a word:"");\n            String word = reader.nextLine();\n            if (words.contains(word)) {\n                System.out.println(""You gave twice the word ""+word);\n                break;\n            }\n            words.add(word);\n        }  \n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,True:1,ImportStatement:2,WhileStatement:1,StringVariable:1,ClassDefinition:1,java.lang.System.out.print:1,java.util.ArrayList:2,FormalMethodParameter:1,GenericObjectCreationStatement:1,StaticMethodSpecifier:1,StringDataType:4,IfStatement:1,StringLiteral:2,MethodDefinition:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:5,ObjectCreationStatement:1,"
3,059,059.WordsInReverseOrder,baseline,WordsInReverseOrder.java,"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\npublic class WordsInReverseOrder {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // create here an ArrayList\n    }\n}
",
3,059,059.WordsInReverseOrder,solution,WordsInReverseOrder.java,"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\npublic class WordsInReverseOrder {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // create here an ArrayList\n        ArrayList<String> words = new ArrayList<String>();\n        while (true) {\n            System.out.print(""Type a word: "");\n            String word = reader.nextLine();\n            if (word.equals("""")) {\n                break;\n            }\n            words.add(word);\n        }\n        Collections.reverse(words);\n        System.out.println(""You typed the following words:"");\n        for (String word : words) {\n            System.out.println(word);\n        }\n    }\n}
","True:1,ImportStatement:3,WhileStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:5,IfStatement:1,MethodDefinition:1,ConstructorCall:1,java.lang.String.equals:1,ForEachStatement:1,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringVariable:1,java.lang.System.out.print:1,GenericObjectCreationStatement:1,StringLiteral:3,VoidDataType:1,ObjectMethodInvocation:4,ActualMethodParameter:7,ObjectCreationStatement:1,"
3,060,060.WordsInAlphabeticalOrder,baseline,WordsInAlphabeticalOrder.java,"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\npublic class WordsInAlphabeticalOrder {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // create here an ArrayList\n    }\n}
",
3,060,060.WordsInAlphabeticalOrder,solution,WordsInAlphabeticalOrder.java,"import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\npublic class WordsInAlphabeticalOrder {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // create here an ArrayList\n        ArrayList<String> words = new ArrayList<String>();\n        while (true) {\n            System.out.print(""Type a word: "");\n            String word = reader.nextLine();\n            if (word.equals("""")) {\n                break;\n            }\n            words.add(word);\n        }\n        Collections.sort(words);\n        System.out.println(""You typed the following words:"");\n        for (String word : words) {\n            System.out.println(word);\n        }\n    }\n}
","True:1,ImportStatement:3,WhileStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:5,IfStatement:1,MethodDefinition:1,ConstructorCall:1,java.lang.String.equals:1,ForEachStatement:1,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringVariable:1,java.lang.System.out.print:1,GenericObjectCreationStatement:1,StringLiteral:3,VoidDataType:1,ObjectMethodInvocation:4,ActualMethodParameter:7,ObjectCreationStatement:1,"
3,061,061.NumberOfItems,baseline,NumberOfItems.java,"import java.util.ArrayList;\npublic class NumberOfItems {\n    // implement here the method countItems\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n        list.add(""Moi"");\n        list.add(""Ciao"");\n        list.add(""Hello"");\n        System.out.println(""There are this many items on the list:"");\n        // You can remove the comment from below when the method is done\n        //System.out.println(countItems(list)); \n    }\n}
",
3,061,061.NumberOfItems,solution,NumberOfItems.java,"import java.util.ArrayList;\npublic class NumberOfItems {\n    // implement here the method countItems\n    public static int countItems(ArrayList<String> list) {\n        return list.size();\n    }\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n        list.add(""Moi"");\n        list.add(""Ciao"");\n        list.add(""Hello"");\n        System.out.println(""There are this many items on the list:"");\n        // You can remove the comment from below when the method is done\n        //System.out.println(countItems(list)); \n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:2,GenericObjectCreationStatement:1,StaticMethodSpecifier:2,StringDataType:5,StringLiteral:4,MethodDefinition:2,IntDataType:1,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:4,ActualMethodParameter:4,"
3,062,062.RemoveLast,baseline,RemoveLast.java,"import java.util.ArrayList;\nimport java.util.Collections;\npublic class RemoveLast {\n    public static void removeLast(ArrayList<String> list) {\n    }\n    public static void main(String[] args) {\n        // Here an example what you can do with the method \n        ArrayList<String> persons = new ArrayList<String>();\n        persons.add(""Pekka"");\n        persons.add(""James"");\n        persons.add(""Liz"");\n        persons.add(""Brian"");\n        System.out.println(""Persons:"");\n        System.out.println(persons);\n        // sort the persons\n        Collections.sort(persons);\n        // and remove the last\n        removeLast(persons);\n        System.out.println(persons);\n    }\n}
",
3,062,062.RemoveLast,solution,RemoveLast.java,"import java.util.ArrayList;\nimport java.util.Collections;\npublic class RemoveLast {\n    public static void removeLast(ArrayList<String> list) {\n        int indexOfLast = list.size()-1;\n        list.remove(indexOfLast);\n    }\n    public static void main(String[] args) {\n        // Here an example what you can do with the method \n        ArrayList<String> persons = new ArrayList<String>();\n        persons.add(""Pekka"");\n        persons.add(""James"");\n        persons.add(""Liz"");\n        persons.add(""Brian"");\n        System.out.println(""Persons:"");\n        System.out.println(persons);\n        // sort the persons\n        Collections.sort(persons);\n        // and remove the last\n        removeLast(persons);\n        System.out.println(persons);\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:3,ImportStatement:2,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:2,GenericObjectCreationStatement:1,SubtractExpression:1,StaticMethodSpecifier:2,StringDataType:6,StringLiteral:5,MethodDefinition:2,IntDataType:1,VoidDataType:2,ObjectMethodInvocation:7,ActualMethodParameter:10,"
3,063,063.SumOfNumbers,baseline,SumOfNumbers.java,"import java.util.ArrayList;\npublic class SumOfNumbers {\n    public static int sum(ArrayList<Integer> list) {\n        // Write your code here\n        return 0;\n    }\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(2);\n        list.add(7);\n        list.add(2);\n        System.out.println(""The sum: "" + sum(list));\n        list.add(10);\n        System.out.println(""The sum: "" + sum(list));\n    }\n}
",
3,063,063.SumOfNumbers,solution,SumOfNumbers.java,"import java.util.ArrayList;\npublic class SumOfNumbers {\n    public static int sum(ArrayList<Integer> list) {\n        // Write your code here\n        int sum = 0;\n        for (int number : list) {\n            sum = sum + number;\n        }\n        return sum;\n    }\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(2);\n        list.add(7);\n        list.add(2);\n        System.out.println(""The sum: "" + sum(list));\n        list.add(10);\n        System.out.println(""The sum: "" + sum(list));\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:2,StringAddition:2,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:2,GenericObjectCreationStatement:1,StaticMethodSpecifier:2,StringDataType:2,StringLiteral:2,AddExpression:1,MethodDefinition:2,IntDataType:3,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:5,ActualMethodParameter:7,ForEachStatement:1,"
3,064,064.AverageOfNumbers,baseline,AverageOfNumbers.java,"import java.util.ArrayList;\npublic class AverageOfNumbers {\n    // Copy here the method sum from previous assignment\n    public static int sum(ArrayList<Integer> list) {\n        return 0;\n    }\n    public static double average(ArrayList<Integer> list) {\n        // write code here\n        return 0;\n    }\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(2);\n        list.add(7);\n        list.add(2);\n        System.out.println(""The average is: "" + average(list));\n    }\n}
",
3,064,064.AverageOfNumbers,solution,AverageOfNumbers.java,"import java.util.ArrayList;\npublic class AverageOfNumbers {\n    // Copy here the method sum from previous assignment\n    public static int sum(ArrayList<Integer> list) {\n        int sum = 0;\n        for (int number : list) {\n            sum = sum + number;\n        }\n        return sum;\n    }\n    public static double average(ArrayList<Integer> list) {\n        // write code here\n        // forst the sum of variables is calculated and saved in double variable\n        double sum = (double) sum(list);\n        // average is then easy to get with dividing sum by the list length\n        return sum / list.size();\n    }\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(2);\n        list.add(7);\n        list.add(2);\n        System.out.println(""The average is: "" + average(list));\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:3,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:3,GenericObjectCreationStatement:1,StaticMethodSpecifier:3,ExplicitTypeCasting:1,StringDataType:1,DivideExpression:1,StringLiteral:1,AddExpression:1,MethodDefinition:3,IntDataType:3,VoidDataType:1,ReturnStatement:2,DoubleDataType:2,ObjectMethodInvocation:5,ActualMethodParameter:6,ForEachStatement:1,"
3,065,065.LengthsOfStrings,baseline,LengthsOfStrings.java,"import java.util.ArrayList;\npublic class LengthsOfStrings {\n    public static ArrayList<Integer> lengths(ArrayList<String> list) {\n        ArrayList<Integer> lengthList = new ArrayList<Integer>();\n        // write code here\n        return lengthList;\n    }\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n        list.add(""Ciao"");\n        list.add(""Moi"");\n        list.add(""Benvenuto!"");\n        list.add(""badger badger badger badger"");\n        ArrayList<Integer> lengths = lengths(list);\n        System.out.println(""The lengths of the Strings: "" + lengths);\n    }\n}
",
3,065,065.LengthsOfStrings,solution,LengthsOfStrings.java,"import java.util.ArrayList;\npublic class LengthsOfStrings {\n    public static ArrayList<Integer> lengths(ArrayList<String> list) {\n        ArrayList<Integer> lengthList = new ArrayList<Integer>();\n        // write code here\n        for (String s : list) {\n            lengthList.add(s.length());\n        }\n        return lengthList;\n    }\n    public static void main(String[] args) {\n        ArrayList<String> list = new ArrayList<String>();\n        list.add(""Ciao"");\n        list.add(""Moi"");\n        list.add(""Benvenuto!"");\n        list.add(""badger badger badger badger"");\n        ArrayList<Integer> lengths = lengths(list);\n        System.out.println(""The lengths of the Strings: "" + lengths);\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:4,FormalMethodParameter:2,GenericObjectCreationStatement:2,StaticMethodSpecifier:2,StringDataType:6,java.lang.String.length:1,StringLiteral:5,MethodDefinition:2,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:5,ActualMethodParameter:7,ForEachStatement:1,"
3,066,066.TheGreatest,baseline,TheGreatest.java,"import java.util.ArrayList;\npublic class TheGreatest {\n    public static int greatest(ArrayList<Integer> list) {\n        // write code here\n        return 0;\n    }\n    public static void main(String[] args) {\n        ArrayList<Integer> lista = new ArrayList<Integer>();\n        lista.add(3);\n        lista.add(2);\n        lista.add(7);\n        lista.add(2);\n        System.out.println(""The greatest number is: "" + greatest(lista));\n    }\n}
",
3,066,066.TheGreatest,solution,TheGreatest.java,"import java.util.ArrayList;\npublic class TheGreatest {\n    public static int greatest(ArrayList<Integer> list) {\n        // write code here\n        // The first candidate for the greatest is the first in the list\n        int greatestSoFar = list.get(0);\n        // then we iterate over the whole list\n        for (int luku : list) {\n            // if a greater found, we take that as the candidate for greatest\n            if (luku > greatestSoFar) {\n                greatestSoFar = luku;\n            }\n        }\n        return greatestSoFar;\n    }\n    public static void main(String[] args) {\n        ArrayList<Integer> lista = new ArrayList<Integer>();\n        lista.add(3);\n        lista.add(2);\n        lista.add(7);\n        lista.add(2);\n        System.out.println(""The greatest number is: "" + greatest(lista));\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:2,GenericObjectCreationStatement:1,StaticMethodSpecifier:2,IfStatement:1,StringDataType:1,StringLiteral:1,MethodDefinition:2,IntDataType:3,GreaterExpression:1,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:5,ActualMethodParameter:6,ForEachStatement:1,"
3,067,067.TheVariance,baseline,Variance.java,"import java.util.ArrayList;\npublic class Variance {\n    // Copy here sum from exercise 63 \n    public static int sum(ArrayList<Integer> list) {\n        return 0;\n    }\n    // Copy here average from exercise 64 \n    public static double average(ArrayList<Integer> list) {\n        return 0;\n    }\n    public static double variance(ArrayList<Integer> list) {\n        // write code here\n        return 0;\n    }\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(2);\n        list.add(7);\n        list.add(2);\n        System.out.println(""The variance is: "" + variance(list));\n    }\n}
",
3,067,067.TheVariance,solution,Variance.java,"import java.util.ArrayList;\npublic class Variance {\n    // Copy here sum from exercise 63 \n    public static int sum(ArrayList<Integer> list) {\n        int sum = 0;\n        for (int number : list) {\n            sum = sum + number;\n        }\n        return sum;\n    }\n    // Copy here average from exercise 64 \n    public static double average(ArrayList<Integer> list) {\n        double sum = (double) sum(list);\n        return sum / list.size();\n    }\n    public static double variance(ArrayList<Integer> list) {\n        // write code here\n        double aver = average(list);\n        double var = 0;\n        for (int number : list) {\n            double difference = number - aver;\n            double squareOfDifference = difference * difference;\n            var = var + squareOfDifference;\n        }\n        var = var / (list.size() - 1);\n        return var;\n    }\n    public static void main(String[] args) {\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(2);\n        list.add(7);\n        list.add(2);\n        System.out.println(""The variance is: "" + variance(list));\n    }\n}
","StringAddition:1,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:4,SubtractExpression:2,StaticMethodSpecifier:4,StringDataType:1,MethodDefinition:4,ReturnStatement:3,ForEachStatement:2,SimpleAssignmentExpression:10,PublicClassSpecifier:1,PublicMethodSpecifier:4,java.lang.System.out.println:1,MultiplyExpression:1,GenericObjectCreationStatement:1,ExplicitTypeCasting:1,DivideExpression:2,StringLiteral:1,AddExpression:2,IntDataType:4,VoidDataType:1,DoubleDataType:7,ObjectMethodInvocation:6,ActualMethodParameter:7,"
3,068,068.MoreThanOnce,baseline,MoreThanOnce.java,"import java.util.ArrayList;\nimport java.util.Scanner;\npublic class MoreThanOnce {\n    public static boolean moreThanOnce(ArrayList<Integer> list, int searched) {\n        // write your code here\n        return false;\n    }\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(2);\n        list.add(7);\n        list.add(2);\n        System.out.println(""Type a number: "");\n        int number = Integer.parseInt(reader.nextLine());\n        if (moreThanOnce(list, number)) {\n            System.out.println(number + "" appears more than once."");\n        } else {\n            System.out.println(number + "" does not appear more than once. "");\n        }\n    }\n}
",
3,068,068.MoreThanOnce,solution,MoreThanOnce.java,"import java.util.ArrayList;\nimport java.util.Scanner;\npublic class MoreThanOnce {\n    public static boolean moreThanOnce(ArrayList<Integer> list, int searched) {\n        // write your code here\n        int howMany = 0;\n        for (int numberInList : list) {\n            if (numberInList == searched) {\n                howMany = howMany+1;\n            }\n            if (howMany > 1) {\n                return true;\n            }\n        }\n        return false;\n    }\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(3);\n        list.add(2);\n        list.add(7);\n        list.add(2);\n        System.out.println(""Type a number: "");\n        int number = Integer.parseInt(reader.nextLine());\n        if (moreThanOnce(list, number)) {\n            System.out.println(number + "" appears more than once."");\n        } else {\n            System.out.println(number + "" does not appear more than once. "");\n        }\n    }\n}
","EqualExpression:1,StringAddition:2,True:1,ImportStatement:2,False:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:2,StaticMethodSpecifier:2,IfStatement:2,StringDataType:3,MethodDefinition:2,GreaterExpression:1,ReturnStatement:2,BooleanDataType:1,ConstructorCall:1,ForEachStatement:1,SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:3,IfElseStatement:1,java.lang.Integer.parseInt:1,GenericObjectCreationStatement:1,StringLiteral:3,AddExpression:1,IntDataType:4,VoidDataType:1,ObjectMethodInvocation:5,ActualMethodParameter:10,ObjectCreationStatement:1,"
3,069,069.Palindrome,baseline,Palindromi.java,"import java.util.Scanner;\npublic class Palindromi {\n    public static boolean palindrome(String text) {\n        // write code here\n        return false;\n    }\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.println(""Type a text: "");\n        String text = reader.nextLine();    \n        if (palindrome(text)) {\n            System.out.println(""The text is a palindrome!"");\n        } else {\n            System.out.println(""The text is not a palindrome!"");\n        }\n    }\n}
",
3,069,069.Palindrome,solution,Palindromi.java,"import java.util.Scanner;\npublic class Palindromi {\n    public static String reverse(String text) {\n        String reversed = """";\n        int i = 0;\n        while (i < text.length()) {\n            char c = text.charAt(i);\n            reversed = c + reversed;\n            i++;\n        }\n        return reversed;\n    }\n    public static boolean palindrome(String text) {\n        // write code here\n        // text is a palindrome if it reads the same forward and backward\n        boolean isPalindrome = text.equals(reverse(text));\n        return isPalindrome;\n    }\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        System.out.println(""Type a text: "");\n        String text = reader.nextLine();    \n        if (palindrome(text)) {\n            System.out.println(""The text is a palindrome!"");\n        } else {\n            System.out.println(""The text is not a palindrome!"");\n        }\n    }\n}
","ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:3,StaticMethodSpecifier:3,StringDataType:6,LessExpression:1,MethodDefinition:3,java.lang.String.charAt:1,ReturnStatement:2,BooleanDataType:2,ConstructorCall:1,java.lang.String.equals:1,SimpleAssignmentExpression:7,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:3,java.lang.System.out.println:3,IfElseStatement:1,StringVariable:2,CharDataType:1,java.lang.String.length:1,StringLiteral:4,AddExpression:1,IntDataType:1,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:3,ActualMethodParameter:7,ObjectCreationStatement:1,"
3,070,070.CombiningArrayLists,baseline,CombiningArrayLists.java,"import java.util.ArrayList;\nimport java.util.Collections;\npublic class CombiningArrayLists {\n    public static void main(String[] args) {\n        //You can change the values while testing\n        ArrayList<Integer> list1 = new ArrayList<Integer>();\n        ArrayList<Integer> list2 = new ArrayList<Integer>();\n        Collections.addAll(list1, 4, 3);\n        // a shorthand for:\n        // lista1.add(4);\n        // lista1.add(3);\n        Collections.addAll(list2, 5, 10, 7);\n        // a shorthand for:\n        // lista2.add(5);\n        // lista2.add(10);\n        // lista2.add(7);\n        // implement the method and then remove the comment\n        //yhdista(list1, list2);\n        System.out.println(list1);\n        System.out.println(list2);\n    }\n}
",
3,070,070.CombiningArrayLists,solution,CombiningArrayLists.java,"import java.util.ArrayList;\nimport java.util.Collections;\npublic class CombiningArrayLists {\n    public static void main(String[] args) {\n        //You can change the values while testing\n        ArrayList<Integer> list1 = new ArrayList<Integer>();\n        ArrayList<Integer> list2 = new ArrayList<Integer>();\n        Collections.addAll(list1, 4, 3);\n        // a shorthand for:\n        // lista1.add(4);\n        // lista1.add(3);\n        Collections.addAll(list2, 5, 10, 7);\n        // a shorthand for:\n        // lista2.add(5);\n        // lista2.add(10);\n        // lista2.add(7);\n        // implement the method and then remove the comment\n        //yhdista(list1, list2);\n        System.out.println(list1);\n        System.out.println(list2);\n    }\n    public static void combine(ArrayList<Integer> list1, ArrayList<Integer> list2) {\n        list1.addAll(list2);\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:2,ImportStatement:2,ClassDefinition:1,java.util.ArrayList:3,FormalMethodParameter:2,GenericObjectCreationStatement:2,StaticMethodSpecifier:2,MethodDefinition:2,VoidDataType:2,ObjectMethodInvocation:3,ActualMethodParameter:5,"
3,071,071.SmartCombining,baseline,SmartCombining.java,"import java.util.ArrayList;\nimport java.util.Collections;\npublic class SmartCombining {\n    public static void main(String[] args) {\n        ArrayList<Integer> list1 = new ArrayList<Integer>();\n        ArrayList<Integer> list2 = new ArrayList<Integer>();\n        Collections.addAll(list1, 4, 3);\n        Collections.addAll(list2, 5, 10, 4, 3, 7);\n        // remove comment when method ready\n        //smartCombine(list1, list2);\n        System.out.println(list1);\n        System.out.println(list2);\n    }\n}
",
3,071,071.SmartCombining,solution,SmartCombining.java,"import java.util.ArrayList;\nimport java.util.Collections;\npublic class SmartCombining {\n    public static void main(String[] args) {\n        ArrayList<Integer> list1 = new ArrayList<Integer>();\n        ArrayList<Integer> list2 = new ArrayList<Integer>();\n        Collections.addAll(list1, 4, 3);\n        Collections.addAll(list2, 5, 10, 4, 3, 7);\n        // remove comment when method ready\n        //smartCombine(list1, list2);\n        System.out.println(list1);\n        System.out.println(list2);\n    }\n    public static void smartCombine(ArrayList<Integer> list1, ArrayList<Integer> list2) {\n        for(Integer number : list2) {\n            if(!list1.contains(number)) {\n                list1.add(number);\n            }\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:2,NotExpression:1,ImportStatement:2,ClassDefinition:1,java.lang.Integer:1,java.util.ArrayList:3,FormalMethodParameter:2,GenericObjectCreationStatement:2,StaticMethodSpecifier:2,IfStatement:1,MethodDefinition:2,VoidDataType:2,ObjectMethodInvocation:4,ActualMethodParameter:6,ForEachStatement:1,"
4,072,072.1.YourFirstAccount,baseline,Account.java,"/* \n * Do not touch this!\n */\npublic class Account {\n    private double balance;\n    private String owner;\n    public Account(String owner, double balance) {\n        this.balance = balance;\n        this.owner = owner;\n    }\n    public void deposit(double amount) {\n        balance+=amount;\n    }\n    public void withdrawal(double amount){\n        balance-=amount;\n    }    \n    public double balance() {\n        return balance;\n    }\n    @Override\n    public String toString() {\n        return owner + "" balance: ""+balance;\n    }\n}
",
4,072,072.1.YourFirstAccount,baseline,Accounts.java,"import java.util.Scanner;\npublic class Accounts {\n    public static void main(String[] args) {\n        // Code in Account.Java should not be touched!\n        // write your code here\n    }\n}
",
4,072,072.1.YourFirstAccount,solution,Account.java,"/* \n * Do not touch this!\n */\npublic class Account {\n    private double balance;\n    private String owner;\n    public Account(String owner, double balance) {\n        this.balance = balance;\n        this.owner = owner;\n    }\n    public void deposit(double amount) {\n        balance+=amount;\n    }\n    public void withdrawal(double amount){\n        balance-=amount;\n    }    \n    public double balance() {\n        return balance;\n    }\n    @Override\n    public String toString() {\n        return owner + "" balance: ""+balance;\n    }\n}
","SimpleAssignmentExpression:2,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:4,ConstructorDefinition:1,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:3,StringDataType:3,InstanceFieldInvocation:2,StringLiteral:1,MinusAssignmentExpression:1,MethodDefinition:4,InstanceField:2,VoidDataType:2,ReturnStatement:2,DoubleDataType:5,OverridingToString:1,SimpleVariable:2,PrivateFieldSpecifier:2,"
4,072,072.1.YourFirstAccount,solution,Accounts.java,"import java.util.Scanner;\npublic class Accounts {\n    public static void main(String[] args) {\n        // Code in Account.Java should not be touched!\n        // write your code here\n        Account account = new Account(""Barto's account"", 100.0);\n        account.deposit(20);\n        System.out.println( account );\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ImportStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:3,ObjectCreationStatement:1,"
4,072,072.2.YourFirstMoneyTransfer,baseline,Account.java,"/* \n * Do not touch this!\n */\npublic class Account {\n    private double balance;\n    private String owner;\n    public Account(String owner, double balance) {\n        this.balance = balance;\n        this.owner = owner;\n    }\n    public void deposit(double amount) {\n        balance+=amount;\n    }\n    public void withdrawal(double amount){\n        balance-=amount;\n    }    \n    public double balance() {\n        return balance;\n    }\n    @Override\n    public String toString() {\n        return owner + "" balance: ""+balance;\n    }\n}
",
4,072,072.2.YourFirstMoneyTransfer,baseline,Accounts.java,"public class Accounts {\n    public static void main(String[] args) {\n        // Code in Account.Java should not be touched!\n        // write your code here\n    }\n}
",
4,072,072.2.YourFirstMoneyTransfer,solution,Account.java,"/* \n * Do not touch this!\n */\npublic class Account {\n    private double balance;\n    private String owner;\n    public Account(String owner, double balance) {\n        this.balance = balance;\n        this.owner = owner;\n    }\n    public void deposit(double amount) {\n        balance+=amount;\n    }\n    public void withdrawal(double amount){\n        balance-=amount;\n    }    \n    public double balance() {\n        return balance;\n    }\n    @Override\n    public String toString() {\n        return owner + "" balance: ""+balance;\n    }\n}
","SimpleAssignmentExpression:2,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:4,ConstructorDefinition:1,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:3,StringDataType:3,InstanceFieldInvocation:2,StringLiteral:1,MinusAssignmentExpression:1,MethodDefinition:4,InstanceField:2,VoidDataType:2,ReturnStatement:2,DoubleDataType:5,OverridingToString:1,SimpleVariable:2,PrivateFieldSpecifier:2,"
4,072,072.2.YourFirstMoneyTransfer,solution,Accounts.java,"public class Accounts {\n    public static void main(String[] args) {\n        // Code in Account.Java should not be touched!\n        // write your code here\n        Account accoutOfMatt = new Account(""Matt's account"", 1000.0);    \n        accoutOfMatt.withdrawal(100);\n        Account myAccount = new Account(""My account"", 0.0);    \n        myAccount.deposit(100);        \n        System.out.println( accoutOfMatt );\n        System.out.println( myAccount );\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:2,ActualMethodParameter:6,ObjectCreationStatement:2,"
4,072,072.3.MoneyTransfers,baseline,Account.java,"/* \n * Do not touch this!\n */\npublic class Account {\n    private double balance;\n    private String owner;\n    public Account(String owner, double balance) {\n        this.balance = balance;\n        this.owner = owner;\n    }\n    public void deposit(double amount) {\n        balance+=amount;\n    }\n    public void withdrawal(double amount){\n        balance-=amount;\n    }    \n    public double balance() {\n        return balance;\n    }\n    @Override\n    public String toString() {\n        return owner + "" balance: ""+balance;\n    }\n}
",
4,072,072.3.MoneyTransfers,baseline,Accounts.java,"public class Accounts {\n    public static void main(String[] args) {\n        // Code in Account.Java should not be touched!\n        // write your code here\n    }\n}
",
4,072,072.3.MoneyTransfers,solution,Account.java,"/* \n * Do not touch this!\n */\npublic class Account {\n    private double balance;\n    private String owner;\n    public Account(String owner, double balance) {\n        this.balance = balance;\n        this.owner = owner;\n    }\n    public void deposit(double amount) {\n        balance+=amount;\n    }\n    public void withdrawal(double amount){\n        balance-=amount;\n    }    \n    public double balance() {\n        return balance;\n    }\n    @Override\n    public String toString() {\n        return owner + "" balance: ""+balance;\n    }\n}
","SimpleAssignmentExpression:2,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:4,ConstructorDefinition:1,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:3,StringDataType:3,InstanceFieldInvocation:2,StringLiteral:1,MinusAssignmentExpression:1,MethodDefinition:4,InstanceField:2,VoidDataType:2,ReturnStatement:2,DoubleDataType:5,OverridingToString:1,SimpleVariable:2,PrivateFieldSpecifier:2,"
4,072,072.3.MoneyTransfers,solution,Accounts.java,"public class Accounts {\n    public static void main(String[] args) {\n        // Code in Account.Java should not be touched!\n        // write your code here\n        Account tiliA = new Account(""tili A"", 100.0);    \n        Account tiliB = new Account(""tili B"", 0.0);    \n        Account tiliC = new Account(""tili C"", 0.0); \n        transfer(tiliA, tiliB, 50);\n        transfer(tiliB, tiliC, 25);\n    }\n    public static void transfer(Account form, Account to, double amount){\n        form.withdrawal(amount);\n        to.deposit(amount);\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,StringDataType:3,StringLiteral:3,MethodDefinition:2,VoidDataType:2,DoubleDataType:1,ConstructorCall:3,ObjectMethodInvocation:2,ActualMethodParameter:7,ObjectCreationStatement:3,"
4,073,073.Product,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // You can test your new class here, try e.g.:\n        // Product t = new Product(""Banana"", 1.1, 13);\n        // t.printProduct();\n    }\n}
",
4,073,073.Product,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // You can test your new class here, try e.g.:\n        // Product t = new Product(""Banana"", 1.1, 13);\n        // t.printProduct();\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
4,073,073.Product,solution,Product.java,"public class Product {\n    private String name;\n    private double price;\n    private int amount;\n    public Product(String nameAtStart, double priceAtStart, int amountAtStart) {\n        this.name = nameAtStart;\n        this.price = priceAtStart;\n        this.amount = amountAtStart;\n    }\n    public void printProduct() {\n        System.out.println(this.name + "", price "" + this.price + "", amount"" + this.amount);\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ConstructorDefinition:1,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:4,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:2,InstanceFieldInvocation:4,StringLiteral:1,IntDataType:2,MethodDefinition:1,InstanceField:3,VoidDataType:1,DoubleDataType:2,SimpleVariable:3,PrivateFieldSpecifier:3,ActualMethodParameter:1,"
4,074,074.Multiplier,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // Tämä on vain tyhjä main-metodi jossa voit kokeilla luokkasi toimintaa.\n    }\n}
",
4,074,074.Multiplier,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // Tämä on vain tyhjä main-metodi jossa voit kokeilla luokkasi toimintaa.\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
4,074,074.Multiplier,solution,Multiplier.java,"public class Multiplier {\n    int ownNumber;\n    public Multiplier(int number) {\n        this.ownNumber = number;\n    }\n    public int multiply(int otherNumber) {\n        return this.ownNumber * otherNumber;\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MultiplyExpression:1,ConstructorDefinition:1,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:2,InstanceFieldInvocation:2,IntDataType:3,MethodDefinition:1,InstanceField:1,ReturnStatement:1,SimpleVariable:1,"
4,075,075.DecreasingCounter,baseline,DecreasingCounter.java,"public class DecreasingCounter {\n    private int value;  // instance variable that remembers the value of the counter\n    public DecreasingCounter(int valueAtStart) {\n        this.value = valueAtStart;\n    }\n    public void printValue() {\n        // do not touch this!\n        System.out.println(""value: "" + this.value);\n    }\n    public void decrease() {\n        // write here code to decrease counter value by one\n    }\n    // and here the rest of the methods\n}
",
4,075,075.DecreasingCounter,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        DecreasingCounter counter = new DecreasingCounter(10);\n        counter.printValue();\n        counter.decrease();\n        counter.decrease();\n    }\n}
",
4,075,075.DecreasingCounter,solution,DecreasingCounter.java,"public class DecreasingCounter {\n    private int value;  // instance variable that remembers the value of the counter\n    private int initialValue;\n    public DecreasingCounter(int valueAtStart) {\n        this.value = valueAtStart;\n        this.initialValue = valueAtStart;\n    }\n    public void printValue() {\n        // do not touch this!\n        System.out.println(""value: "" + this.value);\n    }\n    public void decrease() {\n        // write here code to decrease counter value by one\n        if (this.value > 0) {\n            this.value--;\n        }\n    }\n    // and here the rest of the methods\n    public void reset() {\n        this.value = 0;\n    }\n    public void setInitial() {\n        this.value = this.initialValue;\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:4,java.lang.System.out.println:1,ConstructorDefinition:1,StringAddition:1,ClassDefinition:1,ThisReference:7,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:1,IfStatement:1,InstanceFieldInvocation:7,StringLiteral:1,IntDataType:3,MethodDefinition:4,InstanceField:2,VoidDataType:4,GreaterExpression:1,PostDecrementExpression:1,SimpleVariable:2,PrivateFieldSpecifier:2,ActualMethodParameter:1,"
4,075,075.DecreasingCounter,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        DecreasingCounter counter = new DecreasingCounter(10);\n        counter.printValue();\n        counter.decrease();\n        counter.decrease();\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:1,FormalMethodParameter:1,ObjectCreationStatement:1,"
4,076,076.Menu,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        Menu exactum = new Menu();\n        // Kun olet luonut metodin addMeal(String ateria), \n        // voit poistaa allaolevat kommentit\n//        exactum.addMeal(""Pariloitua lohta ja kuhaa, basilikalla maustettua valkoviinivoikastiketta."");\n//        exactum.addMeal(""Kesäinen vihersalaatti ja omena-hunajavinegretti."");\n//        exactum.addMeal(""Paahdettua karitsan seläkettä ja punaviinikastiketta."");\n        // Kun olet luonut metodin printMeals(), \n        // voit poistaa allaolevan kommentin\n//        exactum.printMeals();\n        // Kun olet luonut metodin tyhjennaRuokalista(), voit poistaa \n        // allaolevat kommentit\n//        exactum.tyhjennaRuokalista();\n//        exactum.printMeals();\n    }\n}
",
4,076,076.Menu,baseline,Menu.java,"import java.util.ArrayList;\npublic class Menu {\n    private ArrayList<String> meals;\n    public Menu() {\n        this.meals = new ArrayList<String>();\n    }\n    // add the methods here\n}
",
4,076,076.Menu,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        Menu exactum = new Menu();\n        // Kun olet luonut metodin addMeal(String ateria), \n        // voit poistaa allaolevat kommentit\n//        exactum.addMeal(""Pariloitua lohta ja kuhaa, basilikalla maustettua valkoviinivoikastiketta."");\n//        exactum.addMeal(""Kesäinen vihersalaatti ja omena-hunajavinegretti."");\n//        exactum.addMeal(""Paahdettua karitsan seläkettä ja punaviinikastiketta."");\n        // Kun olet luonut metodin printMeals(), \n        // voit poistaa allaolevan kommentin\n//        exactum.printMeals();\n        // Kun olet luonut metodin tyhjennaRuokalista(), voit poistaa \n        // allaolevat kommentit\n//        exactum.tyhjennaRuokalista();\n//        exactum.printMeals();\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:1,FormalMethodParameter:1,ObjectCreationStatement:1,"
4,076,076.Menu,solution,Menu.java,"import java.util.ArrayList;\npublic class Menu {\n    private ArrayList<String> meals;\n    public Menu() {\n        this.meals = new ArrayList<String>();\n    }\n    // add the methods here\n    public void addMeal(String meal) {\n        if (!this.meals.contains(meal)) {\n            this.meals.add(meal);\n        }\n    }\n    public void printMeals() {\n        for (String ateria : this.meals) {\n            System.out.println(ateria);\n        }\n    }\n    public void clearMenu() {\n        this.meals.clear();\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:3,java.lang.System.out.println:1,ConstructorDefinition:1,NotExpression:1,ImportStatement:1,ClassDefinition:1,ThisReference:5,PublicConstructorSpecifier:1,java.util.ArrayList:2,GenericObjectCreationStatement:1,FormalMethodParameter:1,StringDataType:1,IfStatement:1,InstanceFieldInvocation:5,MethodDefinition:3,InstanceField:1,VoidDataType:3,SimpleVariable:1,ObjectMethodInvocation:3,PrivateFieldSpecifier:1,ActualMethodParameter:3,ForEachStatement:1,"
4,077,077.LyyraCard,baseline,Main.java,"import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        // add here code that tests LyraCard. However before doing 77.6 remove the\n        // other code \n    }\n}
",
4,077,077.LyyraCard,solution,LyyraCard.java,"public class LyyraCard {\n    private double balance;\n    // we define the prices as final variable\n    private final double ECONOMICAL = 2.5;\n    private final double GOURMET = 4.0;\n    // defining variables final makes those constant, \n    // i.e., the value of a final variable van not be changed\n    // final variables are usually named with uppercase\n    public LyyraCard(double balanceAtStart) {\n        this.balance = balanceAtStart;\n    }\n    public void payGourmet() {\n        if (this.balance >= ECONOMICAL) {\n            this.balance -= ECONOMICAL;\n        }\n    }\n    public void payEconomical() {\n        if (this.balance >= GOURMET) {\n            this.balance -= GOURMET;\n        }\n    }\n    public void loadMoney(double amount) {\n        if (amount < 0) {\n            return;\n        }\n        this.balance += amount;\n        if (this.balance > 150) {\n            this.balance = 150;\n        }\n    }\n    @Override\n    public String toString() {\n        return ""The card has "" + this.balance + "" euros"";\n    }\n}
","GreaterEqualExpression:2,ConstructorDefinition:1,StringAddition:1,ClassDefinition:1,FinalFieldSpecifier:2,FormalMethodParameter:2,IfStatement:4,LessExpression:1,StringDataType:2,MethodDefinition:4,InstanceField:3,GreaterExpression:1,ReturnStatement:1,SimpleVariable:1,InstanceFieldInitializationStatement:2,SimpleAssignmentExpression:4,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:4,ThisReference:9,PublicConstructorSpecifier:1,InstanceFieldInvocation:9,StringLiteral:1,MinusAssignmentExpression:2,VoidDataType:3,DoubleDataType:5,OverridingToString:1,PrivateFieldSpecifier:3,"
4,077,077.LyyraCard,solution,Main.java,"import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        // add here code that tests LyraCard. However before doing 77.6 remove the\n        // other code \n        LyyraCard cardOfPekka = new LyyraCard(20);\n        LyyraCard CardOfBrian = new LyyraCard(30);\n        cardOfPekka.payEconomical();\n        CardOfBrian.payGourmet();\n        System.out.println(""Pekka: "" + cardOfPekka);\n        System.out.println(""Brian: "" + CardOfBrian);\n        cardOfPekka.loadMoney(20);\n        CardOfBrian.payEconomical();\n        System.out.println(""Pekka: "" + cardOfPekka);\n        System.out.println(""Brian: "" + CardOfBrian);\n        cardOfPekka.payGourmet();\n        cardOfPekka.payGourmet();\n        CardOfBrian.loadMoney(50);\n        System.out.println(""Pekka: "" + cardOfPekka);\n        System.out.println(""Brian: "" + CardOfBrian);\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:6,StringAddition:6,ImportStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:6,StringLiteral:6,MethodDefinition:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:7,ActualMethodParameter:10,ObjectCreationStatement:2,"
4,078,078.ClockUsingCounter,baseline,Main.java,"import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // write here code to ensure that BoundedCounter works as expected\n        // before starting 78.3 remove the extra code and use the skeleton ahown\n        // in assignment\n    }\n}
",
4,078,078.ClockUsingCounter,solution,BoundedCounter.java,"public class BoundedCounter {\n    private int value;\n    private int limit;\n    public BoundedCounter(int limit) {\n        this.limit = limit;\n        this.value = 0;\n    }\n    public void next() {\n        if (this.value == this.limit) {\n            this.value = 0;\n        } else {\n            this.value++;\n        }\n    }\n    public int getValue() {\n        return this.value;\n    }\n    public void setValue(int value) {\n        if (value < 0 || value > this.limit) {\n            return;\n        }\n        this.value = value;\n    }\n    @Override\n    public String toString() {\n        String initialZero = ""0"";\n        if (this.value > 9) {\n            initialZero = """";\n        }\n        return initialZero + this.value;\n    }\n}
","ConstructorDefinition:1,EqualExpression:1,ClassDefinition:1,OrExpression:1,FormalMethodParameter:2,IfStatement:2,LessExpression:1,StringDataType:3,MethodDefinition:4,InstanceField:2,GreaterExpression:2,ReturnStatement:2,SimpleVariable:2,SimpleAssignmentExpression:6,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:4,IfElseStatement:1,StringVariable:1,ThisReference:10,PublicConstructorSpecifier:1,InstanceFieldInvocation:10,StringLiteral:2,AddExpression:1,IntDataType:5,VoidDataType:2,StringInitializationStatement:1,OverridingToString:1,PrivateFieldSpecifier:2,"
4,078,078.ClockUsingCounter,solution,Main.java,"import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // write here code to ensure that BoundedCounter works as expected\n        // before starting 78.3 remove the extra code and use the skeleton ahown\n        // in assignment\n        BoundedCounter seconds = new BoundedCounter(59);\n        BoundedCounter minutes = new BoundedCounter(59);\n        BoundedCounter hours = new BoundedCounter(23);\n        System.out.print(""seconds: "");\n        int sek = Integer.parseInt( reader.nextLine() );\n        System.out.print(""minutes: "");\n        int min = Integer.parseInt( reader.nextLine() );\n        System.out.print(""hours: "");\n        int hou = Integer.parseInt( reader.nextLine() );        \n        seconds.setValue(sek);\n        minutes.setValue(min);\n        hours.setValue(hou);\n        int i = 0;\n        while (i < 121) {\n            System.out.println(hours + "":"" + minutes + "":"" +seconds);\n            seconds.next();\n            if (seconds.getValue() == 0) {\n                minutes.next();\n                if (minutes.getValue()==0 ) {\n                    hours.next();\n                }\n            }\n            i++;\n        }\n    }\n}
","StringAddition:1,EqualExpression:2,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,LessExpression:1,IfStatement:2,MethodDefinition:1,ConstructorCall:4,SimpleAssignmentExpression:8,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,java.lang.Integer.parseInt:3,java.lang.System.out.print:3,StringLiteral:4,IntDataType:4,VoidDataType:1,ObjectMethodInvocation:11,ActualMethodParameter:14,ObjectCreationStatement:4,"
4,079,079.NumberStatistics,baseline,Main.java,"import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // write here testcode\n        // remember to remove all the extracode when doing assignments  79.3 and 79.4 \n        // define in your program three NumberStatistics objects.:\n        // The first is used to track sum of all the numbers. \n        // The second takes care of even numbers and the third the odd numbers.\n        // The tests does not work if you do not create the objects in correct order \n    }\n}
",
4,079,079.NumberStatistics,baseline,NumberStatistics.java,"public class NumberStatistics {\n}
",
4,079,079.NumberStatistics,solution,Main.java,"import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        // write here testcode\n        // remember to remove all the extracode when doing assignments  79.3 and 79.4 \n        // define in your program three NumberStatistics objects.:\n        // The first is used to track sum of all the numbers. \n        // The second takes care of even numbers and the third the odd numbers.\n        // The tests does not work if you do not create the objects in correct order \n        NumberStatistics sum = new NumberStatistics();\n        NumberStatistics even = new NumberStatistics();\n        NumberStatistics odd = new NumberStatistics();\n        System.out.println(""Type numbers: "");\n        while (true) {\n            int number = Integer.parseInt(reader.nextLine());\n            if (number == -1) {\n                break;\n            }\n            sum.addNumber(number);\n            if (number % 2 == 0) {\n                even.addNumber(number);\n            } else {\n                odd.addNumber(number);\n            }\n        }\n        System.out.println(""sum: "" + sum.sum());\n        System.out.println(""sum of even: "" + even.sum());\n        System.out.println(""sum of odd: "" + odd.sum());\n    }\n}
","EqualExpression:2,StringAddition:3,True:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,IfStatement:1,MethodDefinition:1,ConstructorCall:4,SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,ModulusExpression:1,IfElseStatement:1,java.lang.Integer.parseInt:1,StringLiteral:4,IntDataType:1,VoidDataType:1,ObjectMethodInvocation:7,ActualMethodParameter:9,ObjectCreationStatement:4,"
4,079,079.NumberStatistics,solution,NumberStatistics.java,"public class NumberStatistics {\n    private int amountOfNumbers\n;    private int sum;\n    public NumberStatistics() {\n        this.amountOfNumbers = 0;\n        this.sum = 0;\n    }\n    public void addNumber(int luku) {\n        this.amountOfNumbers++;\n        this.sum += luku;\n    }\n    public int amountOfNumbers() {\n        return this.amountOfNumbers;\n    }\n    public int sum() {\n        return this.sum;\n    }\n    public double average() {\n        if (this.amountOfNumbers == 0) {\n            return 0;\n        }\n        return 1.0 * this.sum / this.amountOfNumbers;\n    }\n}
","SimpleAssignmentExpression:2,AddAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:4,MultiplyExpression:1,ConstructorDefinition:1,EqualExpression:1,ClassDefinition:1,ThisReference:8,PublicConstructorSpecifier:1,FormalMethodParameter:1,IfStatement:1,InstanceFieldInvocation:8,DivideExpression:1,IntDataType:5,MethodDefinition:4,InstanceField:2,VoidDataType:1,ReturnStatement:4,DoubleDataType:1,SimpleVariable:2,PrivateFieldSpecifier:2,"
4,080,080.Dice,baseline,Dice.java,"import java.util.Random;\npublic class Dice {\n    private Random random = new Random();\n    private int numberOfSides;\n    public Dice(int numberOfSides) {\n        // Initialize here the number of sides\n    }\n    public int roll() {\n        // create here a random number belongig to range 1-numberOfSided\n        return 0;\n    }\n}
",
4,080,080.Dice,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        Dice dice = new Dice(6);\n        int i = 0;\n        while (i < 10) {\n            System.out.println(dice.roll());\n            i++;\n        }\n    }\n}
",
4,080,080.Dice,solution,Dice.java,"import java.util.Random;\npublic class Dice {\n    private Random random = new Random();\n    private int numberOfSides;\n    public Dice(int numberOfSides) {\n        // Initialize here the number of sides\n        this.numberOfSides = numberOfSides;\n    }\n    public int roll() {\n        // create here a random number belongig to range 1-numberOfSided\n        return this.random.nextInt(this.numberOfSides)+1;\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,ConstructorDefinition:1,ImportStatement:1,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:1,InstanceFieldInvocation:2,AddExpression:1,IntDataType:3,MethodDefinition:1,InstanceField:2,ReturnStatement:1,ConstructorCall:1,SimpleVariable:1,ObjectMethodInvocation:1,PrivateFieldSpecifier:2,ActualMethodParameter:1,InstanceFieldInitializationStatement:1,ObjectCreationStatement:1,"
4,080,080.Dice,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        Dice dice = new Dice(6);\n        int i = 0;\n        while (i < 10) {\n            System.out.println(dice.roll());\n            i++;\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,LessExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:2,ObjectCreationStatement:1,"
4,081,081.PasswordRandomizer,baseline,PasswordRandomizer.java,"import java.util.Random;\npublic class PasswordRandomizer {\n    // Define the variables\n    public PasswordRandomizer(int length) {\n        // Initialize the variable\n    }\n    public String createPassword() {\n        // write code that returns a randomized password\n        return """";\n    }\n}
",
4,081,081.PasswordRandomizer,baseline,Program.java,"public class Program {\n    public static void main(String[] args) {\n        PasswordRandomizer randomizer = new PasswordRandomizer(13);\n        System.out.println(""Password: "" + randomizer.createPassword());\n        System.out.println(""Password: "" + randomizer.createPassword());\n        System.out.println(""Password: "" + randomizer.createPassword());\n        System.out.println(""Password: "" + randomizer.createPassword());\n    }\n}
",
4,081,081.PasswordRandomizer,solution,PasswordRandomizer.java,"import java.util.Random;\npublic class PasswordRandomizer {\n    // Define the variables\n    private Random random = new Random();\n    private int length;\n    public PasswordRandomizer(int length) {\n        // Initialize the variable\n        this.length = length;\n    }\n    public String createPassword() {\n        // write code that returns a randomized password\n        String characters = ""abcdefghijklmnopqrstuvwxyz"";\n        String password = """";\n        int numberOfCharacters = this.length;\n        while (numberOfCharacters > 0) {\n            int luku = this.random.nextInt(characters.length());\n            char c = characters.charAt(luku);\n            password = password + c;\n            numberOfCharacters--;\n        }\n        return password;\n    }\n}
","ConstructorDefinition:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StringDataType:3,MethodDefinition:1,InstanceField:2,GreaterExpression:1,java.lang.String.charAt:1,ReturnStatement:1,PostDecrementExpression:1,ConstructorCall:1,SimpleVariable:1,InstanceFieldInitializationStatement:1,SimpleAssignmentExpression:8,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringVariable:2,CharDataType:1,ThisReference:3,PublicConstructorSpecifier:1,InstanceFieldInvocation:3,java.lang.String.length:1,StringLiteral:2,AddExpression:1,IntDataType:4,StringInitializationStatement:2,ObjectMethodInvocation:2,PrivateFieldSpecifier:2,ActualMethodParameter:2,ObjectCreationStatement:1,"
4,081,081.PasswordRandomizer,solution,Program.java,"public class Program {\n    public static void main(String[] args) {\n        PasswordRandomizer randomizer = new PasswordRandomizer(13);\n        System.out.println(""Password: "" + randomizer.createPassword());\n        System.out.println(""Password: "" + randomizer.createPassword());\n        System.out.println(""Password: "" + randomizer.createPassword());\n        System.out.println(""Password: "" + randomizer.createPassword());\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,StringAddition:4,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:4,ActualMethodParameter:5,ObjectCreationStatement:1,"
4,082,082.Lottery,baseline,LotteryNumbers.java,"import java.util.ArrayList;\nimport java.util.Random;\npublic class LotteryNumbers {\n    private ArrayList<Integer> numbers;\npublic LotteryNumbers() {\n        // We'll format a list for the numbers\n        this.numbers = new ArrayList<Integer>();\n        // Draw numbers as LotteryNumbers is created\n        this.drawNumbers();\n    }\n    public ArrayList<Integer> numbers() {\n        return this.numbers;\n    }\n    public void drawNumbers() {\n        // Write the number drawing here using the method containsNumber()\n    }\n    public boolean containsNumber(int number) {\n        // Test here if the number is already in the drawn numbers\n        return true;\n    }\n}
",
4,082,082.Lottery,baseline,Main.java,"import java.util.ArrayList;\npublic class Main {\n    public static void main(String[] args) {\n        LotteryNumbers lotteryNumbers = new LotteryNumbers();\n        ArrayList<Integer> numbers = lotteryNumbers.numbers();\n        System.out.println(""Lottery numbers:"");\n        for (int number : numbers) {\n            System.out.print(number + "" "");\n        }\n        System.out.println("""");\n    }\n}
",
4,082,082.Lottery,solution,LotteryNumbers.java,"import java.util.ArrayList;\nimport java.util.Random;\npublic class LotteryNumbers {\n    private ArrayList<Integer> numbers;\npublic LotteryNumbers() {\n        // We'll format a list for the numbers\n        this.numbers = new ArrayList<Integer>();\n        // Draw numbers as LotteryNumbers is created\n        this.drawNumbers();\n    }\n    public ArrayList<Integer> numbers() {\n        return this.numbers;\n    }\n    public void drawNumbers() {\n        // Write the number drawing here using the method containsNumber()\n        Random random = new Random();\n        int remains = 7;\n        while (remains > 0) {\n            int newNumber = random.nextInt(39) + 1;\n            boolean alreadyDrawn = this.containsNumber(newNumber);\n            // we add the number only if it is not already among the drawn numbers\n            if (!alreadyDrawn) {\n                this.numbers.add(newNumber);\n                remains--;\n            }\n        }\n    }\n    public boolean containsNumber(int number) {\n        // Test here if the number is already in the drawn numbers\n        for (int n : this.numbers) {\n            if (n == number) {\n                return true;\n            }\n        }\n        return false;\n    }\n}
","ConstructorDefinition:1,EqualExpression:1,True:1,NotExpression:1,ImportStatement:2,WhileStatement:1,False:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:1,IfStatement:2,MethodDefinition:3,InstanceField:1,GreaterExpression:1,ReturnStatement:3,PostDecrementExpression:1,SimpleVariable:1,ConstructorCall:1,BooleanDataType:2,ForEachStatement:1,SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:3,ThisReference:4,PublicConstructorSpecifier:1,GenericObjectCreationStatement:1,InstanceFieldInvocation:4,AddExpression:1,IntDataType:4,VoidDataType:1,ObjectMethodInvocation:4,PrivateFieldSpecifier:1,ActualMethodParameter:3,ObjectCreationStatement:1,"
4,082,082.Lottery,solution,Main.java,"import java.util.ArrayList;\npublic class Main {\n    public static void main(String[] args) {\n        LotteryNumbers lotteryNumbers = new LotteryNumbers();\n        ArrayList<Integer> numbers = lotteryNumbers.numbers();\n        System.out.println(""Lottery numbers:"");\n        for (int number : numbers) {\n            System.out.print(number + "" "");\n        }\n        System.out.println("""");\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:1,ImportStatement:1,ClassDefinition:1,java.lang.System.out.print:1,java.util.ArrayList:2,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:3,ObjectCreationStatement:1,ForEachStatement:1,"
4,083,083.HangmanLogic,baseline,HangmanFigure.java,"// do not touch this!\nimport java.awt.Color;\nimport java.awt.FontMetrics;\nimport java.awt.Graphics;\nimport javax.swing.JPanel;\npublic class HangmanFigure extends JPanel {\n    private HangmanLogic logic;\n    private HangmanUserInterface userInterface;\n    HangmanFigure(HangmanLogic logic, HangmanUserInterface ui) {\n        super();\n        setBackground(Color.WHITE);\n        this.logic = logic;\n        this.userInterface = ui;\n    }\n    @Override\n    public void paint(Graphics grphcs) {\n        super.paint(grphcs);\n        paintHangman(grphcs);\n        this.userInterface.repaint();\n    }\n    private void paintHangman(Graphics g) {\n        int errors = this.logic.numberOfFaults();\n        // draw guy\n        int baseY = 200;\n        if (errors > 0) {    // vertical\n            g.drawLine(90, baseY, 200, baseY);\n        }\n        if (errors > 1) {    // horizontal\n            g.drawLine(125, baseY, 125, baseY - 100);\n        }\n        if (errors > 2) {\n            g.drawLine(110, baseY, 125, baseY - 15);\n        }\n        if (errors > 3) {\n            g.drawLine(140, baseY, 125, baseY - 15);\n        }\n        if (errors > 4) {    // support\n            g.drawLine(125, baseY - 100, 175, baseY - 100);\n        }\n        if (errors > 5) {\n            g.drawLine(125, baseY - 85, 140, baseY - 100);\n        }\n        if (errors > 6) {    // noose\n            g.drawLine(175, baseY - 100, 175, baseY - 75);\n        }\n        if (errors > 7) {    // body\n            g.drawOval(170, baseY - 75, 10, 12);\n        }\n        if (errors > 8) {\n            g.drawOval(170, baseY - 65, 15, 25);\n        }\n        if (errors > 9) {    // hands\n            g.drawLine(160, baseY - 65, 170, baseY - 60);\n        }\n        if (errors > 10) {\n            g.drawLine(183, baseY - 60, 193, baseY - 65);\n        }\n        if (errors > 11) {    // feet\n            g.drawLine(165, baseY - 30, 170, baseY - 45);\n        }\n        if (errors > 12) {\n            g.drawLine(183, baseY - 45, 193, baseY - 30);\n        }\n        // display word\n        g.drawString(""Word: "" + this.logic.hiddenWord(), 20, 250);\n        // drawn emount of errors\n        g.drawString(""Errors: "" + errors, 20, 270);\n        // show message\n        g.drawString(""Message: "" + getStatus(), 20, 290);\n        // show guessed letters\n        drawString(g, ""Guessed: "" + this.logic.guessedLetters(), 20, 310, 240);\n    }\n    public String getStatus() {\n        String hiddenWord = this.logic.hiddenWord();\n        if (!hiddenWord.contains(""_"")) {\n            return ""You won!"";\n        }\n        if (logic.numberOfFaults() > this.logic.losingFaultAmount()) {\n            return ""You lost!"";\n        }\n        return ""Input letter!"";\n    }\n    // draw text that changes line as necessary\n    public void drawString(Graphics g, String string, int x, int y, int width) {\n        FontMetrics fontMetrics = g.getFontMetrics();\n        int lineHeight = fontMetrics.getHeight();\n        int curX = x;\n        int curY = y;\n        String[] words = string.split("" "");\n        for (String word : words) {\n            // Find out the width of the word.\n            int wordWidth = fontMetrics.stringWidth(word + "" "");\n            // If text exceeds the width, then move to next line.\n            if (curX + wordWidth >= x + width) {\n                curY += lineHeight;\n                curX = x;\n            }\n            g.drawString(word, curX, curY);\n            // Move over to the right for next word.\n            curX += wordWidth;\n        }\n    }\n}
",
4,083,083.HangmanLogic,baseline,HangmanKeyAdapter.java,"// do not touch this!\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\npublic class HangmanKeyAdapter extends KeyAdapter {\n    private HangmanLogic logic;\n    public HangmanKeyAdapter(HangmanLogic logic) {\n        this.logic = logic;\n    }\n    @Override\n    public void keyPressed(KeyEvent ke) {\n        if (this.logic.numberOfFaults() > this.logic.losingFaultAmount()) {\n            return;\n        }\n        String hiddenWord = this.logic.hiddenWord();\n        if (!hiddenWord.contains(""_"")) {\n            return;\n        }\n        super.keyPressed(ke);\n        String key = """" + ke.getKeyChar();\n        key = key.toUpperCase();\n        this.logic.guessLetter(key);\n    }\n}
",
4,083,083.HangmanLogic,baseline,HangmanLogic.java,"public class HangmanLogic {\n    private String word;\n    private String guessedLetters;\n    private int numberOfFaults;\n    public HangmanLogic(String word) {\n        this.word = word.toUpperCase();\n        this.guessedLetters = """";\n        this.numberOfFaults = 0;\n    }\n    public int numberOfFaults() {\n        return this.numberOfFaults;\n    }\n    public String guessedLetters() {\n        return this.guessedLetters;\n    }\n    public int losingFaultAmount() {\n        return 12;\n    }\n    public void guessLetter(String letter) {\n        // program here the functionality for making a guess\n        // if the letter has already been guessed, nothing happens\n        // it the word does not contains the guessed letter, number of faults increase\n        // the letter is added among the already guessed letters\n    }\n    public String hiddenWord() {\n        // program here the functionality for building the hidden word\n        // create the hidden word by interating through this.word letter by letter\n        // if the letter in turn is within the guessed words, put it in to the hidden word\n        // if the letter is not among guessed, replace it with _ in the hidden word \n        // return the hidden word at the end\n        return """";\n    }\n}
",
4,083,083.HangmanLogic,baseline,HangmanUserInterface.java,"// do not touch this!\nimport java.awt.HeadlessException;\nimport javax.swing.JFrame;\npublic class HangmanUserInterface extends JFrame {\n    private HangmanFigure figure;\n    public HangmanUserInterface(HangmanLogic logic) throws HeadlessException {\n        super();\n        setTitle(""Hangman"");\n        this.figure = new HangmanFigure(logic, this);\n        add(this.figure);\n        addKeyListener(new HangmanKeyAdapter(logic));\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(300, 400);\n    }\n    @Override\n    public void repaint() {\n        super.repaint();\n        this.figure.repaint();\n    }\n    public void start() {\n        setVisible(true);\n    }\n}
",
4,083,083.HangmanLogic,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        HangmanLogic logic = new HangmanLogic(""parameter"");\n        HangmanUserInterface game = new HangmanUserInterface(logic);\n        game.start();\n    }\n}
",
4,083,083.HangmanLogic,baseline,TestProgram.java,"public class TestProgram {\n    public static void main(String[] args) {\n        HangmanLogic l = new HangmanLogic(""kissa"");\n        System.out.println(""Word at start: ""+l.hiddenWord());\n        System.out.println(""Let us guess: A, D, S, F, D"");\n        l.guessLetter(""A"");\n        l.guessLetter(""D"");\n        l.guessLetter(""S"");\n        l.guessLetter(""F"");\n        l.guessLetter(""D"");\n        System.out.println(""Guessed letterd: ""+l.guessedLetters());\n        System.out.println(""Number of faults: ""+l.numberOfFaults());\n        System.out.println(""Word is: ""+l.hiddenWord());\n    }\n}
",
4,083,083.HangmanLogic,solution,HangmanFigure.java,"// do not touch this!\nimport java.awt.Color;\nimport java.awt.FontMetrics;\nimport java.awt.Graphics;\nimport javax.swing.JPanel;\npublic class HangmanFigure extends JPanel {\n    private HangmanLogic logic;\n    private HangmanUserInterface userInterface;\n    HangmanFigure(HangmanLogic logic, HangmanUserInterface ui) {\n        super();\n        setBackground(Color.WHITE);\n        this.logic = logic;\n        this.userInterface = ui;\n    }\n    @Override\n    public void paint(Graphics grphcs) {\n        super.paint(grphcs);\n        paintHangman(grphcs);\n        this.userInterface.repaint();\n    }\n    private void paintHangman(Graphics g) {\n        int errors = this.logic.numberOfFaults();\n        // draw guy\n        int baseY = 200;\n        if (errors > 0) {    // vertical\n            g.drawLine(90, baseY, 200, baseY);\n        }\n        if (errors > 1) {    // horizontal\n            g.drawLine(125, baseY, 125, baseY - 100);\n        }\n        if (errors > 2) {\n            g.drawLine(110, baseY, 125, baseY - 15);\n        }\n        if (errors > 3) {\n            g.drawLine(140, baseY, 125, baseY - 15);\n        }\n        if (errors > 4) {    // support\n            g.drawLine(125, baseY - 100, 175, baseY - 100);\n        }\n        if (errors > 5) {\n            g.drawLine(125, baseY - 85, 140, baseY - 100);\n        }\n        if (errors > 6) {    // noose\n            g.drawLine(175, baseY - 100, 175, baseY - 75);\n        }\n        if (errors > 7) {    // body\n            g.drawOval(170, baseY - 75, 10, 12);\n        }\n        if (errors > 8) {\n            g.drawOval(170, baseY - 65, 15, 25);\n        }\n        if (errors > 9) {    // hands\n            g.drawLine(160, baseY - 65, 170, baseY - 60);\n        }\n        if (errors > 10) {\n            g.drawLine(183, baseY - 60, 193, baseY - 65);\n        }\n        if (errors > 11) {    // feet\n            g.drawLine(165, baseY - 30, 170, baseY - 45);\n        }\n        if (errors > 12) {\n            g.drawLine(183, baseY - 45, 193, baseY - 30);\n        }\n        // display word\n        g.drawString(""Word: "" + this.logic.hiddenWord(), 20, 250);\n        // drawn emount of errors\n        g.drawString(""Errors: "" + errors, 20, 270);\n        // show message\n        g.drawString(""Message: "" + getStatus(), 20, 290);\n        // show guessed letters\n        drawString(g, ""Guessed: "" + this.logic.guessedLetters(), 20, 310, 240);\n    }\n    public String getStatus() {\n        String hiddenWord = this.logic.hiddenWord();\n        if (!hiddenWord.contains(""_"")) {\n            return ""You won!"";\n        }\n        if (logic.numberOfFaults() > this.logic.losingFaultAmount()) {\n            return ""You lost!"";\n        }\n        return ""Input letter!"";\n    }\n    // draw text that changes line as necessary\n    public void drawString(Graphics g, String string, int x, int y, int width) {\n        FontMetrics fontMetrics = g.getFontMetrics();\n        int lineHeight = fontMetrics.getHeight();\n        int curX = x;\n        int curY = y;\n        String[] words = string.split("" "");\n        for (String word : words) {\n            // Find out the width of the word.\n            int wordWidth = fontMetrics.stringWidth(word + "" "");\n            // If text exceeds the width, then move to next line.\n            if (curX + wordWidth >= x + width) {\n                curY += lineHeight;\n                curX = x;\n            }\n            g.drawString(word, curX, curY);\n            // Move over to the right for next word.\n            curX += wordWidth;\n        }\n    }\n}
","GreaterEqualExpression:1,ConstructorDefinition:2,StringAddition:5,NotExpression:1,ImportStatement:4,PrivateMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:5,SubtractExpression:12,IfStatement:16,StringDataType:12,MethodDefinition:4,InstanceField:2,GreaterExpression:14,ReturnStatement:3,SimpleVariable:2,ForEachStatement:1,SimpleAssignmentExpression:12,AddAssignmentExpression:2,PublicClassSpecifier:1,ExtendsSpecification:1,PublicMethodSpecifier:3,StringVariable:1,ThisReference:8,InstanceFieldInvocation:8,StringLiteral:10,AddExpression:1,IntDataType:7,VoidDataType:3,ObjectMethodInvocation:27,ArrayDataType:1,PrivateFieldSpecifier:2,ActualMethodParameter:23,"
4,083,083.HangmanLogic,solution,HangmanKeyAdapter.java,"// do not touch this!\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\npublic class HangmanKeyAdapter extends KeyAdapter {\n    private HangmanLogic logic;\n    public HangmanKeyAdapter(HangmanLogic logic) {\n        this.logic = logic;\n    }\n    @Override\n    public void keyPressed(KeyEvent ke) {\n        if (this.logic.numberOfFaults() > this.logic.losingFaultAmount()) {\n            return;\n        }\n        String hiddenWord = this.logic.hiddenWord();\n        if (!hiddenWord.contains(""_"")) {\n            return;\n        }\n        super.keyPressed(ke);\n        String key = """" + ke.getKeyChar();\n        key = key.toUpperCase();\n        this.logic.guessLetter(key);\n    }\n}
","ConstructorDefinition:1,StringAddition:1,NotExpression:1,ImportStatement:2,ClassDefinition:1,FormalMethodParameter:2,IfStatement:2,StringDataType:3,MethodDefinition:1,InstanceField:1,GreaterExpression:1,SimpleVariable:1,SimpleAssignmentExpression:4,PublicClassSpecifier:1,ExtendsSpecification:1,PublicMethodSpecifier:1,StringVariable:2,ThisReference:4,PublicConstructorSpecifier:1,InstanceFieldInvocation:4,StringLiteral:2,VoidDataType:1,ObjectMethodInvocation:6,PrivateFieldSpecifier:1,ActualMethodParameter:2,"
4,083,083.HangmanLogic,solution,HangmanLogic.java,"public class HangmanLogic {\n    private String word;\n    private String guessedLetters;\n    private int numberOfFaults;\n    public HangmanLogic(String word) {\n        this.word = word.toUpperCase();\n        this.guessedLetters = """";\n        this.numberOfFaults = 0;\n    }\n    public int numberOfFaults() {\n        return this.numberOfFaults;\n    }\n    public String guessedLetters() {\n        return this.guessedLetters;\n    }\n    public int losingFaultAmount() {\n        return 12;\n    }\n    public void guessLetter(String letter) {\n        // program here the functionality for making a guess\n        // if the letter has already been guessed, nothing happens\n        // it the word does not contains the guessed letter, number of faults increase\n        // the letter is added among the already guessed letters\n        if (this.guessedLetters.contains(letter)) {\n            return;\n        }\n        if (!this.word.contains(letter)) {\n            this.numberOfFaults++;\n        }\n        this.guessedLetters = this.guessedLetters + letter;\n    }\n    public String hiddenWord() {\n        // program here the functionality for building the hidden word\n        // create the hidden word by interating through this.word letter by letter\n        // if the letter in turn is within the guessed words, put it in to the hidden word\n        // if the letter is not among guessed, replace it with _ in the hidden word \n        // return the hidden word at the end\n        String hiddenVersionOfWord = """";\n        int letterIndex = 0;\n        while (letterIndex < this.word.length()) {\n            char character = this.word.charAt(letterIndex);\n            if (this.guessedLetters.contains("""" + character)) {\n                hiddenVersionOfWord = hiddenVersionOfWord + character;\n            } else {\n                hiddenVersionOfWord = hiddenVersionOfWord + ""_"";\n            }\n            letterIndex++;\n        }\n        return hiddenVersionOfWord;\n    }\n}
","ConstructorDefinition:1,StringAddition:2,NotExpression:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:2,StringDataType:8,IfStatement:2,LessExpression:1,MethodDefinition:5,InstanceField:3,java.lang.String.charAt:1,ReturnStatement:4,SimpleVariable:3,SimpleAssignmentExpression:9,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:5,IfElseStatement:1,StringVariable:3,CharDataType:1,ThisReference:12,PublicConstructorSpecifier:1,InstanceFieldInvocation:12,java.lang.String.length:1,StringLiteral:4,AddExpression:2,IntDataType:4,VoidDataType:1,StringInitializationStatement:1,ObjectMethodInvocation:5,PrivateFieldSpecifier:3,ActualMethodParameter:4,"
4,083,083.HangmanLogic,solution,HangmanUserInterface.java,"// do not touch this!\nimport java.awt.HeadlessException;\nimport javax.swing.JFrame;\npublic class HangmanUserInterface extends JFrame {\n    private HangmanFigure figure;\n    public HangmanUserInterface(HangmanLogic logic) throws HeadlessException {\n        super();\n        setTitle(""Hangman"");\n        this.figure = new HangmanFigure(logic, this);\n        add(this.figure);\n        addKeyListener(new HangmanKeyAdapter(logic));\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(300, 400);\n    }\n    @Override\n    public void repaint() {\n        super.repaint();\n        this.figure.repaint();\n    }\n    public void start() {\n        setVisible(true);\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,ExtendsSpecification:1,PublicMethodSpecifier:2,ConstructorDefinition:1,True:1,ImportStatement:2,ClassDefinition:1,ThisReference:3,PublicConstructorSpecifier:1,FormalMethodParameter:1,ThrowsSpecification:1,StringDataType:1,InstanceFieldInvocation:3,StringLiteral:1,MethodDefinition:2,InstanceField:1,VoidDataType:2,SimpleVariable:1,ConstructorCall:2,ObjectMethodInvocation:1,PrivateFieldSpecifier:1,ActualMethodParameter:7,ObjectCreationStatement:2,"
4,083,083.HangmanLogic,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        HangmanLogic logic = new HangmanLogic(""parameter"");\n        HangmanUserInterface game = new HangmanUserInterface(logic);\n        game.start();\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:1,ActualMethodParameter:2,ObjectCreationStatement:2,"
4,083,083.HangmanLogic,solution,TestProgram.java,"public class TestProgram {\n    public static void main(String[] args) {\n        HangmanLogic l = new HangmanLogic(""kissa"");\n        System.out.println(""Word at start: ""+l.hiddenWord());\n        System.out.println(""Let us guess: A, D, S, F, D"");\n        l.guessLetter(""A"");\n        l.guessLetter(""D"");\n        l.guessLetter(""S"");\n        l.guessLetter(""F"");\n        l.guessLetter(""D"");\n        System.out.println(""Guessed letterd: ""+l.guessedLetters());\n        System.out.println(""Number of faults: ""+l.numberOfFaults());\n        System.out.println(""Word is: ""+l.hiddenWord());\n    }\n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:5,StringAddition:4,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:11,StringLiteral:11,MethodDefinition:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:9,ActualMethodParameter:11,ObjectCreationStatement:1,"
5,084,084.OverloadedCounter,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
",
5,084,084.OverloadedCounter,solution,Counter.java,"public class Counter {\n    private int value;\n    private boolean check;\n    public Counter(int value, boolean check) {\n        this.value = value;\n        this.check = check;\n    }\n    public Counter(int value) {\n        this(value, false);\n    }\n    public Counter(boolean tarkista) {\n        this(0, tarkista);\n    }\n    public Counter() {\n        this(0, false);\n    }\n    public int value() {\n        return this.value;\n    }\n    public void increase() {\n        increase(1);\n    }\n    public void decrease() {\n        decrease(1);\n    }\n    public void increase(int by) {\n        if (by >= 0) {\n            this.value += by;\n        }\n    }\n    public void decrease(int by) {\n        if (by < 0) {\n            return;\n        }\n        this.value -= by;\n        if (this.check && this.value <0) {\n            this.value = 0;\n        }                \n    }\n}
","GreaterEqualExpression:1,ConstructorDefinition:4,False:2,ClassDefinition:1,FormalMethodParameter:5,IfStatement:3,LessExpression:2,AndExpression:1,MethodDefinition:5,InstanceField:2,ReturnStatement:1,SimpleVariable:2,BooleanDataType:3,SimpleAssignmentExpression:3,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:5,ThisReference:7,PublicConstructorSpecifier:4,InstanceFieldInvocation:7,MinusAssignmentExpression:1,IntDataType:6,VoidDataType:4,PrivateFieldSpecifier:2,ActualMethodParameter:2,"
5,084,084.OverloadedCounter,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
5,085,085.Reformatory,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write here test code \n    }\n}
",
5,085,085.Reformatory,baseline,Person.java,"/*\n *  DO TOT TOUCH THIS CLASS!\n */\npublic class Person {\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n    public Person(String name, int age, int height, int weight) {\n        this.name = name;\n        this.age = age;\n        this.height = height;\n        this.weight = weight;\n    }\n    public void becomeOlder() {\n        this.age++;\n    }\n    public boolean adult() {\n        if (this.age < 18) {\n            return false;\n        }\n        return true;\n    }\n    public double weightIndex() {\n        double heightInMeters = this.height / 100.0;\n        return this.weight / (heightInMeters * heightInMeters);\n    }\n    public void setHeight(int height) {\n        this.height = height;\n    }\n    public int getHeight() {\n        return this.height;\n    }\n    public int getWeight() {\n        return this.weight;\n    }\n    public void setWeight(int weight) {\n        this.weight = weight;\n    }\n    public String getName() {\n        return this.name;\n    }\n    public String toString() {\n        return this.name + "" I am "" + this.age + "" years old, my weight index is "" + this.weightIndex();\n    }\n}
",
5,085,085.Reformatory,baseline,Reformatory.java,"public class Reformatory {\n    public int weight(Person person) {\n        // return the weight of the person\n        //STUB: return -1;\n    }\n}
",
5,085,085.Reformatory,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write here test code \n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
5,085,085.Reformatory,solution,Person.java,"/*\n *  DO TOT TOUCH THIS CLASS!\n */\npublic class Person {\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n    public Person(String name, int age, int height, int weight) {\n        this.name = name;\n        this.age = age;\n        this.height = height;\n        this.weight = weight;\n    }\n    public void becomeOlder() {\n        this.age++;\n    }\n    public boolean adult() {\n        if (this.age < 18) {\n            return false;\n        }\n        return true;\n    }\n    public double weightIndex() {\n        double heightInMeters = this.height / 100.0;\n        return this.weight / (heightInMeters * heightInMeters);\n    }\n    public void setHeight(int height) {\n        this.height = height;\n    }\n    public int getHeight() {\n        return this.height;\n    }\n    public int getWeight() {\n        return this.weight;\n    }\n    public void setWeight(int weight) {\n        this.weight = weight;\n    }\n    public String getName() {\n        return this.name;\n    }\n    public String toString() {\n        return this.name + "" I am "" + this.age + "" years old, my weight index is "" + this.weightIndex();\n    }\n}
","ConstructorDefinition:1,StringAddition:1,True:1,False:1,ClassDefinition:1,FormalMethodParameter:3,StringDataType:4,IfStatement:1,LessExpression:1,MethodDefinition:9,InstanceField:4,ReturnStatement:7,SimpleVariable:4,BooleanDataType:1,SimpleAssignmentExpression:7,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:9,MultiplyExpression:1,StringVariable:1,ThisReference:14,PublicConstructorSpecifier:1,InstanceFieldInvocation:14,DivideExpression:2,StringLiteral:1,IntDataType:8,VoidDataType:3,DoubleDataType:2,OverridingToString:1,ObjectMethodInvocation:1,PrivateFieldSpecifier:4,"
5,085,085.Reformatory,solution,Reformatory.java,"public class Reformatory {\n    private int weightsMeasured;\n    public Reformatory() {\n        this.weightsMeasured = 0;\n    }\n    public int weight(Person person) {\n        // return the weight of the person\n        this.weightsMeasured++;\n        return person.getWeight();\n    }\n    public void feed(Person person) {\n        int weightBeforeEating = person.getWeight();\n        person.setWeight(weightBeforeEating + 1);\n    } \n    public int totalWeightsMeasured() {        \n        return weightsMeasured;\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:3,ConstructorDefinition:1,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:2,InstanceFieldInvocation:2,AddExpression:1,IntDataType:4,MethodDefinition:3,InstanceField:1,VoidDataType:1,ReturnStatement:2,SimpleVariable:1,ObjectMethodInvocation:3,PrivateFieldSpecifier:1,ActualMethodParameter:1,"
5,086,086.LyyraCardAndRegister,baseline,CashRegister.java,"public class CashRegister {\n    private double cashInRegister;\n    private int economicalSold;\n    private int gourmetSold;\n    public CashRegister() {\n        // at start the register has 1000 euros \n    }\n    public double payEconomical(double cashGiven) {\n        // price of the economical lunch is 2.50 euros\n        // if the given cash is at least the price of the lunch:\n        //    the price of lunch is added to register\n        //    the amount of sold lunch is incremented by one\n        //    method returns cashGiven - lunch price \n        // if not enough money given, all is returned and nothing else happens        \n        //STUB: return -1;\n    }\n    public double payGourmet(double cashGiven) {\n        // price of the gourmet lunch is 4.00 euros\n        // if the given cash is at least the price of the lunch:\n        //    the price of lunch is added to register\n        //    the amount of sold lunch is incremented by one\n        //    method returns cashGiven - lunch price \n        // if not enough money given, all is returned and nothing else happens\n        //STUB: return -1;\n    }\n    public String toString() {\n        return ""money in register "" + cashInRegister + "" economical lunches sold: "" + economicalSold + "" gourmet lunches sold: "" + gourmetSold;\n    }\n}
",
5,086,086.LyyraCardAndRegister,baseline,LyyraCard.java,"public class LyyraCard {\n    private double balance;\n    public LyyraCard(double balance) {\n        this.balance = balance;\n    }\n    public double balance() {\n        return this.balance;\n    }\n    public void loadMoney(double amount) {\n        this.balance += amount;\n    }\n    public boolean pay(double amount) {\n       // method checks if the balance of the card is at least amount given as parameter\n       // if not, methods returns false meaning that the card could not be used for the payment\n       // if the balance is enough, the given amount is taken from the balance and true is returned\n        //STUB: return false;\n    }\n}
",
5,086,086.LyyraCardAndRegister,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write test code here\n    }\n}
",
5,086,086.LyyraCardAndRegister,solution,CashRegister.java,"public class CashRegister {\n    private double cashInRegister;\n    private int economicalSold;\n    private int gourmetSold;\n    // Javassa vakio määritellään näin\n    private static final double PRICE_OF_ECONOMICAL = 2.5;\n    private static final double PRICE_IOF_GOURMET = 4.0;\n    public CashRegister() {\n        // at start the register has 1000 euros \n        this.cashInRegister = 1000;\n    }\n    public double payEconomical(double cashGiven) {\n        // price of the economical lunch is 2.50 euros\n        // if the given cash is at least the price of the lunch:\n        //    the price of lunch is added to register\n        //    the amount of sold lunch is incremented by one\n        //    method returns cashGiven - lunch price \n        // if not enough money given, all is returned and nothing else happens        \n        if (cashGiven < PRICE_OF_ECONOMICAL) {\n            return cashGiven;\n        }\n        this.cashInRegister += PRICE_OF_ECONOMICAL;\n        this.economicalSold++;\n        return cashGiven - PRICE_OF_ECONOMICAL;\n    }\n    public double payGourmet(double cashGiven) {\n        // price of the gourmet lunch is 4.00 euros\n        // if the given cash is at least the price of the lunch:\n        //    the price of lunch is added to register\n        //    the amount of sold lunch is incremented by one\n        //    method returns cashGiven - lunch price \n        // if not enough money given, all is returned and nothing else happens\n        if (cashGiven < PRICE_IOF_GOURMET) {\n            return cashGiven;\n        }\n        this.cashInRegister += PRICE_IOF_GOURMET;\n        this.gourmetSold++;\n        return cashGiven - PRICE_IOF_GOURMET;\n    }\n    public boolean payEconomical(LyyraCard card) {\n        if (card.balance() < PRICE_OF_ECONOMICAL) {\n            return false;\n        }\n        card.pay(PRICE_OF_ECONOMICAL);\n        this.economicalSold++;\n        return true;\n    }\n    public boolean payGourmet(LyyraCard card) {\n        if (card.balance() < PRICE_IOF_GOURMET) {\n            return false;\n        }\n        card.pay(PRICE_IOF_GOURMET);\n        this.gourmetSold++;\n        return true;\n    }\n    public void loadMoneyToCard(LyyraCard card, double sum) {\n        if (sum < 0) {\n            return;\n        }\n        card.loadMoney(sum);\n        this.cashInRegister += sum;\n    }\n    public String toString() {\n        return ""money in register "" + cashInRegister + "" economical lunches sold: "" + economicalSold + "" gourmet lunches sold: "" + gourmetSold;\n    }\n}
","ClassConstantInitializationStatement:2,ConstructorDefinition:1,StringAddition:1,True:2,False:2,ClassDefinition:1,FinalFieldSpecifier:2,FormalMethodParameter:5,SubtractExpression:2,IfStatement:5,LessExpression:5,StringDataType:2,MethodDefinition:6,InstanceField:3,ReturnStatement:9,SimpleVariable:3,BooleanDataType:2,ClassField:2,SimpleAssignmentExpression:3,AddAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:4,PublicMethodSpecifier:6,ThisReference:8,PublicConstructorSpecifier:1,InstanceFieldInvocation:8,StringLiteral:1,IntDataType:2,VoidDataType:1,DoubleDataType:6,OverridingToString:1,ObjectMethodInvocation:5,PrivateFieldSpecifier:5,StaticFieldSpecifier:2,ActualMethodParameter:3,"
5,086,086.LyyraCardAndRegister,solution,LyyraCard.java,"public class LyyraCard {\n    private double balance;\n    public LyyraCard(double balance) {\n        this.balance = balance;\n    }\n    public double balance() {\n        return this.balance;\n    }\n    public void loadMoney(double amount) {\n        this.balance += amount;\n    }\n    public boolean pay(double amount) {\n       // method checks if the balance of the card is at least amount given as parameter\n       // if not, methods returns false meaning that the card could not be used for the payment\n       // if the balance is enough, the given amount is taken from the balance and true is returned\n        if (this.balance < amount) {\n            return false;                \n        }\n        this.balance -= amount;\n        return true;\n    }\n}
","SimpleAssignmentExpression:1,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:3,ConstructorDefinition:1,True:1,False:1,ClassDefinition:1,ThisReference:5,PublicConstructorSpecifier:1,FormalMethodParameter:3,IfStatement:1,LessExpression:1,InstanceFieldInvocation:5,MinusAssignmentExpression:1,MethodDefinition:3,InstanceField:1,VoidDataType:1,ReturnStatement:3,DoubleDataType:5,SimpleVariable:1,BooleanDataType:1,PrivateFieldSpecifier:1,"
5,086,086.LyyraCardAndRegister,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write test code here\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
5,087,087.ApartmentComparison,baseline,Apartment.java,"public class Apartment {\n    private int rooms;\n    private int squareMeters;\n    private int pricePerSquareMeter;\n    public Apartment(int rooms, int squareMeters, int pricePerSquareMeter) {\n        this.rooms = rooms;\n        this.squareMeters = squareMeters;\n        this.pricePerSquareMeter = pricePerSquareMeter;\n    }\n}
",
5,087,087.ApartmentComparison,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n        Apartment studioManhattan = new Apartment(1, 16, 5500);\n        Apartment twoRoomsBrooklyn = new Apartment(2, 38, 4200);\n        Apartment fourAndKitchenBronx = new Apartment(3, 78, 2500);\n    }\n}
",
5,087,087.ApartmentComparison,solution,Apartment.java,"public class Apartment {\n    private int rooms;\n    private int squareMeters;\n    private int pricePerSquareMeter;\n    public Apartment(int rooms, int squareMeters, int pricePerSquareMeter) {\n        this.rooms = rooms;\n        this.squareMeters = squareMeters;\n        this.pricePerSquareMeter = pricePerSquareMeter;\n    }\n    public boolean larger(Apartment compared){\n        return this.squareMeters>compared.squareMeters;\n    }\n    private int price(){\n        return pricePerSquareMeter*squareMeters;\n    }\n    public int priceDifference(Apartment compared) {\n        // Math.abs returns the absolute value\n        return Math.abs(this.price()-compared.price());\n    }\n    public boolean moreExpensiveThan(Apartment compared){\n        return this.price()>compared.price();\n    }    \n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:3,MultiplyExpression:1,ConstructorDefinition:1,PrivateMethodSpecifier:1,java.lang.Math.abs:1,ClassDefinition:1,ThisReference:4,PublicConstructorSpecifier:1,FormalMethodParameter:4,SubtractExpression:1,InstanceFieldInvocation:4,IntDataType:6,MethodDefinition:4,ConstantInvocation:1,InstanceField:3,GreaterExpression:2,ReturnStatement:4,SimpleVariable:3,BooleanDataType:2,ObjectMethodInvocation:2,PrivateFieldSpecifier:3,ActualMethodParameter:1,"
5,087,087.ApartmentComparison,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n        Apartment studioManhattan = new Apartment(1, 16, 5500);\n        Apartment twoRoomsBrooklyn = new Apartment(2, 38, 4200);\n        Apartment fourAndKitchenBronx = new Apartment(3, 78, 2500);\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:3,ActualMethodParameter:3,FormalMethodParameter:1,ObjectCreationStatement:3,"
5,088,088.Students,baseline,Main.java,"import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        // write here the main program\n    }\n}
",
5,088,088.Students,solution,Main.java,"import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        // write here the main program\n        ArrayList<Student> list = new ArrayList<Student>();\n        Scanner reader = new Scanner(System.in);\n        while (true) {\n            System.out.print(""name: "");\n            String name = reader.nextLine();\n            if (name.isEmpty()) {\n                break;\n            }\n            System.out.print(""studentumbenr: "");\n            String number = reader.nextLine();\n            list.add(new Student(name, number));\n        }\n        for (Student student : list) {\n            System.out.println(student);\n        }\n        System.out.println();\n        System.out.print(""Give search term: "");\n        String searchTerm = reader.nextLine();\n        System.out.println(""Result:"");\n        for (Student student : list) {\n            if (student.getName().contains(searchTerm)) {\n                System.out.println(student);\n            }\n        }\n    }\n}
","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,True:1,ImportStatement:2,WhileStatement:1,StringVariable:3,ClassDefinition:1,java.lang.System.out.print:3,java.util.ArrayList:2,FormalMethodParameter:1,GenericObjectCreationStatement:1,StaticMethodSpecifier:1,StringDataType:7,IfStatement:2,StringLiteral:4,MethodDefinition:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:6,ActualMethodParameter:9,ObjectCreationStatement:2,ForEachStatement:2,"
5,088,088.Students,solution,Student.java,"public class Student {\n    private String name;\n    private String studentNumber;\n    public Student(String name, String studentNumber) {\n        this.name = name;\n        this.studentNumber = studentNumber;\n    }\n    public String getName() {\n        return name;\n    }\n    public String getStudentNumber() {\n        return studentNumber;\n    }\n    public String toString() {\n        return name + "" ("" + studentNumber + "")"";\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:3,ConstructorDefinition:1,StringAddition:1,StringVariable:2,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:6,InstanceFieldInvocation:2,StringLiteral:1,MethodDefinition:3,InstanceField:2,ReturnStatement:3,OverridingToString:1,SimpleVariable:2,PrivateFieldSpecifier:2,"
5,089,089.ClockObject,baseline,BoundedCounter.java,"public class BoundedCounter {\n    // copy here the class BoundedCounter from last weeks assignment 78 \n}
",
5,089,089.ClockObject,baseline,Clock.java,"public class Clock {\n    private BoundedCounter hours;\n    private BoundedCounter minutes;\n    private BoundedCounter seconds;\n    public Clock(int hoursAtBeginning, int minutesAtBeginning, int secondsAtBeginning) {\n        // the counters that represent hours, minutes and seconds are created and set to have the correct initial values\n    }\n    public void tick() {\n        // Clock advances by one second\n    }\n    public String toString() {\n        // returns the string representation\n        return """";\n    }\n}
",
5,089,089.ClockObject,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        Clock clock = new Clock(23, 59, 50);\n        int i = 0;\n        while (i < 20) {\n            System.out.println(clock);\n            clock.tick();\n            i++;\n        }\n    }\n}
",
5,089,089.ClockObject,solution,BoundedCounter.java,"public class BoundedCounter {\n    // copy here the class BoundedCounter from last weeks assignment 78 \n    private int value;\n    private int limit;\n    public BoundedCounter(int limit) {\n        this.limit = limit;\n        this.value = 0;\n    }\n    public void next() {\n        if (this.value == this.limit) {\n            this.value = 0;\n        } else {\n            this.value++;\n        }\n    }\n    public int getValue() {\n        return this.value;\n    }\n    public void setValue(int value) {\n        if (value < 0 || value > this.limit) {\n            return;\n        }\n        this.value = value;\n    }\n    @Override\n    public String toString() {\n        String initialZero = ""0"";\n        if (this.value > 9) {\n            initialZero = """";\n        }\n        return initialZero + this.value;\n    }\n}
","ConstructorDefinition:1,EqualExpression:1,ClassDefinition:1,OrExpression:1,FormalMethodParameter:2,IfStatement:2,LessExpression:1,StringDataType:3,MethodDefinition:4,InstanceField:2,GreaterExpression:2,ReturnStatement:2,SimpleVariable:2,SimpleAssignmentExpression:6,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:4,IfElseStatement:1,StringVariable:1,ThisReference:10,PublicConstructorSpecifier:1,InstanceFieldInvocation:10,StringLiteral:2,AddExpression:1,IntDataType:5,VoidDataType:2,StringInitializationStatement:1,OverridingToString:1,PrivateFieldSpecifier:2,"
5,089,089.ClockObject,solution,Clock.java,"public class Clock {\n    private BoundedCounter hours;\n    private BoundedCounter minutes;\n    private BoundedCounter seconds;\n    public Clock(int hoursAtBeginning, int minutesAtBeginning, int secondsAtBeginning) {\n        // the counters that represent hours, minutes and seconds are created and set to have the correct initial values\n        hours = new BoundedCounter(23);\n        minutes = new BoundedCounter(59);\n        seconds = new BoundedCounter(59);\n        hours.setValue(hoursAtBeginning);\n        minutes.setValue(minutesAtBeginning);\n        seconds.setValue(secondsAtBeginning);\n    }\n    public void tick() {\n        // Clock advances by one second\n        seconds.next();\n        if (seconds.getValue() == 0) {\n            minutes.next();\n            if (minutes.getValue() == 0) {\n                hours.next();\n            }\n        }\n    }\n    public String toString() {\n        // returns the string representation\n        return hours.toString() + "":"" + minutes.toString() + "":"" + seconds.toString();\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,ConstructorDefinition:1,EqualExpression:2,StringAddition:1,ClassDefinition:1,PublicConstructorSpecifier:1,FormalMethodParameter:1,IfStatement:2,StringDataType:2,StringLiteral:1,IntDataType:1,MethodDefinition:2,InstanceField:3,VoidDataType:1,ReturnStatement:1,OverridingToString:1,SimpleVariable:3,ConstructorCall:3,ObjectMethodInvocation:9,PrivateFieldSpecifier:3,ActualMethodParameter:6,ObjectCreationStatement:3,"
5,089,089.ClockObject,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        Clock clock = new Clock(23, 59, 50);\n        int i = 0;\n        while (i < 20) {\n            System.out.println(clock);\n            clock.tick();\n            i++;\n        }\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,LessExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:2,ObjectCreationStatement:1,"
5,090,090.TeamAndPlayers,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test your code here\n        // Team barcelona = new Team(""FC Barcelona"");\n        // System.out.println(""Team: "" + barcelona.getName());\n    }\n}
",
5,090,090.TeamAndPlayers,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test your code here\n        // Team barcelona = new Team(""FC Barcelona"");\n        // System.out.println(""Team: "" + barcelona.getName());\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
5,090,090.TeamAndPlayers,solution,Player.java,"public class Player {\n    private String name;\n    private int goals;\n    public Player(String name) {\n        this(name, 0);\n    }\n    public Player(String name, int goals) {\n        this.name = name;\n        this.goals = goals;\n    }\n    public int goals() {\n        return this.goals;\n    }\n    public String getName() {\n        return this.name;\n    }\n    @Override\n    public String toString() {\n        return this.name + "", maaleja "" + this.goals;\n    }\n}
","SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:3,ConstructorDefinition:2,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:5,PublicConstructorSpecifier:2,FormalMethodParameter:2,StringDataType:4,InstanceFieldInvocation:5,StringLiteral:1,IntDataType:3,MethodDefinition:3,InstanceField:2,ReturnStatement:3,OverridingToString:1,SimpleVariable:2,PrivateFieldSpecifier:2,"
5,090,090.TeamAndPlayers,solution,Team.java,"import java.util.ArrayList;\npublic class Team {\n    private String name;\n    private ArrayList<Player> players;\n    private int maxSize;\n    public Team(String name) {\n        this.name = name;\n        this.players = new ArrayList<Player>();\n        this.maxSize = 16;\n    }\n    public String getName() {\n        return this.name;\n    }\n    public void addPlayer(Player player) {\n        if (this.size() >= this.maxSize) {\n            return;\n        }\n        this.players.add(player);\n    }\n    public void printPlayers() {\n        for (Player player : this.players) {\n            System.out.println(player);\n        }\n    }\n    public void setMaxSize(int maxSize) {\n        this.maxSize = maxSize;\n    }\n    public int size() {\n        return this.players.size();\n    }\n    public int goals() {\n        int amount = 0;\n        for (Player player : this.players) {\n            amount += player.goals();\n        }\n        return amount;\n    }\n}
","GreaterEqualExpression:1,ConstructorDefinition:1,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:3,StringDataType:2,IfStatement:1,MethodDefinition:6,InstanceField:3,ReturnStatement:3,SimpleVariable:3,ForEachStatement:2,SimpleAssignmentExpression:5,AddAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:6,java.lang.System.out.println:1,StringVariable:1,ThisReference:10,PublicConstructorSpecifier:1,GenericObjectCreationStatement:1,InstanceFieldInvocation:10,IntDataType:5,VoidDataType:3,ObjectMethodInvocation:4,PrivateFieldSpecifier:3,ActualMethodParameter:2,"
5,091,091.ExtendingMyDate,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test your code here\n    }\n}
",
5,091,091.ExtendingMyDate,baseline,MyDate.java,"public class MyDate {\n    private int day;\n    private int month;\n    private int year;\n    public MyDate(int day, int month, int year) {\n        this.day = day;\n        this.month = month;\n        this.year = year;\n    }\n    public String toString() {\n        return this.day + ""."" + this.month + ""."" + this.year;\n    }\n    public boolean earlier(MyDate compared) {\n        if (this.year < compared.year) {\n            return true;\n        }\n        if (this.year == compared.year && this.month < compared.month) {\n            return true;\n        }\n        if (this.year == compared.year && this.month == compared.month\n                && this.day < compared.day) {\n            return true;\n        }\n        return false;\n    }\n}
",
5,091,091.ExtendingMyDate,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test your code here\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
5,091,091.ExtendingMyDate,solution,MyDate.java,"public class MyDate {\n    private int day;\n    private int month;\n    private int year;\n    public MyDate(int day, int month, int year) {\n        this.day = day;\n        this.month = month;\n        this.year = year;\n    }\n    public String toString() {\n        return this.day + ""."" + this.month + ""."" + this.year;\n    }\n    public boolean earlier(MyDate compared) {\n        if (this.year < compared.year) {\n            return true;\n        }\n        if (this.year == compared.year && this.month < compared.month) {\n            return true;\n        }\n        if (this.year == compared.year && this.month == compared.month\n                && this.day < compared.day) {\n            return true;\n        }\n        return false;\n    }\n    public void advance() {\n        this.day = this.day + 1;\n        if (this.day > 30) {\n            this.month = this.month + 1;\n            this.day = 1;\n            if (this.month > 12) {\n                this.year = this.year + 1;\n                this.month = 1;\n            }\n        }\n    }\n    public void advance(int numberOfDays) {\n        int laskuri = 0;\n        while (laskuri < numberOfDays) {\n            this.advance();\n            laskuri = laskuri + 1;\n        }\n    }\n    public MyDate afterNumberOfDays(int days) {\n        MyDate date = new MyDate(this.day, this.month, this.year);\n        int counter = 0;\n        while (counter < days) {\n            date.advance();\n            counter = counter + 1;\n        }\n        return date;\n    }\n}
","ConstructorDefinition:1,StringAddition:1,EqualExpression:2,True:3,False:1,WhileStatement:2,ClassDefinition:1,FormalMethodParameter:4,StringDataType:2,IfStatement:5,LessExpression:5,AndExpression:2,MethodDefinition:5,ConstantInvocation:4,InstanceField:3,GreaterExpression:2,ReturnStatement:6,SimpleVariable:3,BooleanDataType:1,ConstructorCall:1,SimpleAssignmentExpression:13,PublicClassSpecifier:1,PublicMethodSpecifier:5,ThisReference:16,PublicConstructorSpecifier:1,InstanceFieldInvocation:16,StringLiteral:1,AddExpression:5,IntDataType:8,VoidDataType:2,OverridingToString:1,ObjectMethodInvocation:2,PrivateFieldSpecifier:3,ActualMethodParameter:1,ObjectCreationStatement:1,"
5,092,092.DifferenceDate,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
",
5,092,092.DifferenceDate,baseline,MyDate.java,"public class MyDate {\n    private int day;\n    private int month;\n    private int year;\n    public MyDate(int day, int montd, int year) {\n        this.day = day;\n        this.month = montd;\n        this.year = year;\n    }\n    public String toString() {\n        return this.day + ""."" + this.month + ""."" + this.year;\n    }\n    public boolean earlier(MyDate compared) {\n        if (this.year < compared.year) {\n            return true;\n        }\n        if (this.year == compared.year && this.month < compared.month) {\n            return true;\n        }\n        if (this.year == compared.year && this.month == compared.month\n                && this.day < compared.day) {\n            return true;\n        }\n        return false;\n    }\n}
",
5,092,092.DifferenceDate,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
5,092,092.DifferenceDate,solution,MyDate.java,"public class MyDate {\n    private int day;\n    private int month;\n    private int year;\n    public MyDate(int day, int montd, int year) {\n        this.day = day;\n        this.month = montd;\n        this.year = year;\n    }\n    public String toString() {\n        return this.day + ""."" + this.month + ""."" + this.year;\n    }\n    public boolean earlier(MyDate compared) {\n        if (this.year < compared.year) {\n            return true;\n        }\n        if (this.year == compared.year && this.month < compared.month) {\n            return true;\n        }\n        if (this.year == compared.year && this.month == compared.month\n                && this.day < compared.day) {\n            return true;\n        }\n        return false;\n    }\n    public int differenceInYears(MyDate compared) {\n        if (this.earlier(compared)) {\n            return differenceWhenThisEarlier(compared);\n        }\n        int minusOneYear = 0;\n        if (this.month < compared.month) {\n            minusOneYear = 1; \n        } else if (this.month == compared.month && this.day < compared.day) {\n            minusOneYear = 1; \n        }\n        return this.year - compared.year - minusOneYear;\n    }\n    private int differenceWhenThisEarlier(MyDate compared) {\n        int minusOneYear = 0;\n        if (compared.month < this.month) {\n            minusOneYear = 1;\n        } else if (compared.month == this.month && compared.day < this.day) {\n            minusOneYear = 1;\n        }\n        return compared.year - this.year - minusOneYear;\n    }    \n}
","IfElseIfStatement:2,ConstructorDefinition:1,StringAddition:1,EqualExpression:4,True:3,False:1,PrivateMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:4,SubtractExpression:2,StringDataType:2,IfStatement:6,LessExpression:7,AndExpression:4,MethodDefinition:4,ConstantInvocation:10,InstanceField:3,ReturnStatement:8,SimpleVariable:3,BooleanDataType:1,SimpleAssignmentExpression:9,PublicClassSpecifier:1,PublicMethodSpecifier:3,ThisReference:14,PublicConstructorSpecifier:1,InstanceFieldInvocation:14,StringLiteral:1,IntDataType:8,OverridingToString:1,ObjectMethodInvocation:1,PrivateFieldSpecifier:3,ActualMethodParameter:2,"
5,093,093.PersonExtended,baseline,Main.java,"public class Main {\n  public static void main(String[] args) {\n    // write test code here\n    // Person pekka = new Person(""Pekka"", 15, 2, 1993);\n  }\n}
",
5,093,093.PersonExtended,baseline,MyDate.java,"public class MyDate {\n    private int day;\n    private int month;\n    private int year;\n    public MyDate(int pv, int kk, int vv) {\n        this.day = pv;\n        this.month = kk;\n        this.year = vv;\n    }\n    public String toString() {\n        return this.day + ""."" + this.month + ""."" + this.year;\n    }\n    public boolean earlier(MyDate compared) {\n        if (this.year < compared.year) {\n            return true;\n        }\n        if (this.year == compared.year && this.month < compared.month) {\n            return true;\n        }\n        if (this.year == compared.year && this.month == compared.month\n                && this.day < compared.day) {\n            return true;\n        }\n        return false;\n    }\n    /*\n     * In assignment 92 method differneceInYears was added to MyDate \n     * Copy the method here since it eases this assignment considerably.\n     */\n    public int differneceInYears(MyDate compared) {\n        //STUB:  return -99;\n    }\n}
",
5,093,093.PersonExtended,baseline,Person.java,"import java.util.Calendar;\npublic class Person {\n    private String name;\n    private MyDate birthday;\n    public Person(String name, int pp, int kk, int vv) {\n        this.name = name;\n        this.birthday = new MyDate(pp, kk, vv);\n    }\n    public int age() {\n// calculate the age based on the birthday and the current day\n        // you get the current day as follows: \n        // Calendar.getInstance().get(Calendar.DATE);\n        // Calendar.getInstance().get(Calendar.MONTH) + 1; // January is 0 so we add one\n        // Calendar.getInstance().get(Calendar.YEAR);\n        return 0;\n    }\n    public boolean olderThan(Person compared) {\n        // compare the ages based on birthdays\n        return false;\n    }\n    public String getName() {\n        return this.name;\n    }\n    public String toString() {\n        return this.name + "", born "" + this.birthday;\n    }\n}
",
5,093,093.PersonExtended,solution,Main.java,"public class Main {\n  public static void main(String[] args) {\n    // write test code here\n    // Person pekka = new Person(""Pekka"", 15, 2, 1993);\n  }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
5,093,093.PersonExtended,solution,MyDate.java,"public class MyDate {\n    private int day;\n    private int month;\n    private int year;\n    public MyDate(int pv, int kk, int vv) {\n        this.day = pv;\n        this.month = kk;\n        this.year = vv;\n    }\n    public String toString() {\n        return this.day + ""."" + this.month + ""."" + this.year;\n    }\n    public boolean earlier(MyDate compared) {\n        if (this.year < compared.year) {\n            return true;\n        }\n        if (this.year == compared.year && this.month < compared.month) {\n            return true;\n        }\n        if (this.year == compared.year && this.month == compared.month\n                && this.day < compared.day) {\n            return true;\n        }\n        return false;\n    }\n    /*\n     * In assignment 92 method differneceInYears was added to MyDate \n     * Copy the method here since it eases this assignment considerably.\n     */\n    public int differneceInYears(MyDate compared) {\n        if (earlier(compared)) {\n            return compared.differneceInYears(this);\n        }\n        return calculateDifference(compared);\n    }\n    private int calculateDifference(MyDate verrattava) {\n        int vuosiPois = 0;\n        if (this.month < verrattava.month) {\n            vuosiPois = 1;\n        } else if (this.month == verrattava.month && this.day < verrattava.day) {\n            vuosiPois = 1;\n        }\n        return this.year - verrattava.year - vuosiPois;\n    }\n}
","IfElseIfStatement:1,ConstructorDefinition:1,StringAddition:1,EqualExpression:3,True:3,False:1,PrivateMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:4,SubtractExpression:1,StringDataType:2,IfStatement:5,LessExpression:5,AndExpression:3,MethodDefinition:4,ConstantInvocation:7,InstanceField:3,ReturnStatement:8,SimpleVariable:3,BooleanDataType:1,SimpleAssignmentExpression:6,PublicClassSpecifier:1,PublicMethodSpecifier:3,ThisReference:11,PublicConstructorSpecifier:1,InstanceFieldInvocation:11,StringLiteral:1,IntDataType:7,OverridingToString:1,ObjectMethodInvocation:1,PrivateFieldSpecifier:3,ActualMethodParameter:3,"
5,093,093.PersonExtended,solution,Person.java,"import java.util.Calendar;\npublic class Person {\n    private String name;\n    private MyDate birthday;\n    public Person(String name, int pp, int kk, int vv) {\n        this.name = name;\n        this.birthday = new MyDate(pp, kk, vv);\n    }\n    public Person(String name, MyDate birthday) {\n        this.name = name;\n        this.birthday = birthday;\n    }\n    public Person(String name) {\n        this.name = name;\n        Calendar nyt = Calendar.getInstance();\n        int year = nyt.get(Calendar.YEAR);\n        int month = nyt.get(Calendar.MONTH) + 1;\n        int day = nyt.get(Calendar.DATE);\n        this.birthday = new MyDate(day, month, year);\n    }\n    public int age() {\n// calculate the age based on the birthday and the current day\n        // you get the current day as follows: \n        // Calendar.getInstance().get(Calendar.DATE);\n        // Calendar.getInstance().get(Calendar.MONTH) + 1; // January is 0 so we add one\n        // Calendar.getInstance().get(Calendar.YEAR);\n        Calendar now = Calendar.getInstance();\n        int year = now.get(Calendar.YEAR);\n        int month = now.get(Calendar.MONTH) + 1;\n        int day = now.get(Calendar.DATE);\n        MyDate tamaPaiva = new MyDate(day, month, year);\n        return birthday.differneceInYears(tamaPaiva);\n    }\n    public boolean olderThan(Person compared) {\n        // compare the ages based on birthdays\n        return this.birthday.earlier(compared.birthday);\n    }\n    public String getName() {\n        return this.name;\n    }\n    public String toString() {\n        return this.name + "", born "" + this.birthday;\n    }\n}
","ConstructorDefinition:3,StringAddition:1,ImportStatement:1,ClassDefinition:1,FormalMethodParameter:4,StringDataType:4,MethodDefinition:4,InstanceField:2,ReturnStatement:4,SimpleVariable:2,ConstructorCall:3,BooleanDataType:1,SimpleAssignmentExpression:15,PublicClassSpecifier:1,PublicMethodSpecifier:4,StringVariable:1,ThisReference:9,PublicConstructorSpecifier:3,InstanceFieldInvocation:9,StringLiteral:1,AddExpression:2,IntDataType:8,OverridingToString:1,ObjectMethodInvocation:10,PrivateFieldSpecifier:2,ActualMethodParameter:11,ObjectCreationStatement:3,"
6,094,094.PhoneBook,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
",
6,094,094.PhoneBook,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
6,094,094.PhoneBook,solution,Person.java,"public class Person {\n    private String name;\n    private String number;\n    public Person(String name, String number) {\n        this.name = name;\n        this.number = number;\n    }\n    @Override\n    public String toString() {\n        return name+"" puh: ""+number;\n    }\n    public String getName() {\n        return name;\n    }\n    public String getNumber() {\n        return number;\n    }   \n    public void changeNumber(String newNumber){\n        number = newNumber;\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:4,ConstructorDefinition:1,StringAddition:1,StringVariable:2,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:2,StringDataType:6,InstanceFieldInvocation:2,StringLiteral:1,MethodDefinition:4,InstanceField:2,VoidDataType:1,ReturnStatement:3,OverridingToString:1,SimpleVariable:2,PrivateFieldSpecifier:2,"
6,094,094.PhoneBook,solution,Phonebook.java,"import java.util.ArrayList;\npublic class Phonebook {\n    private ArrayList<Person> list;\n    public Phonebook() {\n        list = new ArrayList<Person>();\n    }\n    public void lisaa(String name, String number) {\n        list.add(new Person(name, number));\n    }\n    public void tulostaKaikki() {\n        for (Person person : list) {\n            System.out.println(person);\n        }\n    }\n    public String searchNumber(String name) {\n        for (Person person : list) {\n            if (person.getName().equals(name)) {\n                return person.getNumber();\n            }\n        }\n        return ""number not known"";\n    }\n}
","ConstructorDefinition:1,ImportStatement:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:2,StringDataType:2,IfStatement:1,MethodDefinition:3,InstanceField:1,ReturnStatement:2,SimpleVariable:1,ConstructorCall:1,java.lang.String.equals:1,ForEachStatement:2,SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:3,java.lang.System.out.println:1,PublicConstructorSpecifier:1,GenericObjectCreationStatement:1,StringLiteral:1,VoidDataType:2,ObjectMethodInvocation:3,PrivateFieldSpecifier:1,ActualMethodParameter:3,ObjectCreationStatement:1,"
6,095,095.Money,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
",
6,095,095.Money,baseline,Money.java,"public class Money {\n    private final int euros;\n    private final int cents;\n    public Money(int euros, int cents) {\n        this.euros = euros;\n        this.cents = cents;\n    }\n    public int euros() {\n        return euros;\n    }\n    public int cents() {\n        return cents;\n    }\n    public String toString() {\n        String zero = """";\n        if (cents < 10) {\n            zero = ""0"";\n        }\n        return euros + ""."" + zero + cents + ""e"";\n    }\n}
",
6,095,095.Money,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
6,095,095.Money,solution,Money.java,"public class Money {\n    private final int euros;\n    private final int cents;\n    public Money(int euros, int cents) {\n        this.euros = euros;\n        this.cents = cents;\n    }\n    public int euros() {\n        return euros;\n    }\n    public int cents() {\n        return cents;\n    }\n    public String toString() {\n        String zero = """";\n        if (cents < 10) {\n            zero = ""0"";\n        }\n        return euros + ""."" + zero + cents + ""e"";\n    }\n    public Money plus(Money added) {\n        int euroSum = euros + added.euros();\n        int centSum = cents + added.cents();\n        if (centSum > 99) {\n            centSum -= 100;\n            euroSum++;\n        }\n        return new Money(euroSum, centSum);\n    }\n    public boolean less(Money compared) {\n        return (100 * euros + cents) < (100 * compared.euros() + compared.cents());\n    }\n    public Money minus(Money decremented) {\n        int euroDifference = euros - decremented.euros();\n        int centDifference = cents - decremented.cents();\n        if (centDifference < 0) {\n            centDifference += 100;\n            euroDifference--;\n        }\n        if (euroDifference < 0) {\n            return new Money(0, 0);\n        }\n        return new Money(euroDifference, centDifference);\n    }\n}
","ConstructorDefinition:1,StringAddition:1,ClassDefinition:1,FinalFieldSpecifier:2,FormalMethodParameter:4,SubtractExpression:2,StringDataType:4,IfStatement:4,LessExpression:4,MethodDefinition:6,InstanceField:2,GreaterExpression:1,ReturnStatement:7,PostDecrementExpression:1,SimpleVariable:2,ConstructorCall:3,BooleanDataType:1,SimpleAssignmentExpression:8,AddAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:6,MultiplyExpression:1,StringVariable:1,ThisReference:2,PublicConstructorSpecifier:1,InstanceFieldInvocation:2,StringLiteral:3,AddExpression:3,MinusAssignmentExpression:1,IntDataType:9,StringInitializationStatement:1,OverridingToString:1,ObjectMethodInvocation:5,PrivateFieldSpecifier:2,ActualMethodParameter:3,ObjectCreationStatement:3,"
6,096,096.SumOfArray,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test method here\n        int[] array = {5, 1, 3, 4, 2};\n        System.out.println(sum(array));\n    }\n    public static int sum(int[] array) {\n        // Write code here\n        return 0;\n    }\n}
",
6,096,096.SumOfArray,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test method here\n        int[] array = {5, 1, 3, 4, 2};\n        System.out.println(sum(array));\n    }\n    public static int sum(int[] array) {\n        // Write code here\n        int sum = 0;\n        for (int i = 0; i < array.length; i++) {\n            sum = sum + array[i];\n        }\n        return sum;\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ArrayLength:1,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,ArrayInitializationStatement:1,LessExpression:1,AddExpression:1,MethodDefinition:2,ArrayVariable:1,IntDataType:4,VoidDataType:1,ReturnStatement:1,ArrayDataType:1,ForStatement:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,"
6,097,097.ElegantPrinting,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test method here\n        int[] array = {5, 1, 3, 4, 2};\n        printElegantly(array);\n    }\n    public static void printElegantly(int[] array) {\n        // Write code here\n    }\n}
",
6,097,097.ElegantPrinting,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test method here\n        int[] array = {5, 1, 3, 4, 2};\n        printElegantly(array);\n    }\n    public static void printElegantly(int[] array) {\n        // Write code here\n        for (int i = 0; i < array.length; i++) {\n            System.out.print(array[i]);\n            if (i < (array.length - 1)) {\n                System.out.print("", "");\n            }\n        }\n        System.out.println();\n    }\n}
","ClassDefinition:1,FormalMethodParameter:2,SubtractExpression:1,StaticMethodSpecifier:2,LessExpression:2,IfStatement:1,StringDataType:1,MethodDefinition:2,ArrayVariable:1,ForStatement:1,ArrayElement:1,SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ArrayLength:2,java.lang.System.out.print:2,ArrayInitializationStatement:1,StringLiteral:1,IntDataType:3,VoidDataType:2,ArrayDataType:1,ActualMethodParameter:3,ArrayInitializer:1,"
6,098,098.CopyAndReverse,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
",
6,098,098.CopyAndReverse,solution,Main.java,"import java.util.Arrays;\npublic class Main {\n    public static void main(String[] args) {\n        // write testcode here\n        int[] original = {1, 2, 3, 4};\n        int[] copied = copy(original);\n        // change the copy\n        copied[0] = 99;\n        // printing both\n        System.out.println( ""original: "" +Arrays.toString(original));\n        System.out.println( ""copied: "" +Arrays.toString(copied));               \n        System.out.println("""");\n        int[] reversed = reverseCopy(original);\n        // printing both\n        System.out.println( ""original: "" +Arrays.toString(original));\n        System.out.println( ""reversed: "" +Arrays.toString(reversed));        \n    }\n    public static int[] copy(int[] array){\n        int[] copy = new int[array.length];\n        for (int i = 0; i < copy.length; i++) {\n            copy[i] = array[i];            \n        }\n        return copy;\n    }\n    public static int[] reverseCopy(int[] array){\n        int[] reversed = new int[array.length];\n        for (int i = 0; i < reversed.length; i++) {\n            reversed[i] = array[array.length-1-i];            \n        }\n        return reversed;\n    }    \n}
","StringAddition:4,ImportStatement:1,ClassDefinition:1,FormalMethodParameter:3,ArrayCreationStatement:2,SubtractExpression:1,StaticMethodSpecifier:3,StringDataType:5,LessExpression:2,MethodDefinition:3,ArrayVariable:3,ReturnStatement:2,ForStatement:2,ArrayElement:3,SimpleAssignmentExpression:10,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:3,java.lang.System.out.println:5,ArrayLength:5,ArrayInitializationStatement:1,StringLiteral:5,IntDataType:9,VoidDataType:1,ArrayDataType:5,ObjectMethodInvocation:4,ActualMethodParameter:7,ArrayInitializer:1,"
6,099,099.ArrayToStars,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test the method here\n        int[] array = {5, 1, 3, 4, 2};\n        printArrayAsStars(array);\n    }\n    public static void printArrayAsStars(int[] array) {\n        // write code here\n    }\n}
",
6,099,099.ArrayToStars,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test the method here\n        int[] array = {5, 1, 3, 4, 2};\n        printArrayAsStars(array);\n    }\n    public static void printArrayAsStars(int[] array) {\n        // write code here\n        for (int i = 0; i < array.length; i++) {\n            int numberOfStars = array[i];\n            for (int j = 0; j < numberOfStars; j++) {\n                System.out.print(""*"");\n            }\n            System.out.println();\n        }\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:2,java.lang.System.out.println:1,ArrayLength:1,ClassDefinition:1,java.lang.System.out.print:1,FormalMethodParameter:2,StaticMethodSpecifier:2,ArrayInitializationStatement:1,LessExpression:2,StringDataType:1,StringLiteral:1,MethodDefinition:2,ArrayVariable:1,IntDataType:5,VoidDataType:2,ArrayDataType:1,ForStatement:2,ActualMethodParameter:2,ArrayElement:1,ArrayInitializer:1,"
6,100,100.NightSky,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // Test your code here\n    }\n}
",
6,100,100.NightSky,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // Test your code here\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
6,100,100.NightSky,solution,NightSky.java,"import java.util.Random;\npublic class NightSky {\n    private double density;\n    private int width;\n    private int height;\n    private int starsInLastPrint;\n    public NightSky(double density) {\n        this(density, 20, 10);\n    }\n    public NightSky(int width, int height) {\n        this(0.1, width, height);\n    }\n    public NightSky(double density, int width, int height) {\n        this.density = density;\n        this.width = width;\n        this.height = height;\n    }\n    public void print() {\n        this.starsInLastPrint = 0;\n        for (int y = 0; y < this.height; y++) {\n            printLine();\n        }\n    }\n    public void printLine() {\n        Random random = new Random();\n        for (int x = 0; x < this.width; x++) {\n            double randomValue = random.nextDouble();\n            if (randomValue > this.density) {\n                System.out.print("" "");\n            } else {\n                System.out.print(""*"");\n                this.starsInLastPrint = this.starsInLastPrint + 1;\n            }\n        }\n        System.out.println("""");\n    }\n    public int starsInLastPrint() {\n        return starsInLastPrint;\n    }\n}
","ConstructorDefinition:3,ImportStatement:1,ClassDefinition:1,FormalMethodParameter:3,LessExpression:2,StringDataType:3,MethodDefinition:3,InstanceField:4,GreaterExpression:1,ReturnStatement:1,SimpleVariable:4,ForStatement:2,ConstructorCall:1,SimpleAssignmentExpression:9,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:3,java.lang.System.out.println:1,IfElseStatement:1,ThisReference:8,PublicConstructorSpecifier:3,java.lang.System.out.print:2,InstanceFieldInvocation:8,StringLiteral:3,AddExpression:1,IntDataType:8,VoidDataType:2,DoubleDataType:4,ObjectMethodInvocation:1,PrivateFieldSpecifier:4,ActualMethodParameter:3,ObjectCreationStatement:1,"
6,101,101.Library,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test your program here\n    }\n}
",
6,101,101.Library,solution,Book.java,"public class Book {\n    private String title;\n    private String publisher;\n    private int year;\n    public Book(String title, String publisher, int year) {\n        this.title = title;\n        this.publisher = publisher;\n        this.year = year;\n    }\n    public String title() {\n        return title;\n    }\n    public String publisher() {\n        return publisher;\n    }\n    public int year() {\n        return year;\n    }\n    @Override\n    public String toString() {\n        return this.title + "", "" + this.publisher + "", "" + this.year;\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:4,ConstructorDefinition:1,StringAddition:1,StringVariable:2,ClassDefinition:1,ThisReference:4,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:6,InstanceFieldInvocation:4,StringLiteral:1,IntDataType:3,MethodDefinition:4,InstanceField:3,ReturnStatement:4,OverridingToString:1,SimpleVariable:3,PrivateFieldSpecifier:3,"
6,101,101.Library,solution,Library.java,"import java.util.ArrayList;\npublic class Library {\n    private ArrayList<Book> books;\n    public Library() {\n        this.books = new ArrayList<Book>();\n    }\n    public void addBook(Book kirja) {\n        this.books.add(kirja);\n    }\n    public void printBooks() {\n        for (Book kirja : this.books) {\n            System.out.println(kirja);\n        }\n    }\n    public ArrayList<Book> searchByName(String title) {\n        return searchBook(title, null, -1);\n    }\n    public ArrayList<Book> searchByPublisher(String publisher) {\n        return searchBook(null, publisher, -1);\n    }\n    public ArrayList<Book> searchByYear(int year) {\n        return searchBook(null, null, year);\n    }\n    // apumetodi\n    public ArrayList<Book> searchBook(String title, String book, int year) {\n        ArrayList<Book> loydetyt = new ArrayList<Book>();\n        for (Book kirja : this.books) {\n            if (StringUtils.included(kirja.title(), title)\n                    || StringUtils.included(kirja.publisher(), book)\n                    || kirja.year() == year) {\n                loydetyt.add(kirja);\n            }\n        }\n        return loydetyt;\n    }\n}
","ConstructorDefinition:1,EqualExpression:1,ImportStatement:1,ClassDefinition:1,OrExpression:1,java.util.ArrayList:3,FormalMethodParameter:5,IfStatement:1,MethodDefinition:6,InstanceField:1,ReturnStatement:4,SimpleVariable:1,ForEachStatement:2,SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:6,java.lang.System.out.println:1,ThisReference:4,PublicConstructorSpecifier:1,GenericObjectCreationStatement:2,InstanceFieldInvocation:4,IntDataType:2,VoidDataType:2,ObjectMethodInvocation:5,PrivateFieldSpecifier:1,ActualMethodParameter:8,"
6,101,101.Library,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test your program here\n    }\n}
","PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,"
6,101,101.Library,solution,StringUtils.java,"public class StringUtils {\n    public static boolean included(String word, String searched) {\n        if (word == null || searched == null) {\n            return false;\n        }\n        word = word.trim();\n        searched = searched.trim();\n        word = word.toUpperCase();\n        searched = searched.toUpperCase();\n        return word.contains(searched);\n    }\n}
","SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,EqualExpression:1,False:1,ClassDefinition:1,OrExpression:1,FormalMethodParameter:1,StaticMethodSpecifier:1,IfStatement:1,null:1,MethodDefinition:1,ReturnStatement:2,BooleanDataType:1,ObjectMethodInvocation:5,ActualMethodParameter:1,"
6,102,102.GradeDistribution,baseline,Main.java,"import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner lukija = new Scanner(System.in);\n        // implement your program here\n        // do not put all to one method/class but rather design a proper structure to your program\n        // Your program should use only one Scanner object, i.e., it is allowed to call \n        // new Scanner only once. If you need scanner in multiple places, you can pass it as parameter\n    }\n}
",
6,102,102.GradeDistribution,solution,GradeDistribution.java,"public class GradeDistribution {\n    private int[] grades;\n    public GradeDistribution() {\n        grades = new int[6];\n    }\n    public void addAScore(int score) {\n        if (score < 0 || score > 60) {\n            return;\n        }\n        int theGrade = grade(score);\n        grades[ theGrade]++;\n    }\n    public void tulosta() {\n        System.out.println(""Grade distribution:"");\n        for (int i = 5; i >= 0; i--) {\n            System.out.println(i + "": "" + stars(grades[i]));\n        }\n        System.out.println(""Acceptance percentage: "" + acceptancePercentage());\n    }\n    //  since the following are only to internal use, those have been defined as private\n    private String stars(int n) {\n        String tahdet = """";\n        for (int i = 0; i < n; i++) {\n            tahdet += ""*"";\n        }\n        return tahdet;\n    }\n    private int grade(int score) {\n        if (score < 30) {\n            return 0;\n        }\n        if (score < 35) {\n            return 1;\n        }\n        if (score < 40) {\n            return 2;\n        }\n        if (score < 45) {\n            return 3;\n        }\n        if (score < 50) {\n            return 4;\n        }\n        return 5;\n    }\n    private double acceptancePercentage() {\n        double all = 0;\n        for (int number : grades) {\n            all += number;\n        }\n        double failed= grades[0];\n        return 100 * (all - failed) / all;\n    }\n}
","GreaterEqualExpression:1,ConstructorDefinition:1,StringAddition:2,PrivateMethodSpecifier:3,ClassDefinition:1,OrExpression:1,FormalMethodParameter:3,SubtractExpression:1,IfStatement:6,LessExpression:7,StringDataType:6,MethodDefinition:5,InstanceField:1,GreaterExpression:1,ReturnStatement:8,PostDecrementExpression:1,SimpleVariable:1,ForStatement:2,ArrayElement:3,ForEachStatement:1,SimpleAssignmentExpression:7,AddAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:2,java.lang.System.out.println:3,MultiplyExpression:1,StringVariable:1,PublicConstructorSpecifier:1,DivideExpression:1,StringLiteral:5,IntDataType:9,VoidDataType:2,StringInitializationStatement:1,DoubleDataType:3,ArrayDataType:1,PrivateFieldSpecifier:1,ActualMethodParameter:4,"
6,102,102.GradeDistribution,solution,Main.java,"import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner lukija = new Scanner(System.in);\n        // implement your program here\n        // do not put all to one method/class but rather design a proper structure to your program\n        // Your program should use only one Scanner object, i.e., it is allowed to call \n        // new Scanner only once. If you need scanner in multiple places, you can pass it as parameter\n        GradeDistribution distribution = new GradeDistribution();\n        System.out.println(""Type exam scores, -1 completes: "");\n        while (true) {\n            int luku = Integer.parseInt(lukija.nextLine());\n            if (luku == -1) {\n                break;\n            }\n            distribution.addAScore(luku);\n        }\n        distribution.tulosta();\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,EqualExpression:1,True:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,java.lang.Integer.parseInt:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:1,IfStatement:1,StringLiteral:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:3,ActualMethodParameter:4,ObjectCreationStatement:2,"
6,103,103.Birdwatcher,baseline,Main.java,"public class Main {  \n    public static void main(String[] args) {\n    // implement your program here\n    // do not put all to one method/class but rather design a proper structure to your program\n    // Your program should use only one Scanner object, i.e., it is allowed to call \n    // new Scanner only once. If you need scanner in multiple places, you can pass it as parameter\n    }\n}
",
6,103,103.Birdwatcher,solution,Bird.java,"public class Bird {\n    private String name;\n    private String latinName;\n    private int observations;\n    public Bird(String name, String latinName) {\n        this.name = name;\n        this.latinName = latinName;\n        this.observations = 0;\n    }\n    public String name() {\n        return this.name;\n    }\n    public void observe() {\n        this.observations++;\n    }\n    public String toString() {\n        return this.name+"" (""+this.latinName+""): ""+this.observations+"" observations"";\n    }\n}
","SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:3,ConstructorDefinition:1,StringAddition:1,StringVariable:2,ClassDefinition:1,ThisReference:6,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:5,InstanceFieldInvocation:6,StringLiteral:1,IntDataType:1,MethodDefinition:3,InstanceField:3,VoidDataType:1,ReturnStatement:2,OverridingToString:1,SimpleVariable:3,PrivateFieldSpecifier:3,"
6,103,103.Birdwatcher,solution,BirdDatabase.java,"import java.util.ArrayList;\npublic class BirdDatabase {\n    private ArrayList<Bird> birds;\n    public BirdDatabase() {\n        birds = new ArrayList<Bird>();\n    }\n    public boolean observe(String name) {\n        for (Bird bird : birds) {\n            if (name.equals(bird.name())) {\n                bird.observe();\n                return true;\n            }\n        }\n        return false;\n    }\n    public void addBird(String name, String latinName) {\n        birds.add(new Bird(name, latinName));\n    }\n    public String showBird(String name) {\n        for (Bird bird : birds) {\n            if (name.equals(bird.name())) {\n                return bird.toString();\n            }\n        }\n        return null;\n    }\n    public String statistics() {\n        String stats = """";\n        for (Bird bird : birds) {\n            stats = stats+bird.toString()+""\n"";\n        }\n        return stats;\n    }\n}
","ConstructorDefinition:1,True:1,ImportStatement:1,False:1,ClassDefinition:1,java.util.ArrayList:2,FormalMethodParameter:3,IfStatement:2,StringDataType:2,MethodDefinition:4,InstanceField:1,ReturnStatement:4,SimpleVariable:1,BooleanDataType:1,ConstructorCall:1,java.lang.String.equals:2,ForEachStatement:2,SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:4,PublicConstructorSpecifier:1,GenericObjectCreationStatement:1,VoidDataType:1,ObjectMethodInvocation:5,PrivateFieldSpecifier:1,ActualMethodParameter:3,ObjectCreationStatement:1,"
6,103,103.Birdwatcher,solution,Main.java,"import java.util.Scanner;\npublic class Main {  \n    public static String ask(Scanner lukija, String kysymys) {\n        System.out.print(kysymys+"" "");\n        return lukija.nextLine();\n    }\n    public static void add(Scanner lukija, BirdDatabase db) {\n        String name = ask(lukija, ""Name:"");\n        String latNimi = ask(lukija, ""Latin Name:"");\n        db.addBird(name, latNimi);\n    }\n    public static void observation(Scanner lukija, BirdDatabase db) {\n        String name = ask(lukija, ""Name:"");\n        boolean success = db.observe(name);\n        if (!success) {\n            System.out.println(""Is not a bird!"");\n        }\n    }\n    public static void show(Scanner lukija, BirdDatabase db) {\n        String name = ask(lukija, ""Name:"");\n        String answer = db.showBird(name);\n        if (answer == null) {\n            System.out.println(""Is not a bird!"");\n        } else {\n            System.out.println(answer);\n        }\n    }\n    public static void statistics(Scanner lukija, BirdDatabase db) {\n        System.out.print(db.statistics());\n    }\n    public static void main(String[] args) {\n    // implement your program here\n    // do not put all to one method/class but rather design a proper structure to your program\n    // Your program should use only one Scanner object, i.e., it is allowed to call \n    // new Scanner only once. If you need scanner in multiple places, you can pass it as parameter\n        Scanner scanner = new Scanner(System.in);\n        BirdDatabase db = new BirdDatabase();\n        while (true) {\n            String command = ask(scanner, ""?"");\n            if (command.equals(""Quit"")) {\n                break;\n            } else if (command.equals(""Add"")) {\n                add(scanner,db);\n            } else if (command.equals(""Observation"")) {\n                observation(scanner,db);\n            } else if (command.equals(""Show"")) {\n                show(scanner,db);\n            } else if (command.equals(""Statistics"")) {\n                statistics(scanner,db);\n            } else {\n                System.out.println(""Unknown command!"");\n            }\n        }\n    }\n}
","IfElseIfStatement:4,StringAddition:1,EqualExpression:1,True:1,NotExpression:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:6,StaticMethodSpecifier:6,StringDataType:16,IfStatement:1,MethodDefinition:6,ReturnStatement:1,BooleanDataType:1,ConstructorCall:2,java.lang.String.equals:5,SimpleAssignmentExpression:9,PublicClassSpecifier:1,PublicMethodSpecifier:6,java.lang.System.out.println:4,IfElseStatement:2,StringVariable:6,java.lang.System.out.print:2,StringLiteral:14,null:1,VoidDataType:5,ObjectMethodInvocation:10,ActualMethodParameter:24,ObjectCreationStatement:2,"
6,104,104.Sorting,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n}
",
6,104,104.Sorting,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // write testcode here\n    }\n    public static int indexOfSmallest(int[] table) {\n        int theIndexOfSmallest = 0;\n        for (int i = 0; i < table.length; i++) {\n            if ( table[i]<table[theIndexOfSmallest]) {\n                theIndexOfSmallest = i;\n            }            \n        }\n        return theIndexOfSmallest;\n    }\n    public static int indexOfSmallestStartingFrom(int[] table, int startIndex) {\n        int theIndexOfSmallest = startIndex;\n        for (int i = startIndex; i < table.length; i++) {\n            if ( table[i]<table[theIndexOfSmallest]) {\n                theIndexOfSmallest = i;\n            }            \n        }\n        return theIndexOfSmallest;\n    }    \n    public static void swap(int[] table, int index1, int index2) {\n        int index1OldValue = table[index1];\n        table[index1] = table[index2];\n        table[index2] = index1OldValue;        \n    }        \n    public static void sort(int[] table){\n        for (int i = 0; i < table.length-1; i++) {\n             int theIndexOfTheSmallest = indexOfSmallestStartingFrom(table, i);\n             swap(table, i, theIndexOfTheSmallest);            \n        }\n    }\n}
","SimpleAssignmentExpression:11,PublicClassSpecifier:1,PostIncrementExpression:3,PublicMethodSpecifier:5,ArrayLength:3,ClassDefinition:1,FormalMethodParameter:5,SubtractExpression:1,StaticMethodSpecifier:5,LessExpression:5,IfStatement:2,MethodDefinition:5,IntDataType:11,VoidDataType:3,ReturnStatement:2,ForStatement:3,ArrayElement:5,ActualMethodParameter:2,"
6,105,105.GuessingGame,baseline,GuessingGame.java,"import java.util.Scanner;\npublic class GuessingGame {\n    private Scanner reader;\n    public GuessingGame() {\n        // use only this scanner, othervise the tests do not work\n        this.reader = new Scanner(System.in);\n    }\n    public void play(int lowerLimit, int upperLimit) {\n        instructions(lowerLimit, upperLimit);\n        // write the guessing logic here\n    }\n    // implement here the methods isGreaterThan and average\n    public void instructions(int lowerLimit, int upperLimit) {\n        int maxQuestions = howManyTimesHalvable(upperLimit - lowerLimit);\n        System.out.println(""Think of a number between "" + lowerLimit + ""..."" + upperLimit + ""."");\n        System.out.println(""I promise you that I can guess the number you are thinking with "" + maxQuestions + "" questions."");\n        System.out.println("""");\n        System.out.println(""Next I'll present you a series of questions. Answer them honestly."");\n        System.out.println("""");\n    }\n    // an helper method:\n    public static int howManyTimesHalvable(int number) {\n        // we create a base two logarithm  of the given value\n        // more info on logarithms can be found for example here:\n        // http://www02.oph.fi/etalukio/pitka_matematiikka/kurssi8/maa8_teoria7.html\n        // Below we swap the base number to base two logarithms!\n        return (int) (Math.log(number) / Math.log(2)) + 1;\n    }\n}
",
6,105,105.GuessingGame,baseline,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test your program here\n        GuessingGame game = new GuessingGame();\n        game.play(1,10);\n    }    \n}
",
6,105,105.GuessingGame,solution,GuessingGame.java,"import java.util.Scanner;\npublic class GuessingGame {\n    private Scanner reader;\n    public GuessingGame() {\n        // use only this scanner, othervise the tests do not work\n        this.reader = new Scanner(System.in);\n    }\n    public void play(int lowerLimit, int upperLimit) {\n        instructions(lowerLimit, upperLimit);\n        // write the guessing logic here\n        while (lowerLimit < upperLimit) {\n            int middle = average(lowerLimit, upperLimit);\n            if (isGreaterThan(middle)) {\n                lowerLimit = middle + 1;\n            } else {\n                upperLimit = middle;\n            }\n        }\n        System.out.println(""The number you're thinking is "" + lowerLimit);\n    }\n    // implement here the methods isGreaterThan and average\n    public boolean isGreaterThan(int luku) {\n        System.out.println(""Is your number greater than "" + luku + ""? (y/n)"");\n        String answer = this.reader.nextLine();\n        return answer.equals(""y"");\n    }\n    public int average(int first, int second) {\n        return (first + second) / 2;\n    }\n    public void instructions(int lowerLimit, int upperLimit) {\n        int maxQuestions = howManyTimesHalvable(upperLimit - lowerLimit);\n        System.out.println(""Think of a number between "" + lowerLimit + ""..."" + upperLimit + ""."");\n        System.out.println(""I promise you that I can guess the number you are thinking with "" + maxQuestions + "" questions."");\n        System.out.println("""");\n        System.out.println(""Next I'll present you a series of questions. Answer them honestly."");\n        System.out.println("""");\n    }\n    // an helper method:\n    public static int howManyTimesHalvable(int number) {\n        // we create a base two logarithm  of the given value\n        // more info on logarithms can be found for example here:\n        // http://www02.oph.fi/etalukio/pitka_matematiikka/kurssi8/maa8_teoria7.html\n        // Below we swap the base number to base two logarithms!\n        return (int) (Math.log(number) / Math.log(2)) + 1;\n    }\n}
","ConstructorDefinition:1,StringAddition:4,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:5,SubtractExpression:1,LessExpression:1,StringDataType:9,StaticMethodSpecifier:1,MethodDefinition:5,InstanceField:1,ReturnStatement:3,SimpleVariable:1,ConstructorCall:1,BooleanDataType:1,java.lang.String.equals:1,SimpleAssignmentExpression:6,PublicClassSpecifier:1,PublicMethodSpecifier:5,java.lang.System.out.println:7,IfElseStatement:1,StringVariable:1,ThisReference:2,PublicConstructorSpecifier:1,ExplicitTypeCasting:1,InstanceFieldInvocation:2,DivideExpression:2,StringLiteral:8,AddExpression:3,IntDataType:8,VoidDataType:2,ObjectMethodInvocation:2,PrivateFieldSpecifier:1,ActualMethodParameter:14,ObjectCreationStatement:1,"
6,105,105.GuessingGame,solution,Main.java,"public class Main {\n    public static void main(String[] args) {\n        // test your program here\n        GuessingGame game = new GuessingGame();\n        game.play(1,10);\n    }    \n}
","SimpleAssignmentExpression:1,PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:1,FormalMethodParameter:1,ObjectCreationStatement:1,"
6,106,106.BinarySearch,baseline,BinarySearch.java,"public class BinarySearch {\n    public static boolean search(int[] array, int searchedValue) {\n        int beginning = 0;\n        int end = array.length - 1;\n        while (beginning <= end) {\n            int middle = (beginning + end) / 2;\n            if (array[middle] == searchedValue) {\n                return true;\n            }\n            // restrict the search area \n        }\n        return false;\n    }\n}
",
6,106,106.BinarySearch,baseline,Main.java,"import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        // Test your program here\n        int[] taulukko = {-3, 2, 3, 4, 7, 8, 12};\n        Scanner lukija = new Scanner(System.in);\n        System.out.print(""Numbers in the array "" + Arrays.toString(taulukko));\n        System.out.println();\n        System.out.print(""Enter searched number: "");\n        String etsittavaLuku = lukija.nextLine();\n        System.out.println();\n        boolean tulos = BinarySearch.search(taulukko, Integer.parseInt(etsittavaLuku));\n        // Print here the result\n    }\n}
",
6,106,106.BinarySearch,solution,BinarySearch.java,"public class BinarySearch {\n    public static boolean search(int[] array, int searchedValue) {\n        int beginning = 0;\n        int end = array.length - 1;\n        while (beginning <= end) {\n            int middle = (beginning + end) / 2;\n            if (array[middle] == searchedValue) {\n                return true;\n            }\n            // restrict the search area \n            if (searchedValue > array[middle]) {\n                beginning = middle + 1;\n            } else {\n                end = middle - 1;\n            }\n        }\n        return false;\n    }\n}
","SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:1,EqualExpression:1,IfElseStatement:1,ArrayLength:1,True:1,WhileStatement:1,False:1,ClassDefinition:1,FormalMethodParameter:1,LessEqualExpression:1,SubtractExpression:2,StaticMethodSpecifier:1,IfStatement:1,DivideExpression:1,AddExpression:2,MethodDefinition:1,IntDataType:4,GreaterExpression:1,ReturnStatement:2,BooleanDataType:1,ArrayElement:2,"
6,106,106.BinarySearch,solution,Main.java,"import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        // Test your program here\n        int[] taulukko = {-3, 2, 3, 4, 7, 8, 12};\n        Scanner lukija = new Scanner(System.in);\n        System.out.print(""Numbers in the array "" + Arrays.toString(taulukko));\n        System.out.println();\n        System.out.print(""Enter searched number: "");\n        String etsittavaLuku = lukija.nextLine();\n        System.out.println();\n        boolean tulos = BinarySearch.search(taulukko, Integer.parseInt(etsittavaLuku));\n        // Print here the result\n        if (tulos) {\n            System.out.println(""Number "" + etsittavaLuku + "" is in the array."");\n        } else {\n            System.out.println(""Number "" + etsittavaLuku + "" is not in the array."");\n        }\n    }\n}
","StringAddition:3,ImportStatement:2,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:5,MethodDefinition:1,ArrayVariable:1,ConstructorCall:1,BooleanDataType:1,SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,IfElseStatement:1,StringVariable:1,java.lang.Integer.parseInt:1,java.lang.System.out.print:2,ArrayInitializationStatement:1,StringLiteral:4,IntDataType:1,VoidDataType:1,ArrayDataType:1,ObjectMethodInvocation:3,ActualMethodParameter:6,ArrayInitializer:1,ObjectCreationStatement:1,"
