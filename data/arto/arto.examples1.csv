Week;Topic;Subtopic;ContentType;concepts;Content
4;Methods and copying parameters;-;problem_71;;Smart combining
4;Instructions on code-writing and problem solving;Well indented and "breathing" code;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,java.util.ArrayList:1,GenericObjectCreationStatement:1,StaticMethodSpecifier:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,ObjectMethodInvocation:6,ActualMethodParameter:10,ForEachStatement:2,;public static void main(String[] args) {\nArrayList<Integer> numbers = new ArrayList<Integer>();\nnumbers.add(4);\nnumbers.add(3);\nnumbers.add(7);\nnumbers.add(3);\nSystem.out.println("The numbers in the beginning:");\nfor (int number : numbers) {\nSystem.out.println(number);\n}\nwhile (numbers.contains(Integer.valueOf(3))) {\nnumbers.remove(Integer.valueOf(3));\n}\nSystem.out.println("The numbers after removal:");\nfor (int number : numbers) {\nSystem.out.println(number);\n}
4;Instructions on code-writing and problem solving;Well indented and "breathing" code;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,WhileStatement:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:6,ActualMethodParameter:10,ArrayInitializer:1,ForEachStatement:2,;public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(4);\n    numbers.add(3);\n    numbers.add(7);\n    numbers.add(3);\n\n    System.out.println("The numbers in the beginning:");\n\n    // here we print numbers\n    for (int number : numbers) {\n        System.out.println(number);\n    }\n\n    // checks if the list contains the number 3\n    while (numbers.contains(Integer.valueOf(3))) {\n        numbers.remove(Integer.valueOf(3));  // if yes, it is removed\n    }\n    // we use a while structure to get all the threes removed!\n\n    System.out.println("The numbers after removal:");\n\n     // here we print numbers\n    for (int number : numbers) {\n        System.out.println(number);\n    }\n}
4;Instructions on code-writing and problem solving;Getting rid of copy-paste with methods;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,WhileStatement:1,ClassDefinition:1,java.util.ArrayList:2,ArrayInitializationStatement:1,LessExpression:2,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,VoidDataType:2,GreaterExpression:2,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:6,ActualMethodParameter:10,ArrayInitializer:1,;public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(4);\n    numbers.add(3);\n    numbers.add(7);\n    numbers.add(3);\n\n    System.out.println("The numbers in the beginning:");\n\n    // here we print numbers\n    print(numbers);\n\n    while (numbers.contains(Integer.valueOf(3))) {\n        numbers.remove(Integer.valueOf(3));\n    }\n\n    System.out.println("The numbers after removal:");\n\n    // here we print numbers\n    print(numbers);\n}\n\npublic static void print(ArrayList<Integer> numbers) {\n    for (int number : numbers) {\n        System.out.println( number );\n    }\n}
4;Instructions on code-writing and problem solving;Slicing separate tasks into methods with descriptive names;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,java.util.ArrayList:2,ArrayInitializationStatement:1,LessExpression:2,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,VoidDataType:2,GreaterExpression:2,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:4,ActualMethodParameter:9,ArrayInitializer:1,;public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<Integer>();\n    numbers.add(4);\n    numbers.add(3);\n    numbers.add(7);\n    numbers.add(3);\n\n    System.out.println("The numbers in the beginning:");\n    print(numbers);\n\n    remove(numbers, 3);\n\n    System.out.println("The numbers after removal:");\n    print(numbers);\n}\n\npublic static void print(ArrayList<Integer> numbers) {\n    for (int number : numbers) {\n        System.out.println( number );\n    }\n}\n\npublic static void remove(ArrayList<Integer> numbers, int removed) {\n    while (numbers.contains(Integer.valueOf(removed))) {\n        numbers.remove(Integer.valueOf(removed));\n    }\n}
4;Object-oriented programming;Object;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:2,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:2,StringDataType:9,StringLiteral:9,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,GreaterExpression:2,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:9,ActualMethodParameter:9,ArrayInitializer:1,;public static void main(String[] args) {\n    ArrayList<String> cities = new ArrayList<String>();\n    ArrayList<String> countries = new ArrayList<String>();\n\n    countries.add("Finland");\n    countries.add("Germany");\n    countries.add("Netherlands");\n\n    cities.add("Berliini");\n    cities.add("Nijmegen");\n    cities.add("Turku");\n    cities.add("Helsinki");\n\n    System.out.println("number of countries " + countries.size() );\n    System.out.println("number of cities " + cities.size() );\n}
4;Object-oriented programming;Object;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,StringVariable:2,StringCreationStatement:1,ClassDefinition:1,StringDataType:2,StringConstructorCall:1,StringLiteral:2,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ActualMethodParameter:1,;String text = "some text";       // abbreviated way of creating a String\nString anotherText = new String("more text");
4;Object-oriented programming;A class and its objects;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:1,ActualMethodParameter:1,ObjectCreationStatement:1,;Scanner reader = new Scanner(System.in);
4;Object-oriented programming;A class and its objects;problem_72;;Accounts
4;Object-oriented programming;Defining your own class - object variables;code_sample;PublicClassSpecifier:1,StaticMethodSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,FormalMethodParameter:1,;public class Main {\n\n    public static void main(String[] args) {\n    }\n\n}
4;Object-oriented programming;Defining your own class - object variables;code_sample;PublicClassSpecifier:1,ClassDefinition:1,;public class Person {\n\n}
4;Object-oriented programming;Defining your own class - object variables;code_sample;PublicClassSpecifier:1,StringDataType:1,IntDataType:1,InstanceField:2,StringVariable:1,ClassDefinition:1,SimpleVariable:2,PrivateFieldSpecifier:2,;public class Person {\n    private String name;\n    private int age;\n}
4;Object-oriented programming;Defining your own class - constructor, or "formatting the state";code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ActualMethodParameter:1,ObjectCreationStatement:1,;public static void main(String[] args) {\n        Person bob = new Person("Bob");\n        // ...\n    }
4;Object-oriented programming;Defining your own class - constructor, or "formatting the state";code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,ConstructorDefinition:1,StringVariable:1,ClassDefinition:1,ThisReference:2,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:1,InstanceFieldInvocation:2,IntDataType:1,InstanceField:2,SimpleVariable:2,PrivateFieldSpecifier:2,;public class Person {\n    private String name;\n    private int age;\n\n    public Person(String initialName) {\n        this.age = 0;\n        this.name = initialName;\n    }\n}
4;Object-oriented programming;Class definition - methods;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ConstructorDefinition:1,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:3,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:2,InstanceFieldInvocation:3,StringLiteral:1,IntDataType:1,MethodDefinition:1,InstanceField:2,VoidDataType:1,SimpleVariable:2,PrivateFieldSpecifier:2,ActualMethodParameter:1,;public class Person {\n    private String name;\n    private int age;\n\n    public Person(String nameAtStart) {\n        this.age = 0;\n        this.name = nameAtStart;\n    }\n\n    public void printPerson() {\n        System.out.println(this.name + ", age " + this.age + " years");\n    }\n}
4;Object-oriented programming;Class definition - methods;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,VoidDataType:1,ConstructorCall:3,ObjectMethodInvocation:3,ActualMethodParameter:3,ObjectCreationStatement:3,;public class Main {\n\n    public static void main(String[] args) {\n        Person pekka = new Person("Pekka");\n        Person brian = new Person("Brian");\n        Person martin = new Person("Martin");\n\n        pekka.printPerson();\n        brian.printPerson();\n        martin.printPerson();\n    }\n}
4;Object-oriented programming;Class definition - methods;problem_73;;Product
4;Object-oriented programming;More methods;code_sample;PublicClassSpecifier:1,PostIncrementExpression:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ThisReference:1,;public class Person {\n    // ...\n\n    public void becomeOlder() {\n        this.age++;;    // same as this.age = this.age + 1;\n    }\n}
4;Object-oriented programming;More methods;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:6,ActualMethodParameter:3,ObjectCreationStatement:2,;public class Main {\n\n    public static void main(String[] args) {\n        Person pekka = new Person("Pekka");\n        Person andrew = new Person("Andrew");\n\n        pekka.printPerson();\n        andrew.printPerson();\n\n        System.out.println("");\n\n        pekka.becomeOlder();\n        pekka.becomeOlder();\n\n        pekka.printPerson();\n        andrew.printPerson();\n    }\n}
4;Object-oriented programming;More methods;code_sample;PublicClassSpecifier:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,ReturnStatement:1,ClassDefinition:1,ThisReference:1,;public class Person {\n    // ...\n\n    public int getAge() {\n        return this.age;\n    }\n}
4;Object-oriented programming;More methods;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,StringAddition:3,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:5,StringLiteral:5,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:2,ObjectMethodInvocation:6,ActualMethodParameter:5,ObjectCreationStatement:2,;public class Main {\n\n    public static void main(String[] args) {\n        Person pekka = new Person("Pekka");\n        Person andrew = new Person("Andrew");\n\n        pekka.becomeOlder();\n        pekka.becomeOlder();\n\n        andrew.becomeOlder();\n\n        System.out.println( "Age of Pekka: "+pekka.getAge() );\n        System.out.println( "Age of Andrew: "+andrew.getAge() );\n\n        int total = pekka.getAge() + andrew.getAge();\n\n        System.out.println( "Pekka and Andrew total of "+total+ " years old" );\n    }\n}
4;Object-oriented programming;More methods;problem_74;;Multiplier
4;Object-oriented programming;More methods;problem_75;;Decreasing counter
4;Object-oriented programming;More methods;problem_76;;Menu
4;Object-oriented programming;The Person class grows;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ConstructorDefinition:1,StringAddition:1,StringVariable:1,ClassDefinition:1,ThisReference:4,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:2,InstanceFieldInvocation:4,StringLiteral:1,AddExpression:1,IntDataType:1,MethodDefinition:2,InstanceField:2,VoidDataType:2,SimpleVariable:2,PrivateFieldSpecifier:2,ActualMethodParameter:1,;public class Person {\n    private String name;\n    private int age;\n\n    public Person(String initialName) {\n        this.age = 0;\n        this.name = initialName;\n    }\n\n    public void printPerson() {\n        System.out.println(this.name + ", age " + this.age + " years");\n    }\n\n    public void becomeOlder() {\n        this.age = this.age + 1;\n    }\n}
4;Object-oriented programming;The Person class grows;code_sample;PublicClassSpecifier:1,IfStatement:1,LessExpression:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,ReturnStatement:2,True:1,False:1,ClassDefinition:1,BooleanDataType:1,ThisReference:1,;public class Person {\n    // ...\n\n    public boolean isAdult(){\n        if ( this.age < 18 ) {\n            return false;\n        }\n\n        return true;\n    }\n\n   /*\n      note that the method could also be written like this:\n  \n      public boolean isAdult(){\n        return this.age >= 18;\n      }\n   */\n}
4;Object-oriented programming;The Person class grows;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,IfElseStatement:2,WhileStatement:1,ClassDefinition:1,java.lang.System.out.print:4,StringDataType:7,LessExpression:1,StringLiteral:7,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:8,ActualMethodParameter:7,ObjectCreationStatement:2,;public static void main(String[] args) {\n        Person bob = new Person("Bob");\n        Person andy = new Person("Andy");\n\n        int i = 0;\n        while ( i < 30 ) {\n            bob.becomeOlder();\n            i++;\n        }\n\n        andy.becomeOlder();\n\n        System.out.println("");\n\n        if ( andy.isAdult() ) {\n            System.out.print("adult: ");\n            andy.printPerson();\n        } else {\n            System.out.print("minor: ");\n            andy.printPerson();\n        }\n\n        if ( bob.isAdult() ) {\n            System.out.print("adult: ");\n            bob.printPerson();\n        } else {\n            System.out.print("minor: ");\n            bob.printPerson();\n        }\n    }
4;Object-oriented programming;The Person class grows;code_sample;PublicClassSpecifier:1,StringDataType:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,ReturnStatement:1,ClassDefinition:1,ThisReference:1,;public class Person {\n    // ...\n\n    public String getName() {\n        return this.name;\n    }\n}
4;Object-oriented programming;The Person class grows;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:5,IfElseStatement:2,StringAddition:4,WhileStatement:1,ClassDefinition:1,StringDataType:7,LessExpression:1,StringLiteral:7,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:8,ActualMethodParameter:7,ObjectCreationStatement:2,;public static void main(String[] args) {\n        Person bob = new Person("bob");\n        Person andy = new Person("andy");\n\n        int i = 0;\n        while ( i < 30 ) {\n            bob.becomeOlder();\n            i++;\n        }\n\n        andy.becomeOlder();\n\n        System.out.println("");\n\n        if ( andy.isAdult() ) {\n            System.out.println( andy.getName() + " is an adult" );\n        } else {\n            System.out.println( andy.getName() + " is a minor" );\n        }\n\n        if ( bob.isAdult() ) {\n            System.out.println( bob.getName() + " is an adult" );\n        } else {\n            System.out.println( bob.getName() + " is a minor" );\n        }\n    }
4;Object-oriented programming;toString;code_sample;PublicClassSpecifier:1,StringDataType:2,InstanceFieldInvocation:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,ReturnStatement:1,StringAddition:1,OverridingToString:1,ClassDefinition:1,ThisReference:1,;public class Person {\n    // ...\n\n    public String toString() {\n        return this.name + ", age " + this.age + " years";\n    }\n}
4;Object-oriented programming;toString;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,WhileStatement:1,ClassDefinition:1,StringDataType:2,LessExpression:1,StringLiteral:2,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:2,ActualMethodParameter:4,ObjectCreationStatement:2,;public static void main(String[] args) {\n        Person bob = new Person("Bob");\n        Person andy = new Person("Andy");\n\n        int i = 0;\n        while ( i < 30 ) {\n            bob.becomeOlder();\n            i++;\n        }\n\n        andy.becomeOlder();\n\n        System.out.println( andy ); // same as System.out.println( andy.toString() ); \n        System.out.println( bob ); // same as System.out.println( bob.toString() ); \n    }
4;Object-oriented programming;toString;code_sample;PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ActualMethodParameter:1,;System.out.println( andy );
4;Object-oriented programming;toString;code_sample;PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ObjectMethodInvocation:1,ActualMethodParameter:1,;System.out.println( andy.toString() );
4;Object-oriented programming;toString;problem_77;;Lyyra-card
4;Object-oriented programming;More methods;code_sample;SimpleAssignmentExpression:7,PublicClassSpecifier:1,PublicMethodSpecifier:3,MultiplyExpression:1,ConstructorDefinition:1,StringVariable:1,ClassDefinition:1,ThisReference:8,PublicConstructorSpecifier:1,FormalMethodParameter:3,StringDataType:1,InstanceFieldInvocation:8,DivideExpression:2,IntDataType:5,MethodDefinition:3,InstanceField:4,VoidDataType:2,ReturnStatement:1,DoubleDataType:2,SimpleVariable:4,PrivateFieldSpecifier:4,;public class Person {\n    private String name;\n    private int age;\n    private int weight;\n    private int height;\n\n    public Person(String initialName) {\n        this.age = 0;\n        this.name = initialName;\n        this.weight = 0;\n        this.height = 0;\n    }\n\n    public void setHeight(int newHeight) {\n        this.height = newHeight;\n    }\n\n    public void setWeight(int newWeight) {\n        this.weight = newWeight;\n    }\n\n    public double bodyMassIndex(){\n        double heightDividedByHundred = this.height / 100.0;\n        return this.weight / ( heightDividedByHundred * heightDividedByHundred );\n    }\n\n    // ...\n}
4;Object-oriented programming;More methods;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:2,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:6,ActualMethodParameter:8,ObjectCreationStatement:2,;public static void main(String[] args) {\n    Person matti = new Person("Matti");\n    Person john = new Person("John");\n\n    matti.setHeight(180);\n    matti.setWeight(86);\n\n    john.setHeight(175);\n    john.setWeight(64);\n\n    System.out.println(matti.getName() + ", body mass index: " + matti.bodyMassIndex());\n    System.out.println(john.getName() + ", body mass index: " + john.bodyMassIndex());\n}
4;Object-oriented programming;Object variable and parameter with identical name;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,ThisReference:1,;public void setHeight(int newHeight) {\n    this.height = newHeight;\n}
4;Object-oriented programming;Object variable and parameter with identical name;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,ThisReference:1,;public void setHeight(int height) {\n    this.height = height;\n}
4;Object-oriented programming;Object variable and parameter with identical name;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,;public void setHeight(int height) {\n    // DOES NOT WORK!\n    height = height;\n    // this just assigns the value of the parameter to the parameter itself\n}
4;Object-oriented programming;Contolling the number of decimals when printing a float;code_sample;PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:2,MethodDefinition:1,VoidDataType:1,StringAddition:2,ClassDefinition:1,ObjectMethodInvocation:2,ActualMethodParameter:2,;System.out.println(matti.getName() + ", body mass index: " + String.format( "%.2f", matti.bodyMassIndex()));\nSystem.out.println(john.getName() + ", body mass index: " + String.format( "%.2f", john.bodyMassIndex()));
4;Object-oriented programming;Contolling the number of decimals when printing a float;problem_78;;Clock using a counter
4;Object-oriented programming;Calling other methods within an object;code_sample;PublicClassSpecifier:1,StringDataType:1,InstanceFieldInvocation:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ReturnStatement:1,StringAddition:1,ClassDefinition:1,ThisReference:1,ObjectMethodInvocation:1,;public String toString() {\n    return this.name + ", age " + this.age + " years, my body mass index is " + this.bodyMassIndex();\n}
4;Object-oriented programming;Calling other methods within an object;code_sample;PublicClassSpecifier:1,StringDataType:1,InstanceFieldInvocation:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ReturnStatement:1,StringAddition:1,ClassDefinition:1,ThisReference:1,;public String toString() {\n    return this.name + ", age " + this.age + " years, my body mass index is " + bodyMassIndex();\n}
4;Object-oriented programming;Calling other methods within an object;problem_79;;NumberStatistics
4;Randomness;-;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ImportStatement:1,WhileStatement:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,LessExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:1,ObjectCreationStatement:1,;import java.util.Random;\n\npublic class Randomizing {\n    public static void main(String[] args) {\n        Random randomizer = new Random(); // creates a random number generator\n        int i = 0;\n\n        while (i < 10) {\n            // Generates and prints out a new random number on each round of the loop\n            System.out.println(randomizer.nextInt(10));\n            i++;\n        }\n    }\n}
4;Randomness;-;code_sample;IfElseIfStatement:1,ConstructorDefinition:1,ImportStatement:2,ClassDefinition:1,java.util.ArrayList:1,LessEqualExpression:2,SubtractExpression:1,StringDataType:4,MethodDefinition:2,InstanceField:1,ReturnStatement:4,SimpleVariable:1,ConstructorCall:1,SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:2,MultiplyExpression:1,IfElseStatement:1,ThisReference:3,PublicConstructorSpecifier:1,ExplicitTypeCasting:1,InstanceFieldInvocation:3,StringLiteral:3,IntDataType:2,DoubleDataType:1,ObjectMethodInvocation:2,PrivateFieldSpecifier:1,ObjectCreationStatement:1,;import java.util.ArrayList;\nimport java.util.Random;\n\npublic class WeatherForecaster {\n    private Random random;\n\n    public WeatherForecaster() {\n        this.random = new Random();\n    }\n\n    public String forecastWeather() {\n        double probability = this.random.nextDouble();\n\n        if (probability <= 0.1) {\n            return "Sleet";\n        } else if (probability <= 0.4) { // 0.1 + 0.3\n            return "Snow";\n        } else { // the rest, 1.0 - 0.4 = 0.6\n            return "Sunny";\n        }\n    }\n\n    public int forecastTemperature() {\n        return (int) ( 4 * this.random.nextGaussian() - 3 );\n    }\n}
4;Randomness;-;code_sample;PublicClassSpecifier:1,PublicMethodSpecifier:1,MultiplyExpression:1,ClassDefinition:1,ThisReference:1,SubtractExpression:1,ExplicitTypeCasting:1,InstanceFieldInvocation:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ReturnStatement:1,ObjectMethodInvocation:1,;public int forecastTemperature() {\n    return (int) ( 4 * this.random.nextGaussian() - 3 );\n}
4;Randomness;-;code_sample;SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:1,StringVariable:1,ClassDefinition:1,FormalMethodParameter:1,java.util.ArrayList:1,GenericObjectCreationStatement:1,StaticMethodSpecifier:1,StringDataType:5,StringLiteral:3,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:3,ObjectCreationStatement:1,ForEachStatement:1,;public class Program {\n\n    public static void main(String[] args) {\n        WeatherForecaster forecaster = new WeatherForecaster();\n\n        // Use a list to help you organise things\n        ArrayList<String> days = new ArrayList<String>();\n        Collections.addAll(days, "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun");\n\n        System.out.println("Weather forecast for the next week:");\n        for(String day : days) {\n            String weatherForecast = forecaster.forecastWeather();\n            int temperatureForecast = forecaster.forecastTemperature();\n\n            System.out.println(day + ": " + weatherForecast + " " + temperatureForecast + " degrees.");\n        }\n    }\n}
4;Randomness;-;problem_80;;Rolling the dice
4;Randomness;-;problem_81;;Password randomizer
4;Randomness;-;problem_82;;Lottery
4;Randomness;-;problem_83;;Game logic for Hangman
5;More about objects and classes;Multiple constructors;code_sample;ConstructorDefinition:1,StringAddition:2,True:1,False:1,ClassDefinition:1,FormalMethodParameter:3,StringDataType:5,IfStatement:1,LessExpression:1,MethodDefinition:10,InstanceField:4,ReturnStatement:7,SimpleVariable:4,BooleanDataType:1,SimpleAssignmentExpression:7,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:10,java.lang.System.out.println:1,MultiplyExpression:1,StringVariable:1,ThisReference:15,PublicConstructorSpecifier:1,InstanceFieldInvocation:15,DivideExpression:2,StringLiteral:2,IntDataType:7,VoidDataType:4,DoubleDataType:2,OverridingToString:1,ObjectMethodInvocation:1,PrivateFieldSpecifier:4,ActualMethodParameter:1,;public class Person {\n\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n\n     public Person(String name) {\n        this.name = name;\n        this.age = 0;\n        this.weight = 0;\n        this.height = 0;\n    }\n\n    public void printPerson() {\n        System.out.println(this.name + " I am " + this.age + " years old");\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public boolean adult(){\n        if ( this.age < 18 ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public double weightIndex(){\n        double heightInMeters = this.height/100.0;\n\n        return this.weight / (heightInMeters*heightInMeters);\n    }\n\n    public String toString(){\n        return this.name + " I am " + this.age + " years old, my weight index is " + this.weightindex();\n    }\n\n    public void setHeight(int height){\n        this.height = height;\n    }\n\n    public int getHeight(){\n        return this.height;\n    }\n\n    public int getWeight() {\n        return this.weight;\n    }\n\n    public void setWeight(int weight) {\n        this.weight = weight;\n    }\n\n    public String getName(){\n        return this.name;\n    }\n}
5;More about objects and classes;Multiple constructors;code_sample;SimpleAssignmentExpression:4,PublicClassSpecifier:1,ObjectVariable:1,InstanceFieldInvocation:4,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:1,ThisReference:4,;public Person(String name) {\n    this.name = name;\n    this.age = 0;\n    this.weight = 0;\n    this.height = 0;\n}
5;More about objects and classes;Multiple constructors;code_sample;SimpleAssignmentExpression:8,PublicClassSpecifier:1,ObjectVariable:2,InstanceFieldInvocation:8,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:2,ThisReference:8,;public Person(String name) {\n    this.name = name;\n    this.age = 0;\n    this.weight = 0;\n    this.height = 0;\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n    this.weight = 0;\n    this.height = 0;\n}
5;More about objects and classes;Multiple constructors;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ActualMethodParameter:4,ObjectCreationStatement:2,;public static void main(String[] args) {\n    Person pekka = new Person("Pekka", 24);\n    Person esko = new Person("Esko");\n\n    System.out.println( pekka );\n    System.out.println( esko );\n}
5;More about objects and classes;Calling your own constructor;code_sample;SimpleAssignmentExpression:4,PublicClassSpecifier:1,ObjectVariable:2,InstanceFieldInvocation:4,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,SimpleVariable:2,ThisReference:4,;public Person(String name) {\n    this(name, 0);  // run here the other constructor's code and set the age parameter to 0\n}\n\npublic Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n    this.weight = 0;\n    this.height = 0;\n}
5;More about objects and classes;Overloading a method;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,InstanceFieldInvocation:2,PublicMethodSpecifier:1,AddExpression:2,MethodDefinition:1,IntDataType:1,VoidDataType:2,ClassDefinition:1,ThisReference:2,SimpleVariable:1,;public void becomeOlder() {\n    this.age = this.age + 1;\n}\n\npublic void becomeOlder(int years) {\n    this.age = this.age + years;\n}
5;More about objects and classes;Overloading a method;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:2,ActualMethodParameter:5,ObjectCreationStatement:1,;public static void main(String[] args) {\n    Person pekka = new Person("Pekka", 24);\n\n    System.out.println(pekka);\n    pekka.becomeOlder();\n    System.out.println(pekka);\n    pekka.becomeOlder(10);\n    System.out.println(pekka);\n}
5;More about objects and classes;Overloading a method;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,ThisReference:1,InstanceFieldInvocation:1,AddExpression:1,MethodDefinition:1,IntDataType:1,VoidDataType:2,ObjectMethodInvocation:1,SimpleVariable:1,ActualMethodParameter:1,;public void becomeOlder() {\n    this.becomeOlder(1);\n}\n\npublic void becomeOlder(int years) {\n    this.age = this.age + years;\n}
5;More about objects and classes;Overloading a method;problem_84;;Overloaded counter
5;More about objects and classes;Object is at the end of a wire;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ActualMethodParameter:2,ObjectCreationStatement:1,;public static void main(String[] args) {\n    Person pekka = new Person("Pekka", 24);\n\n    System.out.println( pekka );\n}
5;More about objects and classes;Object is at the end of a wire;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:4,ObjectCreationStatement:1,;public static void main(String[] args) {\n    Person pekka = new Person("Pekka", 24);\n\n    System.out.println( pekka );\n\n    Person person = pekka;\n    person.becomeOlder(25);\n\n    System.out.println( pekka );\n}
5;More about objects and classes;Object is at the end of a wire;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:3,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:1,ActualMethodParameter:6,ObjectCreationStatement:2,;public static void main(String[] args) {\n    Person pekka = new Person("Pekka", 24);\n\n    System.out.println( pekka );\n\n    Person person = pekka;\n    person.becomeOlder(25);\n\n    System.out.println( pekka );\n\n    pekka = new Person("Pekka Mikkola", 24);\n    System.out.println( pekka );\n}
5;More about objects and classes;Object is at the end of a wire;code_sample;SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:1,ActualMethodParameter:7,ObjectCreationStatement:2,;public static void main(String[] args) {\n    Person pekka = new Person("Pekka", 24);\n\n    System.out.println( pekka );\n\n    Person person = pekka;\n    person.becomeOlder(25);\n\n    System.out.println( pekka );\n\n    pekka = new Person("Pekka Mikkola", 24);\n    System.out.println( pekka );\n\n    person = null;\n    System.out.println( person );\n}
5;More about objects and classes;Object is at the end of a wire;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,nullInitialization:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:1,ActualMethodParameter:3,ObjectCreationStatement:1,;public static void main(String[] args) {\n    Person pekka = new Person("Pekka", 24);\n\n    System.out.println( pekka );\n\n    Person person = null;\n    System.out.println( person.weightIndex() );\n}
5;More about objects and classes;An object as a method parameter;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,InstanceFieldInvocation:1,InstanceField:1,ConstructorDefinition:1,DoubleDataType:2,ClassDefinition:1,SimpleVariable:1,ThisReference:1,PrivateFieldSpecifier:1,PublicConstructorSpecifier:1,FormalMethodParameter:1,;public class WeightWatchersAssociation {\n    private double lowestWeightIndex;\n\n    public WeightWatchersAssociation(double indexLimit) {\n        this.lowestWeightIndex = indexLimit;\n    }\n\n}
5;More about objects and classes;An object as a method parameter;code_sample;PublicClassSpecifier:1,PublicMethodSpecifier:1,True:1,False:1,ClassDefinition:1,ThisReference:1,FormalMethodParameter:1,IfStatement:1,LessExpression:1,InstanceFieldInvocation:1,MethodDefinition:1,ReturnStatement:2,BooleanDataType:1,ObjectMethodInvocation:1,;public class WeightWatchersAssociation {\n    // ...\n\n    public boolean isAcceptedAsMember(Person person) {\n        if ( person.weightIndex() < this.lowestWeightIndex ) {\n            return false;\n        }\n\n        return true;\n    }\n}
5;More about objects and classes;An object as a method parameter;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,IfElseStatement:2,StringAddition:4,ClassDefinition:1,StringDataType:6,StringLiteral:6,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:3,ObjectMethodInvocation:10,ActualMethodParameter:13,ObjectCreationStatement:3,;public static void main(String[] args) {\n    Person matti = new Person("Matti");\n    matti.setWeight(86);\n    matti.setHeight(180);\n\n    Person juhana = new Person("Juhana");\n    juhana.setWeight(64);\n    juhana.setHeight(172);\n\n    WeightWatchersAssociation kumpulasWeight = new WeightWatchersAssociation(25);\n\n    if ( kumpulasWeight.isAcceptedAsMember(matti) ) {\n        System.out.println( matti.getName() + " is accepted as a member");\n    } else {\n        System.out.println( matti.getName() + " is not accepted as a member");\n    }\n\n    if ( kumpulasWeight.isAcceptedAsMember(juhana) ) {\n        System.out.println( juhana.getName() + " is accepted as a memberksi");\n    } else {\n        System.out.println( juhana.getName() + " is not accepted as a member");\n    }\n}
5;More about objects and classes;An object as a method parameter;problem_85;;Reformatory
5;More about objects and classes;An object as a method parameter;problem_86;;Lyyra card and Cash Register
5;More about objects and classes;Another object of the same type as a parameter to a method;code_sample;PublicClassSpecifier:1,StringDataType:1,IntDataType:3,InstanceField:4,StringVariable:1,ClassDefinition:1,SimpleVariable:4,PrivateFieldSpecifier:4,;public class Person {\n\n    private String name;\n    private int age;\n    private int height;\n    private int weight;\n\n    // ...\n}
5;More about objects and classes;Another object of the same type as a parameter to a method;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,StringDataType:3,IfStatement:1,StringLiteral:3,MethodDefinition:1,VoidDataType:1,GreaterExpression:1,ConstructorCall:2,ObjectMethodInvocation:2,ActualMethodParameter:3,ObjectCreationStatement:2,;Person pekka = new Person("Pekka");\nPerson juhana = new Person("Juhana")\n\nif ( pekka.getAge() > juhana.getAge() ) {\n    System.out.println(pekka.getName() + " is older than " + juhana.getName());\n}
5;More about objects and classes;Another object of the same type as a parameter to a method;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,StringAddition:2,ClassDefinition:1,StringDataType:4,StringLiteral:4,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ObjectMethodInvocation:3,ActualMethodParameter:5,ObjectCreationStatement:2,;public static void main(String[] args) {\n    Person pekka = new Person("Pekka", 24);\n    Person antti = new Person("Antti", 22);\n\n    if (pekka.olderThan(antti)) {  //  same as pekka.olderThan(antti)==true\n        System.out.println(pekka.getName() + " is older than " + antti.getName());\n    } else {\n        System.out.println(pekka.getName() + " isn't older than " + antti.getName());\n    }\n}
5;More about objects and classes;Another object of the same type as a parameter to a method;code_sample;PublicClassSpecifier:1,PublicMethodSpecifier:1,True:1,False:1,ClassDefinition:1,ThisReference:1,FormalMethodParameter:1,IfStatement:1,InstanceFieldInvocation:1,MethodDefinition:1,ConstantInvocation:1,GreaterExpression:1,ReturnStatement:2,BooleanDataType:1,;public class Person {\n    // ...\n\n    public boolean olderThan(Person compared) {\n        if ( this.age > compared.age ) {\n            return true;\n        }\n\n        return false;\n    }\n}
5;More about objects and classes;The date as an object;code_sample;ConstructorDefinition:1,StringAddition:1,EqualExpression:2,True:3,False:1,ClassDefinition:1,FormalMethodParameter:2,StringDataType:2,IfStatement:3,LessExpression:3,AndExpression:2,MethodDefinition:2,ConstantInvocation:4,InstanceField:3,ReturnStatement:5,SimpleVariable:3,BooleanDataType:1,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:2,ThisReference:8,PublicConstructorSpecifier:1,InstanceFieldInvocation:8,StringLiteral:1,IntDataType:4,OverridingToString:1,PrivateFieldSpecifier:3,;public class MyDate {\n    private int day;\n    private int month;\n    private int year;\n\n    public MyDate(int day, int month, int year) {\n        this.day = day;\n        this.month = month;\n        this.year = year;\n    }\n\n    public String toString() {\n        return this.day + "." + this.month + "." + this.year;\n    }\n\n    public boolean earlier(MyDate compared) {\n        // first we'll compare years\n        if ( this.year < compared.year ) {\n            return true;\n        }\n\n        // if the years are the same, we'll compare the months\n        if ( this.year == compared.year && this.month < compared.month ) {\n            return true;\n        }\n\n        // years and months the same, we'll compare the days\n        if ( this.year == compared.year && this.month == compared.month &&\n                this.day < compared.day ) {\n            return true;\n        }\n\n        return false;\n    }\n}
5;More about objects and classes;The date as an object;code_sample;SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:6,StringAddition:6,ClassDefinition:1,StringDataType:6,StringLiteral:6,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:4,ObjectMethodInvocation:6,ActualMethodParameter:10,ObjectCreationStatement:4,;public static void main(String[] args) {\n    MyDate p1 = new MyDate(14, 2, 2011);\n    MyDate p2 = new MyDate(21, 2, 2011);\n    MyDate p3 = new MyDate(1, 3, 2011);\n    MyDate p4 = new MyDate(31, 12, 2010);\n\n    System.out.println( p1 + " earlier than " + p2 + ": " + p1.earlier(p2));\n    System.out.println( p2 + " earlier than " + p1 + ": " + p2.earlier(p1));\n\n    System.out.println( p2 + " earlier than " + p3 + ": " + p2.earlier(p3));\n    System.out.println( p3 + " earlier than " + p2 + ": " + p3.earlier(p2));\n\n    System.out.println( p4 + " earlier than " + p1 + ": " + p4.earlier(p1));\n    System.out.println( p1 + " earlier than " + p4 + ": " + p1.earlier(p4));\n}
5;More about objects and classes;The date as an object;problem_87;;Apartment comparison
5;More about objects and classes;Objects on a list;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:4,ClassDefinition:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:3,ObjectMethodInvocation:4,ActualMethodParameter:9,ObjectCreationStatement:3,ForEachStatement:3,;public static void main(String[] args) {\n    ArrayList<Person> teachers = new ArrayList<Person>();\n\n    // first we can take a person into a variable\n    Person teacher = new Person("Juhana");\n    // and then add it to the list\n    teachers.add(teacher);\n\n    // or we can create the object as we add it:\n    teachers.add( new Person("Matti") );\n    teachers.add( new Person("Martin") );\n\n    System.out.println("teachers as newborns: ");\n    for ( Person prs : teachers ) {\n        System.out.println( prs );\n    }\n\n    for ( Person prs : teachers ) {\n        prs.becomeOlder( 30 );\n    }\n\n    System.out.println("in 30 years: ");\n    for ( Person prs : teachers ) {\n        System.out.println( prs );\n    }\n}
5;More about objects and classes;Objects on a list;problem_88;;Students
5;More about objects and classes;An object within an object;code_sample;PublicClassSpecifier:1,StringDataType:1,IntDataType:3,InstanceField:5,StringVariable:1,ClassDefinition:1,SimpleVariable:5,PrivateFieldSpecifier:5,;public class Person {\n    private String name;\n    private int age;\n    private int weight;\n    private int height;\n    private MyDate birthMyDate;\n\n    // ...
5;More about objects and classes;An object within an object;code_sample;SimpleAssignmentExpression:4,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,ThisReference:4,ObjectVariable:1,InstanceFieldInvocation:4,MethodDefinition:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ConstructorCall:1,ActualMethodParameter:1,ObjectCreationStatement:1,;public Person(String name, int day, int month, int year) {\n        this.name = name;\n        this.weight = 0;\n        this.height = 0;\n        this.birthMyDate = new MyDate(day, month, year);\n    }
5;More about objects and classes;An object within an object;code_sample;PublicClassSpecifier:1,StringDataType:1,InstanceFieldInvocation:1,StringLiteral:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ReturnStatement:1,StringAddition:1,ClassDefinition:1,ThisReference:1,;public String toString() {\n    return this.name + ", born " + this.birthMyDate;\n}
5;More about objects and classes;An object within an object;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:2,ActualMethodParameter:4,ObjectCreationStatement:2,;public static void main(String[] args) {\n    Person martin = new Person("Martin", 24, 4, 1983);\n\n    Person juhana = new Person("Juhana", 17, 9, 1985);\n\n    System.out.println( martin );\n    System.out.println( juhana );\n}
5;More about objects and classes;An object within an object;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,StringDataType:1,StringLiteral:1,AddExpression:1,MethodDefinition:1,IntDataType:3,VoidDataType:1,ObjectMethodInvocation:3,ActualMethodParameter:4,;int day = Calendar.getInstance().get(Calendar.DATE);\nint month = Calendar.getInstance().get(Calendar.MONTH) + 1; // January is 0 so we add 1\nint year = Calendar.getInstance().get(Calendar.YEAR);\nSystem.out.println("Today is " + day + "." + month + "." + year );
5;More about objects and classes;An object within an object;problem_89;;Clock object
5;More about objects and classes;A list of objects within an object;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,ConstructorDefinition:1,StringVariable:1,ClassDefinition:1,ThisReference:3,PublicConstructorSpecifier:1,java.util.ArrayList:1,FormalMethodParameter:1,GenericObjectCreationStatement:1,StringDataType:1,InstanceFieldInvocation:3,InstanceField:3,DoubleDataType:2,SimpleVariable:3,PrivateFieldSpecifier:3,;public class WeightWatchersAssociation {\n    private double lowestWeightIndex;\n    private String name;\n    private ArrayList<Person> members;\n\n    public WeightWatchersAssociation(String name, double lowestWeightIndex) {\n        this.lowestWeightIndex = lowestWeightIndex;\n        this.name = name;\n        this.members = new ArrayList<Person>();\n    }\n\n    //..\n}
5;More about objects and classes;A list of objects within an object;code_sample;PublicClassSpecifier:1,PublicMethodSpecifier:3,True:1,NotExpression:1,False:1,ClassDefinition:1,ThisReference:2,FormalMethodParameter:2,IfStatement:2,LessExpression:1,StringDataType:1,InstanceFieldInvocation:2,MethodDefinition:3,VoidDataType:1,ReturnStatement:2,OverridingToString:1,BooleanDataType:1,ObjectMethodInvocation:2,ActualMethodParameter:2,;public class WeightWatchersAssociation {\n    // ...\n\n    public boolean isAccepted(Person person) {\n        if ( person.weightIndex() < this.lowestWeightIndex ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public void addAsMember(Person person) {\n        if ( !isAccepted(person) ) { // same as isAccepted(person) == false\n            return;\n        }\n\n        this.members.add(person);\n    }\n\n    public String toString() {\n        String membersAsString = "";\n\n        for ( Person member : this.members ) {\n            membersAsString += "  " + member.getName() + "\n";\n        }\n\n        return "Weightwatchers association " + this.name + " members: \n" + membersAsString;\n    }\n}
5;More about objects and classes;A list of objects within an object;code_sample;SimpleAssignmentExpression:5,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,StringDataType:5,StringLiteral:5,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:5,ObjectMethodInvocation:12,ActualMethodParameter:18,ObjectCreationStatement:5,;public static void main(String[] args) {\n    WeightWatchersAssociation weightWatcher = new WeightWatchersAssociation("Kumpulan paino", 25);\n\n    Person matti = new Person("Matti");\n    matti.setWeight(86);\n    matti.setHeight(180);\n    weightWatcher.addAsMember(matti);\n\n    Person juhana = new Person("Juhana");\n    juhana.setWeight(64);\n    juhana.setHeight(172);\n    weightWatcher.addAsMember(juhana);\n\n    Person harri = new Person("Harri");\n    harri.setWeight(104);\n    harri.setHeight(182);\n    weightWatcher.addAsMember(harri);\n\n    Person petri = new Person("Petri");\n    petri.setWeight(112);\n    petri.setHeight(173);\n    weightWatcher.addAsMember(petri);\n\n    System.out.println( weightWatcher );\n}
5;More about objects and classes;A list of objects within an object;problem_90;;Team and Players
5;More about objects and classes;Method returns an object;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,ThisReference:3,IfStatement:2,InstanceFieldInvocation:3,MethodDefinition:1,GreaterExpression:1,ReturnStatement:2,ObjectMethodInvocation:3,ActualMethodParameter:1,ForEachStatement:1,;public class WeightWatchersAssociation {\n    // ...\n\n    public Person personWithHighestWeightIndex() {\n        // if members list is empty, we'll return null-reference\n        if ( this.members.isEmpty() ) {\n            return null;\n        }\n\n        Person heaviestSoFar = this.members.get(0);\n\n        for ( Person person : this.members) {\n            if ( person.weightIndex() > heaviestSoFar.weightIndex() ) {\n                heaviestSoFar = person;\n            }\n        }\n\n        return heaviestSoFar;\n    }\n}
5;More about objects and classes;Method returns an object;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:2,ClassDefinition:1,java.lang.System.out.print:1,StringDataType:3,StringLiteral:3,MethodDefinition:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:1,ConstructorCall:1,ObjectMethodInvocation:3,ActualMethodParameter:3,ObjectCreationStatement:1,;public static void main(String[] args) {\n    WeightWatchersAssociation weightWatcher = new WeightWatchersAssociation("Kumpluan paino", 25);\n\n    // ..\n\n    Person heaviest = weightWatcher.personWithHighestWeightIndex();\n    System.out.print("member with the greatest weight index: " + heaviest.getName() );\n    System.out.println(" weight index " + String.format( "%.2f", heaviest.weightIndex() ) );\n}
5;More about objects and classes;Method returns an object it creates;code_sample;PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,;public Counter {\n    private int value;\n\n    public Counter(){\n        this(0);\n    }\n\n    public Counter(int initialValue){\n        this.value = initialValue;\n    }\n\n    public void grow(){\n        this.value++;\n    }\n\n    public String toString(){\n        return "value: "+value;\n    }\n\n    public Counter clone(){\n        // lets create a new counter object, that gets as its initial value\n        // the value of the counter that is being cloned\n        Counter clone = new Counter(this.value);\n\n        // return the clone to the caller\n        return clone;\n    }\n}
5;More about objects and classes;Method returns an object it creates;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:7,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ConstructorCall:1,ObjectMethodInvocation:8,ActualMethodParameter:7,ObjectCreationStatement:1,;Counter counter = new Counter();\ncounter.grow();\ncounter.grow();\n\nSystem.out.println(counter);         // prints 2\n\nCounter clone = counter.clone();\n\nSystem.out.println(counter);         // prints 2\nSystem.out.println(clone);           // prints 2\n\ncounter.grow();\ncounter.grow();\ncounter.grow();\ncounter.grow();\n\nSystem.out.println(counter);         // prints 6\nSystem.out.println(clone);           // prints 2\n\nclone.grow();\n\nSystem.out.println(counter);         // prints 6\nSystem.out.println(clone);           // prints 3
5;More about objects and classes;Method returns an object it creates;problem_91;;Extending MyDate
5;More about objects and classes;More assignments;problem_92;;Difference of two dates
5;More about objects and classes;More assignments;problem_93;;Person extended
6;A quick recap;-;problem_94;;PhoneBook
6;A quick recap;-;problem_95;;Money
6;A quick recap;Character strings are immutable;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,StringDataType:2,StringLiteral:2,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,StringVariable:1,ClassDefinition:1,ActualMethodParameter:1,;String characterString = "test";\ncharacterString + "tail";\n\nSystem.out.println( characterString );  // test
6;A quick recap;Character strings are immutable;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,StringVariable:1,ClassDefinition:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,VoidDataType:1,StringInitializationStatement:1,ActualMethodParameter:1,;String characterString = "test";\ncharacterString = characterString + "tail";   // or characterString += "tail";\n\nSystem.out.println( characterString );  // testtail
6;Array;-;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,ArrayInitializationStatement:1,PublicMethodSpecifier:1,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,ArrayDataType:1,ArrayInitializer:1,;int[] numbers = {100, 1, 42};
6;Array;-;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,ClassDefinition:1,ArrayInitializationStatement:2,StringDataType:1,StringLiteral:1,MethodDefinition:1,ArrayVariable:2,VoidDataType:1,DoubleDataType:1,ArrayDataType:2,ArrayInitializer:2,;String[] characterStringArray = {"Matti P.", "Matti V."};\ndouble[] floatingNumberArray = {1.20, 3.14, 100.0, 0.6666666667};
6;Array;-;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,ClassDefinition:1,ArrayInitializationStatement:1,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:2,ArrayElement:2,ArrayInitializer:1,;// index           0   1    2    3   4   5     6     7\nint[] numbers = {100,  1,  42,  23,  1,  1, 3200, 3201};\n\nSystem.out.println(numbers[0]);    // prints the number in the array's index 0: the number 100\nSystem.out.println(numbers[2]);    // prints the number in the array's index 2, the number 42
6;Array;-;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:1,ArrayInitializationStatement:1,PublicMethodSpecifier:1,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,ArrayDataType:1,ArrayElement:2,ArrayInitializer:1,;int[] numbers = {100,1,42};\n\nnumbers[0] = 1;    // setting value 1 to index 0\nnumbers[1] = 101;  // setting value 101 to index 1\n\n// the numbers array now looks like {1,101,42}
6;Array;Iteration of an array;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ArrayLength:1,WhileStatement:1,ClassDefinition:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,;int[] numbers = {1, 8, 10, 3, 5};\n\nint i = 0;\nwhile (i < numbers.length ) {\n    System.out.println(numbers[i]);\n    i++;\n}
6;Array;Iteration of an array;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:1,ArrayInitializer:1,ForEachStatement:1,;int[] numbers = {1,8,10,3,5};\n\nfor (int number : numbers) {\n    System.out.println(number);\n}
6;Array;Iteration of an array;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,ArrayVariable:1,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:1,ArrayInitializer:1,ForEachStatement:1,;String[] names = {"Juhana L.", "Matti P.", "Matti L.", "Pekka M."};\n\nfor (String name : names) {\n    System.out.println(name);\n}
6;Array;Another form of the for command;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,ForStatement:1,ActualMethodParameter:1,;for (int i = 0; i < 3; i++ ) {\n    System.out.println(i);\n}
6;Array;Another form of the for command;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,LessExpression:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,WhileStatement:1,ClassDefinition:1,ActualMethodParameter:1,;int i = 0;  // formatting the variable that will be used in the loop\nwhile ( i < 3 ) {  // condition\n    System.out.println(i);\n    i++;   // updating the variable that is used in the loop\n}
6;Array;Another form of the for command;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ForStatement:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,;int[] numbers = {1, 3, 5, 9, 17, 31, 57, 105};\n\nfor(int i = 3; i < 7; i++) {\n    System.out.println(numbers[i]);\n}
6;Array;Another form of the for command;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,GreaterExpression:1,PostDecrementExpression:1,ArrayDataType:1,ForStatement:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,;int[] numbers = {1, 3, 5, 9, 17, 31, 57, 105};\n\nfor(int i = 6; i>2 ; i--) {\n    System.out.println(numbers[i]);\n}
6;Array;For and array length;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ArrayLength:1,ClassDefinition:1,ArrayInitializationStatement:1,LessExpression:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ForStatement:1,ActualMethodParameter:1,ArrayElement:1,ArrayInitializer:1,;int[] numbers = {1, 8, 10, 3, 5};\n\nfor (int i = 0; i < numbers.length; i++ ) {\n    System.out.println(numbers[i]);\n}
6;Array;Array as a parameter;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,StringAddition:1,ClassDefinition:1,java.lang.System.out.print:1,ArrayInitializationStatement:2,StringDataType:3,StringLiteral:3,MethodDefinition:1,ArrayVariable:2,IntDataType:3,VoidDataType:2,SimpleVariable:2,ArrayDataType:3,ActualMethodParameter:4,ArrayInitializer:2,ForEachStatement:1,;public static void listCells(int[] integerArray) {\n\n    System.out.println("the cells of the array are: ");\n    for( int number : integerArray) {\n        System.out.print(number + " ");\n    }\n\n    System.out.println("");\n}\n\npublic static void  main(String[] args) {\n    int[] numbers = { 1, 2, 3, 4, 5 };\n    listCells(numbers);\n}
6;Array;Array as a parameter;problem_96;;Sum of the array
6;Array;Array as a parameter;problem_97;;Elegant printing of an array
6;Array;Creating a new array;code_sample;SimpleAssignmentExpression:2,ArrayCreationStatement:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:2,ArrayVariable:1,VoidDataType:1,ClassDefinition:1,ArrayDataType:1,;int cells = 99;\nint[] array = new int[cells];
6;Array;Creating a new array;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,EqualExpression:1,StringAddition:2,ArrayLength:1,ClassDefinition:1,ArrayCreationStatement:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,ArrayVariable:1,VoidDataType:1,ArrayDataType:1,ActualMethodParameter:2,;int cells = 99;\nint[] array = new int[cells]; //creating an array of the size of the value in the 'cells' variable\n\nif(array.length == cells) {\n    System.out.println("The length of the array is " + cells);\n} else {\n    System.out.println("Something unreal happened. The length of the array is something else than " + cells);\n}
6;Array;Creating a new array;code_sample;SimpleAssignmentExpression:5,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:3,ClassDefinition:1,java.lang.Integer.parseInt:2,java.lang.System.out.print:1,ArrayCreationStatement:1,StringDataType:3,LessExpression:2,StringLiteral:3,MethodDefinition:1,IntDataType:4,ArrayVariable:1,VoidDataType:1,ObjectMethodInvocation:2,ArrayDataType:1,ForStatement:2,ActualMethodParameter:6,ArrayElement:2,;System.out.print("How many values? ");\nint amountOfValues = Integer.parseInt(reader.nextLine());\n\nint[] values = new int[amountOfValues];\n\nSystem.out.println("Enter values:");\nfor(int i = 0; i < amountOfValues; i++) {\n    values[i] = Integer.parseInt(reader.nextLine());\n}\n\nSystem.out.println("Values again:");\nfor(int i = 0; i < amountOfValues; i++) {\n    System.out.println(values[i]);\n}
6;Array;An array as the return value;code_sample;SimpleAssignmentExpression:6,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayCreationStatement:1,StringDataType:3,ArrayInitializationStatement:1,ExplicitTypeCasting:1,StringLiteral:3,MethodDefinition:1,ArrayVariable:2,VoidDataType:2,ReturnStatement:1,ArrayDataType:2,SimpleVariable:1,ArrayElement:4,ActualMethodParameter:1,ArrayInitializer:1,;public static String[] giveStringTable() {\n    String[] tchrs = new String[3];\n\n    tchrs[0] = "Bonus";\n    tchrs[1] = "Ihq";\n    tchrs[2] = "Lennon";\n\n    return tchrs;\n}\n\npublic static void main(String[] args){\n    String[] teachers = giveStringTable();\n\n    for ( String teacher : teachers)\n        System.out.println( teacher );\n}
6;Array;An array as the return value;problem_98;;Reversing and copying of an array
6;About blocks and nested loops;-;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,EqualExpression:1,StringVariable:1,ClassDefinition:1,IfStatement:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,StringInitializationStatement:1,ActualMethodParameter:1,;int number = 5;\n\nif( number == 5 ){\n    String stringDefinedWithinBlock = "Yeah!";\n}\n\nSystem.out.println(stringDefinedWithinBlock); // does not work!
6;About blocks and nested loops;-;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,IfStatement:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,EqualExpression:1,ClassDefinition:1,ActualMethodParameter:1,;int number = 5;\n\nif( number == 5 ) {\n    number = 6;\n}\n\nSystem.out.println(number); // prints 6
6;About blocks and nested loops;-;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:2,ClassDefinition:1,java.lang.System.out.print:2,LessExpression:2,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,ForStatement:2,ActualMethodParameter:2,;for(int i = 0; i < 3; i++) {\n   System.out.print(i + ": ");\n\n   for(int j = 0; j < 3; j++) {\n      System.out.print(j + " ");\n   }\n\n   System.out.println();\n}
6;About blocks and nested loops;-;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:1,ClassDefinition:1,java.lang.System.out.print:1,LessExpression:1,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ForStatement:1,ActualMethodParameter:1,;for(int i = 0; i < 3; i++) {\n   System.out.print(i + ": ");\n\n   // the inner for-loop\n\n   System.out.println();\n}
6;About blocks and nested loops;variables defined outside of a for loop as its condition;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:2,ClassDefinition:1,java.lang.System.out.print:2,LessEqualExpression:1,LessExpression:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,IntDataType:2,VoidDataType:1,ForStatement:2,ActualMethodParameter:2,;for(int i = 0; i < 3; i++) {\n    System.out.print(i + ": ");\n\n    for(int j = 0; j <= i; j++) {\n        System.out.print(j + " ");\n    }\n\n    System.out.println();\n}
6;About blocks and nested loops;variables defined outside of a for loop as its condition;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:1,java.lang.System.out.println:1,MultiplyExpression:1,StringAddition:1,ClassDefinition:1,java.lang.System.out.print:1,LessEqualExpression:2,StringDataType:1,StringLiteral:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ForStatement:2,ActualMethodParameter:1,;for(int i = 1; i <= 10; i++) {\n\n    for(int j = 1; j <= 10; j++) {\n        System.out.print(i * j + " ");\n    }\n\n    System.out.println();\n}
6;About blocks and nested loops;variables defined outside of a for loop as its condition;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:2,PublicMethodSpecifier:2,java.lang.System.out.println:1,MultiplyExpression:1,StringAddition:1,ClassDefinition:1,java.lang.System.out.print:1,FormalMethodParameter:2,LessEqualExpression:2,StringDataType:1,StringLiteral:1,MethodDefinition:2,IntDataType:4,VoidDataType:2,ForStatement:2,ActualMethodParameter:2,;public class MultiplicationTable {\n\n    public void print(int upTo) {\n        for(int i = 1; i <= upTo; i++) {\n            printMultiplicationTableRow(i, upTo);\n\n            System.out.println();\n        }\n    }\n\n    public void printMultiplicationTableRow(int multiplier, int howManyTimes) {\n        for(int i = 1; j <= howManyTimes; i++) {\n            System.out.print(i * multiplier + " ");\n        }\n    }\n}
6;About blocks and nested loops;variables defined outside of a for loop as its condition;problem_99;;Array to stars
6;About blocks and nested loops;variables defined outside of a for loop as its condition;problem_100;;Night sky
6;To static or not to static?;-;code_sample;StringAddition:2,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,LessExpression:1,StringDataType:2,MethodDefinition:2,ArrayVariable:1,ForStatement:1,ArrayElement:1,ForEachStatement:2,SimpleAssignmentExpression:3,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:2,java.lang.System.out.println:1,ArrayLength:1,java.lang.System.out.print:2,ArrayInitializationStatement:1,StringLiteral:2,IntDataType:5,VoidDataType:2,ArrayDataType:1,ActualMethodParameter:3,ArrayInitializer:1,;public class Program {\n\n    public static void resetArray(int[] table) {\n        for ( int i=0; i < table.length; i++ )\n            table[i] = 0;\n    }\n\n    public static void main(String[] args) {\n        int[] values = { 1, 2, 3, 4, 5 };\n\n        for ( int number : values ) {\n            System.out.print( number + " " );  // prints 1, 2, 3, 4, 5\n        }\n\n        System.out.println();\n\n        resetArray(values);\n\n        for ( int number : values ) {\n            System.out.print( number + " " );  // prints 0, 0, 0, 0, 0\n        }\n    }\n}
6;To static or not to static?;-;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,StringAddition:2,ClassDefinition:1,java.lang.System.out.print:2,FormalMethodParameter:1,StaticMethodSpecifier:1,ArrayInitializationStatement:1,StringDataType:2,StringLiteral:2,MethodDefinition:1,ArrayVariable:1,IntDataType:3,VoidDataType:1,ArrayDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:3,ArrayInitializer:1,ForEachStatement:2,;public class Program {\n    public static void main(String[] args) {\n        int[] values = { 1, 2, 3, 4, 5 };\n\n        for ( int value : values ) {\n            System.out.print( value + " " );  // prints: 1, 2, 3, 4, 5\n        }\n\n        System.out.println();\n\n        ArrayHandling.resetArray(values);\n\n        for ( int value : values ) {\n            System.out.print( value + " " );  // prints: 0, 0, 0, 0, 0\n        }\n    }\n}
6;To static or not to static?;-;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,ArrayLength:1,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,LessExpression:1,MethodDefinition:1,IntDataType:2,VoidDataType:1,ForStatement:1,ArrayElement:1,;public class ArrayHandling {\n    public static void resetArray(int[] array) {\n        for ( int i=0; i < array.length; i++ ) {\n            array[i] = 0;\n        }\n    }\n}
6;To static or not to static?;When static methods should be used;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:3,ConstructorDefinition:1,True:1,StringVariable:1,False:1,ClassDefinition:1,ThisReference:5,PublicConstructorSpecifier:1,FormalMethodParameter:1,StringDataType:2,IfStatement:1,LessExpression:1,InstanceFieldInvocation:5,IntDataType:1,MethodDefinition:3,InstanceField:2,VoidDataType:1,ReturnStatement:3,SimpleVariable:2,BooleanDataType:1,PrivateFieldSpecifier:2,;public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name) {\n        this.age = 0;\n        this.name = name;\n    }\n\n    public boolean isAdult(){\n        if ( this.age < 18 ) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public void becomeOlder() {\n        this.age++;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}
6;To static or not to static?;When static methods should be used;code_sample;PublicClassSpecifier:1,StaticMethodSpecifier:1,PostIncrementExpression:1,InstanceFieldInvocation:1,PublicMethodSpecifier:1,MethodDefinition:1,VoidDataType:1,ClassDefinition:1,ThisReference:1,;public class Person {\n    //...\n\n    public static void becomeOlder() {\n        this.age++;\n    }\n}
6;To static or not to static?;When static methods should be used;code_sample;SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:6,IfElseStatement:3,StringAddition:6,ClassDefinition:1,FormalMethodParameter:1,StaticMethodSpecifier:1,StringDataType:9,LessExpression:1,StringLiteral:9,MethodDefinition:1,IntDataType:1,VoidDataType:1,ConstructorCall:3,ForStatement:1,ObjectMethodInvocation:12,ActualMethodParameter:9,ObjectCreationStatement:3,;public class Program {\n    public static void main(String[] args) {\n        Person pekka = new Person("Pekka");\n        Person antti = new Person("Antti");\n        Person juhana = new Person("Juhana");\n\n        for ( int i=0; i < 30; i++ ) {\n            pekka.becomeOlder();\n            juhana.becomeOlder();\n        }\n\n        antti.becomeOlder();\n\n        if ( antti.isAdult() ) {\n            System.out.println( antti.getName() + " is an adult" );\n        } else {\n            System.out.println( antti.getName() + " is a minor" );\n        }\n\n        if ( pekka.isAdult() ) {\n            System.out.println( pekka.getName() + " is an adult" );\n        } else {\n            System.out.println( pekka.getName() + " is a minor" );\n        }\n\n        if ( juhana.isAdult() ) {\n            System.out.println( juhana.getName() + " is an adult" );\n        } else {\n            System.out.println( juhana.getName() + " is a minor" );\n        }\n    }\n}
6;To static or not to static?;When static methods should be used;code_sample;SimpleAssignmentExpression:4,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,java.lang.System.out.println:2,IfElseStatement:1,StringAddition:2,PrivateMethodSpecifier:1,ClassDefinition:1,FormalMethodParameter:2,StaticMethodSpecifier:2,StringDataType:5,LessExpression:1,StringLiteral:5,MethodDefinition:2,IntDataType:1,VoidDataType:2,ConstructorCall:3,ForStatement:1,ObjectMethodInvocation:6,ActualMethodParameter:8,ObjectCreationStatement:3,;public class Main {\n\n    public static void main(String[] args) {\n        Person pekka = new Person("Pekka");\n        Person antti = new Person("Antti");\n        Person juhana = new Person("Juhana");\n\n        for ( int i=0; i < 30; i++ ) {\n            pekka.becomeOlder();\n            juhana.becomeOlder();\n        }\n\n        antti.becomeOlder();\n\n        reportMaturity(antti);\n\n        reportMaturity(pekka);\n\n        reportMaturity(juhana);\n    }\n\n    private static void reportMaturity(Person person) {\n        if ( person.isAdult() ) {\n            System.out.println(person.getName() + " is an adult");\n        } else {\n            System.out.println(person.getName() + " is a minor");\n        }\n    }\n}
6;To static or not to static?;When static methods should be used;problem_101;;The library information system
6;Assignments where you are free to decide how to structure the program.;-;problem_102;;Grade distribution
6;Assignments where you are free to decide how to structure the program.;-;problem_103;;Birdwatchers database
6;Sorting an array;Sorting an array with the ready-made tools of Java.;code_sample;SimpleAssignmentExpression:1,PublicClassSpecifier:1,PublicMethodSpecifier:1,java.lang.System.out.println:1,ClassDefinition:1,ArrayInitializationStatement:1,MethodDefinition:1,ArrayVariable:1,IntDataType:2,VoidDataType:1,ArrayDataType:1,ObjectMethodInvocation:1,ActualMethodParameter:2,ArrayInitializer:1,ForEachStatement:1,;int[] values = {-3, -111, 7, 42};\nArrays.sort(values);\nfor(int value: values) {\n    System.out.println(value);\n}
6;Sorting an array;Implementation of a sorting algorithm;problem_104;;Sorting
6;Searching;-;code_sample;PublicClassSpecifier:1,PublicMethodSpecifier:1,MethodDefinition:1,IntDataType:1,VoidDataType:1,ClassDefinition:1,BooleanDataType:1,SimpleVariable:1,ArrayDataType:1,;public static boolean isInArray(int[] array, int searchingFor) {\n    for ( int value : array ) {\n       if ( value == searchingFor )  {\n           return true;\n       }\n    }\n\n    return false;\n}\n\npublic static boolean isWordInArray(String[] array, String searchingFor) {\n    for ( String word: array ) {\n        if ( word.equals(searchingFor) )  {\n            return true;\n        }\n    }\n\n    return false;\n}
6;Searching;-;problem_105;;Guessing game
6;Searching;-;problem_106;;Implementation of binary search
6;About arrays and objects;-;code_sample;SimpleAssignmentExpression:5,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,ClassDefinition:1,ArrayCreationStatement:1,StringDataType:3,LessExpression:1,StringLiteral:3,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,SimpleVariable:1,ArrayDataType:2,ConstructorCall:3,ForStatement:1,ObjectMethodInvocation:3,ArrayElement:6,ActualMethodParameter:4,ObjectCreationStatement:3,ForEachStatement:1,;public static void main(String[] args) {\n    Person[] persons = new Person[3];\n\n    persons[0] = new Person("Pekka");\n    persons[1] = new Person("Antti");\n    persons[2] = new Person("Juhana");\n\n    for ( int i=0; i < 30; i++ ) {\n        persons[0].becomeOlder();\n        persons[1].becomeOlder();\n        persons[2].becomeOlder();\n    }\n\n    for ( Person person : persons ) {\n        reportMaturity(person);\n    }\n}
6;About arrays and objects;-;code_sample;SimpleAssignmentExpression:2,PublicClassSpecifier:1,PostIncrementExpression:1,PublicMethodSpecifier:1,ClassDefinition:1,java.util.ArrayList:1,ArrayInitializationStatement:1,LessExpression:2,StringDataType:3,StringLiteral:3,MethodDefinition:1,ArrayVariable:1,IntDataType:1,VoidDataType:1,GreaterExpression:1,SimpleVariable:1,ArrayDataType:1,ObjectMethodInvocation:4,ConstructorCall:3,ForStatement:1,ActualMethodParameter:4,ArrayInitializer:1,ObjectCreationStatement:3,ForEachStatement:2,;public static void main(String[] args) {\n    ArrayList<Person> persons = new ArrayList<Person>();\n\n    persons.add( new Person("Pekka") );\n    persons.add( new Person("Antti") );\n    persons.add( new Person("Juhana") );\n\n    for ( int i=0; i < 30; i++ ) {\n        for ( Person person : persons ) {\n            person.becomeOlder();\n        }\n\n        //  or persons.get(0).becomeOlder();\n        //     persons.get(1).becomeOlder();\n        //     ...\n    }\n\n    for ( Person person : persons ) {\n        reportMaturity(person);\n    }\n}
6;About arrays and objects;-;code_sample;SimpleAssignmentExpression:3,PublicClassSpecifier:2,ConstructorDefinition:1,StringVariable:1,ClassDefinition:2,PublicConstructorSpecifier:1,StringDataType:3,StringLiteral:2,InstanceField:2,SimpleVariable:2,ArrayDataType:1,ConstructorCall:2,PrivateFieldSpecifier:2,ArrayElement:2,ActualMethodParameter:2,ObjectCreationStatement:2,;public class Day {\n    private String name;\n    // ...\n}\n\npublic class Week {\n    private Day[] days;\n\n    public Week(){\n        days = new Day[7];\n        days[0] = new Day("Monday");\n        days[1] = new Day("Tuesday");\n        // ...\n    }\n}
